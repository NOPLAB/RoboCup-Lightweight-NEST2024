
NEST-Pre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3dc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  0800f5b0  0800f5b0  000105b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe90  0800fe90  000111e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe90  0800fe90  00010e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe98  0800fe98  000111e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe98  0800fe98  00010e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fe9c  0800fe9c  00010e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800fea0  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f68  200001e8  08010088  000111e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  08010088  00012150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c58e  00000000  00000000  00011218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c6  00000000  00000000  0002d7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00031070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f5  00000000  00000000  000328a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266f4  00000000  00000000  00033b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b17f  00000000  00000000  0005a289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8621  00000000  00000000  00075408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015da29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c44  00000000  00000000  0015da6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001656b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f594 	.word	0x0800f594

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800f594 	.word	0x0800f594

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <startReports>:
		printf("EventHandler, unknown event Id: %ld\n", pEvent->eventId);
	}
}

// Configure one sensor to produce periodic reports
static void startReports() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0

	// Shake detector
	// {SH2_SHAKE_DETECTOR, {.reportInterval_us = 10000}},
			};

	for (int n = 0; n < ARRAY_LEN(sensorConfig); n++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e020      	b.n	8000fc6 <startReports+0x4e>
		int sensorId = sensorConfig[n].sensorId;
 8000f84:	4914      	ldr	r1, [pc, #80]	@ (8000fd8 <startReports+0x60>)
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60bb      	str	r3, [r7, #8]

		status = sh2_setSensorConfig(sensorId, &sensorConfig[n].config);
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	b2d8      	uxtb	r0, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd8 <startReports+0x60>)
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3304      	adds	r3, #4
 8000faa:	4619      	mov	r1, r3
 8000fac:	f003 f884 	bl	80040b8 <sh2_setSensorConfig>
 8000fb0:	6078      	str	r0, [r7, #4]
		if (status != 0) {
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <startReports+0x48>
			printf("Error while enabling sensor %d\n", sensorId);
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	4808      	ldr	r0, [pc, #32]	@ (8000fdc <startReports+0x64>)
 8000fbc:	f00c fc2e 	bl	800d81c <iprintf>
	for (int n = 0; n < ARRAY_LEN(sensorConfig); n++) {
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0db      	beq.n	8000f84 <startReports+0xc>
		}
	}
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	0800f838 	.word	0x0800f838
 8000fdc:	0800f624 	.word	0x0800f624

08000fe0 <sensor_handler_wrapper>:
		printf("Unknown sensor: %d\n", value.sensorId);
		break;
	}
}

void sensor_handler_wrapper(void *cookie, sh2_SensorEvent_t *pEvent) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ba      	sub	sp, #232	@ 0xe8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	float angVelX, angVelY, angVelZ;
	static uint32_t lastSequence[SH2_MAX_SENSOR_ID + 1]; // last sequence number for each sensor
	sh2_SensorValue_t value;

	// Convert event to value
	sh2_decodeSensorEvent(&value, pEvent);
 8000fea:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000fee:	6839      	ldr	r1, [r7, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 f88b 	bl	800410c <sh2_decodeSensorEvent>

	// Compute new sample_id
	uint8_t deltaSeq = value.sequence - (lastSequence[value.sensorId] & 0xFF);
 8000ff6:	f897 2089 	ldrb.w	r2, [r7, #137]	@ 0x89
 8000ffa:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8000ffe:	4619      	mov	r1, r3
 8001000:	4b93      	ldr	r3, [pc, #588]	@ (8001250 <sensor_handler_wrapper+0x270>)
 8001002:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	lastSequence[value.sensorId] += deltaSeq;
 800100e:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8001012:	461a      	mov	r2, r3
 8001014:	4b8e      	ldr	r3, [pc, #568]	@ (8001250 <sensor_handler_wrapper+0x270>)
 8001016:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800101a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800101e:	f897 1088 	ldrb.w	r1, [r7, #136]	@ 0x88
 8001022:	4413      	add	r3, r2
 8001024:	4a8a      	ldr	r2, [pc, #552]	@ (8001250 <sensor_handler_wrapper+0x270>)
 8001026:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	// Get time as float
	t = value.timestamp / 1000000.0;
 800102a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff facb 	bl	80005cc <__aeabi_ul2d>
 8001036:	a384      	add	r3, pc, #528	@ (adr r3, 8001248 <sensor_handler_wrapper+0x268>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fc26 	bl	800088c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fdce 	bl	8000be8 <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

	bno08x_sensorType_t sensorType = UNKNOWN;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
	bno08x_data_t sensorData;

	sensorData.timestamp_uS = value.timestamp;
 8001058:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800105c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	switch (value.sensorId) {
 8001060:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8001064:	3b01      	subs	r3, #1
 8001066:	2b29      	cmp	r3, #41	@ 0x29
 8001068:	f200 80d7 	bhi.w	800121a <sensor_handler_wrapper+0x23a>
 800106c:	a201      	add	r2, pc, #4	@ (adr r2, 8001074 <sensor_handler_wrapper+0x94>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	08001185 	.word	0x08001185
 8001078:	0800121b 	.word	0x0800121b
 800107c:	0800116b 	.word	0x0800116b
 8001080:	0800121b 	.word	0x0800121b
 8001084:	0800119f 	.word	0x0800119f
 8001088:	0800121b 	.word	0x0800121b
 800108c:	0800121b 	.word	0x0800121b
 8001090:	080011c5 	.word	0x080011c5
 8001094:	0800121b 	.word	0x0800121b
 8001098:	0800121b 	.word	0x0800121b
 800109c:	0800121b 	.word	0x0800121b
 80010a0:	0800121b 	.word	0x0800121b
 80010a4:	0800121b 	.word	0x0800121b
 80010a8:	0800121b 	.word	0x0800121b
 80010ac:	0800121b 	.word	0x0800121b
 80010b0:	0800121b 	.word	0x0800121b
 80010b4:	0800121b 	.word	0x0800121b
 80010b8:	0800121b 	.word	0x0800121b
 80010bc:	0800121b 	.word	0x0800121b
 80010c0:	0800111d 	.word	0x0800111d
 80010c4:	08001151 	.word	0x08001151
 80010c8:	08001137 	.word	0x08001137
 80010cc:	0800121b 	.word	0x0800121b
 80010d0:	0800121b 	.word	0x0800121b
 80010d4:	0800121b 	.word	0x0800121b
 80010d8:	0800121b 	.word	0x0800121b
 80010dc:	0800121b 	.word	0x0800121b
 80010e0:	0800121b 	.word	0x0800121b
 80010e4:	0800121b 	.word	0x0800121b
 80010e8:	0800121b 	.word	0x0800121b
 80010ec:	0800121b 	.word	0x0800121b
 80010f0:	0800121b 	.word	0x0800121b
 80010f4:	0800121b 	.word	0x0800121b
 80010f8:	0800121b 	.word	0x0800121b
 80010fc:	0800121b 	.word	0x0800121b
 8001100:	0800121b 	.word	0x0800121b
 8001104:	0800121b 	.word	0x0800121b
 8001108:	0800121b 	.word	0x0800121b
 800110c:	0800121b 	.word	0x0800121b
 8001110:	0800121b 	.word	0x0800121b
 8001114:	0800121b 	.word	0x0800121b
 8001118:	080011e5 	.word	0x080011e5
		//        t,
		//        lastSequence[value.sensorId],
		//        value.un.rawAccelerometer.x,
		//        value.un.rawAccelerometer.y,
		//        value.un.rawAccelerometer.z);
		sensorType = BNO08X_RAW_ACCELEROMETER;
 800111c:	2301      	movs	r3, #1
 800111e:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		sensorData.raw_accelerometer.x = value.un.rawAccelerometer.x;
 8001122:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	@ 0x9c
 8001126:	837b      	strh	r3, [r7, #26]
		sensorData.raw_accelerometer.y = value.un.rawAccelerometer.y;
 8001128:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 800112c:	83bb      	strh	r3, [r7, #28]
		sensorData.raw_accelerometer.z = value.un.rawAccelerometer.z;
 800112e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8001132:	83fb      	strh	r3, [r7, #30]
		break;
 8001134:	e078      	b.n	8001228 <sensor_handler_wrapper+0x248>
		//        t,
		//        lastSequence[value.sensorId],
		//        value.un.rawMagnetometer.x,
		//        value.un.rawMagnetometer.y,
		//        value.un.rawMagnetometer.z);
		sensorType = BNO08X_RAW_MAGNETOMETER;
 8001136:	2302      	movs	r3, #2
 8001138:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		sensorData.raw_magnetometer.x = value.un.rawMagnetometer.x;
 800113c:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	@ 0x9c
 8001140:	843b      	strh	r3, [r7, #32]
		sensorData.raw_magnetometer.y = value.un.rawMagnetometer.y;
 8001142:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8001146:	847b      	strh	r3, [r7, #34]	@ 0x22
		sensorData.raw_magnetometer.z = value.un.rawMagnetometer.z;
 8001148:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800114c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 800114e:	e06b      	b.n	8001228 <sensor_handler_wrapper+0x248>
		//        t,
		//        lastSequence[value.sensorId],
		//        value.un.rawGyroscope.x,
		//        value.un.rawGyroscope.y,
		//        value.un.rawGyroscope.z);
		sensorType = BNO08X_RAW_GYROSCOPE;
 8001150:	2303      	movs	r3, #3
 8001152:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		sensorData.raw_gyroscope.x = value.un.rawGyroscope.x;
 8001156:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	@ 0x9c
 800115a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		sensorData.raw_gyroscope.y = value.un.rawGyroscope.y;
 800115c:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8001160:	853b      	strh	r3, [r7, #40]	@ 0x28
		sensorData.raw_gyroscope.z = value.un.rawGyroscope.z;
 8001162:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8001166:	857b      	strh	r3, [r7, #42]	@ 0x2a
		break;
 8001168:	e05e      	b.n	8001228 <sensor_handler_wrapper+0x248>
		//        lastSequence[value.sensorId],
		//        value.un.magneticField.x,
		//        value.un.magneticField.y,
		//        value.un.magneticField.z,
		//        value.status & 0x3);
		sensorType = BNO08X_MAGNETIC_FIELD;
 800116a:	2305      	movs	r3, #5
 800116c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		sensorData.magnetic_field.x = value.un.magneticField.x;
 8001170:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001174:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sensorData.magnetic_field.y = value.un.magneticField.y;
 8001176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800117a:	633b      	str	r3, [r7, #48]	@ 0x30
		sensorData.magnetic_field.z = value.un.magneticField.z;
 800117c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001180:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 8001182:	e051      	b.n	8001228 <sensor_handler_wrapper+0x248>
		//        t,
		//        lastSequence[value.sensorId],
		//        value.un.accelerometer.x,
		//        value.un.accelerometer.y,
		//        value.un.accelerometer.z);
		sensorType = BNO08X_ACCELEROMETER;
 8001184:	2304      	movs	r3, #4
 8001186:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		sensorData.accelerometer.x = value.un.accelerometer.x;
 800118a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800118e:	63bb      	str	r3, [r7, #56]	@ 0x38
		sensorData.accelerometer.y = value.un.accelerometer.y;
 8001190:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001194:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sensorData.accelerometer.z = value.un.accelerometer.z;
 8001196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800119a:	643b      	str	r3, [r7, #64]	@ 0x40
		break;
 800119c:	e044      	b.n	8001228 <sensor_handler_wrapper+0x248>
		//        SH2_ROTATION_VECTOR,
		//        t,
		//        lastSequence[value.sensorId],
		//        r, i, j, k,
		//        acc_rad);
		sensorType = BNO08X_ROTATION_VECTOR;
 800119e:	2306      	movs	r3, #6
 80011a0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		sensorData.rotationVector.i = value.un.rotationVector.i;
 80011a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011a8:	647b      	str	r3, [r7, #68]	@ 0x44
		sensorData.rotationVector.j = value.un.rotationVector.j;
 80011aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011ae:	64bb      	str	r3, [r7, #72]	@ 0x48
		sensorData.rotationVector.k = value.un.rotationVector.k;
 80011b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		sensorData.rotationVector.real = value.un.rotationVector.real;
 80011b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011ba:	653b      	str	r3, [r7, #80]	@ 0x50
		sensorData.rotationVector.accuracy = value.un.rotationVector.accuracy;
 80011bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80011c0:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
 80011c2:	e031      	b.n	8001228 <sensor_handler_wrapper+0x248>
		// printf(".%d %0.6f, %d, %0.6f, %0.6f, %0.6f, %0.6f\n",
		//        SH2_GAME_ROTATION_VECTOR,
		//        t,
		//        lastSequence[value.sensorId],
		//        r, i, j, k);
		sensorType = BNO08X_ROTATION_VECTOR;
 80011c4:	2306      	movs	r3, #6
 80011c6:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		sensorData.gameRotationVector.i = value.un.gameRotationVector.i;
 80011ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011ce:	65bb      	str	r3, [r7, #88]	@ 0x58
		sensorData.gameRotationVector.j = value.un.gameRotationVector.j;
 80011d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
		sensorData.gameRotationVector.k = value.un.gameRotationVector.k;
 80011d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011da:	663b      	str	r3, [r7, #96]	@ 0x60
		sensorData.gameRotationVector.real = value.un.gameRotationVector.real;
 80011dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011e0:	667b      	str	r3, [r7, #100]	@ 0x64
		break;
 80011e2:	e021      	b.n	8001228 <sensor_handler_wrapper+0x248>
		// printf(".%d %0.6f, %0.6f, %0.6f, %0.6f, %0.6f, %0.6f, %0.6f, %0.6f\n",
		//        SH2_GYRO_INTEGRATED_RV,
		//        t,
		//        angVelX, angVelY, angVelZ,
		//        r, i, j, k);
		sensorType = BNO08X_GYRO_INTEGRATED_RV;
 80011e4:	2307      	movs	r3, #7
 80011e6:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		sensorData.gyroIntegratedRV.i = value.un.gyroIntegratedRV.i;
 80011ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
		sensorData.gyroIntegratedRV.j = value.un.gyroIntegratedRV.j;
 80011f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011f4:	673b      	str	r3, [r7, #112]	@ 0x70
		sensorData.gyroIntegratedRV.k = value.un.gyroIntegratedRV.k;
 80011f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011fa:	677b      	str	r3, [r7, #116]	@ 0x74
		sensorData.gyroIntegratedRV.real = value.un.gyroIntegratedRV.real;
 80011fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001200:	67bb      	str	r3, [r7, #120]	@ 0x78
		sensorData.gyroIntegratedRV.angVelX = value.un.gyroIntegratedRV.angVelX;
 8001202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001206:	67fb      	str	r3, [r7, #124]	@ 0x7c
		sensorData.gyroIntegratedRV.angVelY = value.un.gyroIntegratedRV.angVelY;
 8001208:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800120c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		sensorData.gyroIntegratedRV.angVelZ = value.un.gyroIntegratedRV.angVelZ;
 8001210:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		break;
 8001218:	e006      	b.n	8001228 <sensor_handler_wrapper+0x248>
	default:
		printf("Unknown sensor: %d\n", value.sensorId);
 800121a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <sensor_handler_wrapper+0x274>)
 8001222:	f00c fafb 	bl	800d81c <iprintf>
		break;
 8001226:	bf00      	nop
	}

	bno08x_handler_t *callback = (bno08x_handler_t*) cookie;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	callback(&sensorData);
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001236:	4610      	mov	r0, r2
 8001238:	4798      	blx	r3
}
 800123a:	bf00      	nop
 800123c:	37e8      	adds	r7, #232	@ 0xe8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	f3af 8000 	nop.w
 8001248:	00000000 	.word	0x00000000
 800124c:	412e8480 	.word	0x412e8480
 8001250:	20000208 	.word	0x20000208
 8001254:	0800f748 	.word	0x0800f748

08001258 <bno08x_open>:

void bno08x_open(void *hal, bno08x_handler_t *callback) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
//	int status = sh2_open(hal, event_handler, NULL);
	int status = sh2_open(hal, NULL, NULL);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f002 fe62 	bl	8003f30 <sh2_open>
 800126c:	60f8      	str	r0, [r7, #12]
	printf("sh2_open\n");
 800126e:	480b      	ldr	r0, [pc, #44]	@ (800129c <bno08x_open+0x44>)
 8001270:	f00c fb3c 	bl	800d8ec <puts>
	if (status != SH2_OK) {
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <bno08x_open+0x2a>
		printf("sh2_open ERROR: %d\n", status);
 800127a:	68f9      	ldr	r1, [r7, #12]
 800127c:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <bno08x_open+0x48>)
 800127e:	f00c facd 	bl	800d81c <iprintf>
	}
	sh2_setSensorCallback(sensor_handler_wrapper, callback);
 8001282:	6839      	ldr	r1, [r7, #0]
 8001284:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <bno08x_open+0x4c>)
 8001286:	f002 ff01 	bl	800408c <sh2_setSensorCallback>
//	sh2_setSensorCallback(sensor_handler, NULL);
	reset_occurred = false;
 800128a:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <bno08x_open+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
	startReports();
 8001290:	f7ff fe72 	bl	8000f78 <startReports>
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	0800f75c 	.word	0x0800f75c
 80012a0:	0800f768 	.word	0x0800f768
 80012a4:	08000fe1 	.word	0x08000fe1
 80012a8:	20000204 	.word	0x20000204

080012ac <bno08x_update>:

void bno08x_update() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	if (reset_occurred) {
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <bno08x_update+0x24>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d007      	beq.n	80012c8 <bno08x_update+0x1c>
		printf("reset occurred");
 80012b8:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <bno08x_update+0x28>)
 80012ba:	f00c faaf 	bl	800d81c <iprintf>
		// Restart the flow of sensor reports
		reset_occurred = false;
 80012be:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <bno08x_update+0x24>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
		startReports();
 80012c4:	f7ff fe58 	bl	8000f78 <startReports>
	}

	sh2_service();
 80012c8:	f002 fecc 	bl	8004064 <sh2_service>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000204 	.word	0x20000204
 80012d4:	0800f77c 	.word	0x0800f77c

080012d8 <timeNowUs>:
#include <stdio.h>
#include <stdlib.h>
#include <sh2_err.h>
#include <memory.h>

static uint32_t timeNowUs(TIM_HandleTypeDef *tim) {
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(tim);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <delay_us>:

static void delay_us(TIM_HandleTypeDef *tim, uint32_t t) {
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
	uint32_t now = timeNowUs(tim);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ffeb 	bl	80012d8 <timeNowUs>
 8001302:	60f8      	str	r0, [r7, #12]
	uint32_t start = now;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	60bb      	str	r3, [r7, #8]
	while ((now - start) < t) {
 8001308:	e003      	b.n	8001312 <delay_us+0x20>
		now = timeNowUs(tim);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffe4 	bl	80012d8 <timeNowUs>
 8001310:	60f8      	str	r0, [r7, #12]
	while ((now - start) < t) {
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d8f5      	bhi.n	800130a <delay_us+0x18>
	}
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <wait_int_delay_us>:

static void wait_int_delay_us(TIM_HandleTypeDef *tim, uint32_t t,
bool *in_reset) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	uint32_t now = timeNowUs(tim);
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f7ff ffcf 	bl	80012d8 <timeNowUs>
 800133a:	6178      	str	r0, [r7, #20]
	uint32_t start = now;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
	while (((now - start) < t) && (in_reset)) {
 8001340:	e003      	b.n	800134a <wait_int_delay_us+0x22>
		now = timeNowUs(tim);
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff ffc8 	bl	80012d8 <timeNowUs>
 8001348:	6178      	str	r0, [r7, #20]
	while (((now - start) < t) && (in_reset)) {
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	429a      	cmp	r2, r3
 8001354:	d902      	bls.n	800135c <wait_int_delay_us+0x34>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f2      	bne.n	8001342 <wait_int_delay_us+0x1a>
	}
}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <shtp_i2c_hal_open>:

static int shtp_i2c_hal_open(sh2_Hal_t *self_) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	i2c_hal_t *self = (i2c_hal_t*) self_;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	617b      	str	r3, [r7, #20]
	i2c_handle_t *handle = self->i2c_handle;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	613b      	str	r3, [r7, #16]
	i2c_config_t *config = handle->config;
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]

	if (handle->is_open)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	791b      	ldrb	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <shtp_i2c_hal_open+0x26>
		return SH2_ERR;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001388:	e03e      	b.n	8001408 <shtp_i2c_hal_open+0xa4>

	handle->bus_state = BUS_INIT;
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	2200      	movs	r2, #0
 800138e:	719a      	strb	r2, [r3, #6]

	handle->is_open = true;
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	2201      	movs	r2, #1
 8001394:	711a      	strb	r2, [r3, #4]

	config->set_rst(false);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2000      	movs	r0, #0
 800139c:	4798      	blx	r3

	handle->in_reset = true;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2201      	movs	r2, #1
 80013a2:	715a      	strb	r2, [r3, #5]

	handle->bus_state = BUS_IDLE;
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2201      	movs	r2, #1
 80013a8:	719a      	strb	r2, [r3, #6]

	handle->rx_buf_len = 0;
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
	handle->hdr_buf_len = 0;
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
	handle->rx_data_ready = false;
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2498 	strb.w	r2, [r3, #1176]	@ 0x498

	config->set_boot(true);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	2001      	movs	r0, #1
 80013c8:	4798      	blx	r3

	delay_us(config->tim, RESET_DELAY_US);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f242 7110 	movw	r1, #10000	@ 0x2710
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff8d 	bl	80012f2 <delay_us>

	config->set_ints(true);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	2001      	movs	r0, #1
 80013de:	4798      	blx	r3

	config->set_rst(true);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2001      	movs	r0, #1
 80013e6:	4798      	blx	r3

	// reset_delay_us
	wait_int_delay_us(config->tim, START_DELAY_US, &(handle->in_reset));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	3305      	adds	r3, #5
 80013f0:	461a      	mov	r2, r3
 80013f2:	4907      	ldr	r1, [pc, #28]	@ (8001410 <shtp_i2c_hal_open+0xac>)
 80013f4:	f7ff ff98 	bl	8001328 <wait_int_delay_us>

	config->set_boot(true);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2001      	movs	r0, #1
 80013fe:	4798      	blx	r3

	printf("shtp opened\n");
 8001400:	4804      	ldr	r0, [pc, #16]	@ (8001414 <shtp_i2c_hal_open+0xb0>)
 8001402:	f00c fa73 	bl	800d8ec <puts>

	return SH2_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	003d0900 	.word	0x003d0900
 8001414:	0800f78c 	.word	0x0800f78c

08001418 <shtp_i2c_hal_close>:

static void shtp_i2c_hal_close(sh2_Hal_t *self_) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	i2c_hal_t *self = (i2c_hal_t*) self_;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	617b      	str	r3, [r7, #20]
	i2c_handle_t *handle = self->i2c_handle;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	613b      	str	r3, [r7, #16]
	i2c_config_t *config = handle->config;
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]

	handle->bus_state = BUS_INIT;
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	2200      	movs	r2, #0
 8001434:	719a      	strb	r2, [r3, #6]
	delay_us(config->tim, 1000); // Give any in-flight I2C operations a chance to finish.
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff57 	bl	80012f2 <delay_us>

	// Hold sensor hub in reset
	config->set_rst(false);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2000      	movs	r0, #0
 800144a:	4798      	blx	r3
	config->set_boot(true);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	2001      	movs	r0, #1
 8001452:	4798      	blx	r3

	// Deinit I2C peripheral
	HAL_I2C_DeInit(config->i2c);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4618      	mov	r0, r3
 800145a:	f005 fe3b 	bl	80070d4 <HAL_I2C_DeInit>

	// Disable interrupts
	config->set_ints(false);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	2000      	movs	r0, #0
 8001464:	4798      	blx	r3

	// Deinit timer
	__HAL_TIM_DISABLE(config->tim);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6a1a      	ldr	r2, [r3, #32]
 800146e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d112      	bne.n	800149e <shtp_i2c_hal_close+0x86>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a1a      	ldr	r2, [r3, #32]
 8001480:	f240 4344 	movw	r3, #1092	@ 0x444
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <shtp_i2c_hal_close+0x86>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0201 	bic.w	r2, r2, #1
 800149c:	601a      	str	r2, [r3, #0]

	handle->is_open = false;
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	2200      	movs	r2, #0
 80014a2:	711a      	strb	r2, [r3, #4]
}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <shtp_i2c_hal_read>:

static int shtp_i2c_hal_read(sh2_Hal_t *self_, uint8_t *pBuffer, unsigned len,
		uint32_t *t) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
	i2c_hal_t *self = (i2c_hal_t*) self_;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	623b      	str	r3, [r7, #32]
	i2c_handle_t *handle = self->i2c_handle;
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	61fb      	str	r3, [r7, #28]
	i2c_config_t *config = handle->config;
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	61bb      	str	r3, [r7, #24]

	int retval = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24

	config->set_ints(false);
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	2000      	movs	r0, #0
 80014d4:	4798      	blx	r3

	// read bus state just once for consistency.
	bus_state_t bus_state = handle->bus_state;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	799b      	ldrb	r3, [r3, #6]
 80014da:	75fb      	strb	r3, [r7, #23]

	if (handle->hdr_buf_len > 0) {
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d025      	beq.n	8001532 <shtp_i2c_hal_read+0x86>
		// There is data in handle->hdr_buf to return to SHTP layer
		if (len < handle->hdr_buf_len) {
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d207      	bcs.n	8001502 <shtp_i2c_hal_read+0x56>
			// Client buffer too small!
			// Discard what was read
			handle->hdr_buf_len = 0;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
			retval = SH2_ERR_BAD_PARAM;
 80014fa:	f06f 0301 	mvn.w	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001500:	e040      	b.n	8001584 <shtp_i2c_hal_read+0xd8>
		} else {
			// Copy data to the client buffer
			memcpy(pBuffer, handle->hdr_buf, handle->hdr_buf_len);
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f203 410c 	addw	r1, r3, #1036	@ 0x40c
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 800150e:	461a      	mov	r2, r3
 8001510:	68b8      	ldr	r0, [r7, #8]
 8001512:	f00c fa5e 	bl	800d9d2 <memcpy>
			retval = handle->hdr_buf_len;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
			handle->hdr_buf_len = 0;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
			*t = handle->int_last_timestamp_us;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f8d3 249c 	ldr.w	r2, [r3, #1180]	@ 0x49c
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e028      	b.n	8001584 <shtp_i2c_hal_read+0xd8>
		}
	} else if (handle->rx_buf_len > 0) {
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001538:	2b00      	cmp	r3, #0
 800153a:	d023      	beq.n	8001584 <shtp_i2c_hal_read+0xd8>
		// There is data in handle->rx_buf to return to SHTP layer
		if (len < handle->rx_buf_len) {
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <shtp_i2c_hal_read+0xac>
			// Client buffer too small!
			// Discard what was read
			handle->rx_buf_len = 0;
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	2200      	movs	r2, #0
 800154c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
			retval = SH2_ERR_BAD_PARAM;
 8001550:	f06f 0301 	mvn.w	r3, #1
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
 8001556:	e015      	b.n	8001584 <shtp_i2c_hal_read+0xd8>
		} else {
			// Copy data to the client buffer
			memcpy(pBuffer, handle->rx_buf, handle->rx_buf_len);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	1dd9      	adds	r1, r3, #7
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001562:	461a      	mov	r2, r3
 8001564:	68b8      	ldr	r0, [r7, #8]
 8001566:	f00c fa34 	bl	800d9d2 <memcpy>
			retval = handle->rx_buf_len;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
			handle->rx_buf_len = 0;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	2200      	movs	r2, #0
 8001576:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
			*t = handle->int_last_timestamp_us;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f8d3 249c 	ldr.w	r2, [r3, #1180]	@ 0x49c
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	601a      	str	r2, [r3, #0]
		}
	}
	config->set_ints(true);
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	2001      	movs	r0, #1
 800158a:	4798      	blx	r3

	// if sensor hub asserted INTN, data is ready
	if (handle->rx_data_ready) {
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f893 3498 	ldrb.w	r3, [r3, #1176]	@ 0x498
 8001592:	2b00      	cmp	r3, #0
 8001594:	d050      	beq.n	8001638 <shtp_i2c_hal_read+0x18c>
		if ((bus_state == BUS_IDLE) && (handle->hdr_buf_len == 0)) {
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d11b      	bne.n	80015d4 <shtp_i2c_hal_read+0x128>
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d116      	bne.n	80015d4 <shtp_i2c_hal_read+0x128>
			handle->read_retries = 0;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f8a3 24a0 	strh.w	r2, [r3, #1184]	@ 0x4a0
			handle->rx_data_ready = false;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2498 	strb.w	r2, [r3, #1176]	@ 0x498
			handle->bus_state = BUS_READING_LEN;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	2202      	movs	r2, #2
 80015ba:	719a      	strb	r2, [r3, #6]
			HAL_I2C_Master_Receive_IT(config->i2c, config->i2c_addr,
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	6858      	ldr	r0, [r3, #4]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	7a1b      	ldrb	r3, [r3, #8]
 80015c4:	4619      	mov	r1, r3
					handle->hdr_buf, HDR_READ_LEN);
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f203 420c 	addw	r2, r3, #1036	@ 0x40c
			HAL_I2C_Master_Receive_IT(config->i2c, config->i2c_addr,
 80015cc:	2304      	movs	r3, #4
 80015ce:	f005 fe67 	bl	80072a0 <HAL_I2C_Master_Receive_IT>
 80015d2:	e031      	b.n	8001638 <shtp_i2c_hal_read+0x18c>
		} else if ((bus_state == BUS_GOT_LEN) && (handle->rx_buf_len == 0)) {
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d12e      	bne.n	8001638 <shtp_i2c_hal_read+0x18c>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d129      	bne.n	8001638 <shtp_i2c_hal_read+0x18c>
			// Copy the header from handle->rx_buf to pBuffer.  retval = READ_LEN
			memcpy(pBuffer, handle->hdr_buf, HDR_READ_LEN);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	601a      	str	r2, [r3, #0]
			retval = HDR_READ_LEN;
 80015f2:	2304      	movs	r3, #4
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
			handle->hdr_buf_len = 0;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
			*t = handle->int_last_timestamp_us;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f8d3 249c 	ldr.w	r2, [r3, #1180]	@ 0x49c
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	601a      	str	r2, [r3, #0]

			handle->read_retries = 0;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	2200      	movs	r2, #0
 800160c:	f8a3 24a0 	strh.w	r2, [r3, #1184]	@ 0x4a0
			handle->rx_data_ready = false;
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2498 	strb.w	r2, [r3, #1176]	@ 0x498
			handle->bus_state = BUS_READING_TRANSFER;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2204      	movs	r2, #4
 800161c:	719a      	strb	r2, [r3, #6]
			HAL_I2C_Master_Receive_IT(config->i2c, config->i2c_addr,
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	6858      	ldr	r0, [r3, #4]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	7a1b      	ldrb	r3, [r3, #8]
 8001626:	4619      	mov	r1, r3
					handle->rx_buf, handle->payload_len);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	1dda      	adds	r2, r3, #7
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
			HAL_I2C_Master_Receive_IT(config->i2c, config->i2c_addr,
 8001632:	b29b      	uxth	r3, r3
 8001634:	f005 fe34 	bl	80072a0 <HAL_I2C_Master_Receive_IT>
		}
	}

	return retval;
 8001638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800163a:	4618      	mov	r0, r3
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <shtp_i2c_hal_write>:

static int shtp_i2c_hal_write(sh2_Hal_t *self_, uint8_t *pBuffer, unsigned len) {
 8001642:	b580      	push	{r7, lr}
 8001644:	b088      	sub	sp, #32
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
	i2c_hal_t *self = (i2c_hal_t*) self_;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	61bb      	str	r3, [r7, #24]
	i2c_handle_t *handle = self->i2c_handle;
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	617b      	str	r3, [r7, #20]
	i2c_config_t *config = handle->config;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	613b      	str	r3, [r7, #16]

	int retval = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]

	// Validate parameters
	if ((pBuffer == 0) || (len == 0) || (len > sizeof(handle->tx_buf))) {
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <shtp_i2c_hal_write+0x32>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <shtp_i2c_hal_write+0x32>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b80      	cmp	r3, #128	@ 0x80
 8001672:	d902      	bls.n	800167a <shtp_i2c_hal_write+0x38>
		return SH2_ERR_BAD_PARAM;
 8001674:	f06f 0301 	mvn.w	r3, #1
 8001678:	e035      	b.n	80016e6 <shtp_i2c_hal_write+0xa4>
	}

	// Disable I2C Interrupt for a moment so busState can't change
	config->set_i2c_ints(false);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2000      	movs	r0, #0
 8001680:	4798      	blx	r3

	if (handle->bus_state == BUS_IDLE) {
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	799b      	ldrb	r3, [r3, #6]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d128      	bne.n	80016dc <shtp_i2c_hal_write+0x9a>
		handle->bus_state = BUS_WRITING;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2205      	movs	r2, #5
 800168e:	719a      	strb	r2, [r3, #6]

		// Set up write operation
		handle->read_retries = 0;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2200      	movs	r2, #0
 8001694:	f8a3 24a0 	strh.w	r2, [r3, #1184]	@ 0x4a0
		handle->tx_buf_len = len;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494
		memcpy(handle->tx_buf, pBuffer, len);
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f00c f991 	bl	800d9d2 <memcpy>
		delay_us(config->tim, I2C_WRITE_DELAY_US);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	210a      	movs	r1, #10
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fe1b 	bl	80012f2 <delay_us>
		HAL_I2C_Master_Transmit_IT(config->i2c, config->i2c_addr,
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	6858      	ldr	r0, [r3, #4]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	7a1b      	ldrb	r3, [r3, #8]
 80016c4:	4619      	mov	r1, r3
				handle->tx_buf, handle->tx_buf_len);
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f203 4214 	addw	r2, r3, #1044	@ 0x414
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
		HAL_I2C_Master_Transmit_IT(config->i2c, config->i2c_addr,
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	f005 fd42 	bl	800715c <HAL_I2C_Master_Transmit_IT>

		retval = len;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	61fb      	str	r3, [r7, #28]
	}

	// re-enable interrupts
	config->set_i2c_ints(true);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	2001      	movs	r0, #1
 80016e2:	4798      	blx	r3

	return retval;
 80016e4:	69fb      	ldr	r3, [r7, #28]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <shtp_i2c_getTimeUs>:

static uint32_t shtp_i2c_getTimeUs(sh2_Hal_t *self_) {
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
	i2c_hal_t *self = (i2c_hal_t*) self_;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

	return timeNowUs(self->i2c_handle->config->tim);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fde8 	bl	80012d8 <timeNowUs>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <shtp_i2c_hal_init>:

i2c_hal_t* shtp_i2c_hal_init(i2c_config_t *config) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	i2c_hal_t *i2c_hal = (i2c_hal_t*) malloc(sizeof(i2c_hal_t));
 800171c:	2018      	movs	r0, #24
 800171e:	f00b fc51 	bl	800cfc4 <malloc>
 8001722:	4603      	mov	r3, r0
 8001724:	60fb      	str	r3, [r7, #12]
	if (i2c_hal == NULL) {
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <shtp_i2c_hal_init+0x1c>
		return NULL;
 800172c:	2300      	movs	r3, #0
 800172e:	e02c      	b.n	800178a <shtp_i2c_hal_init+0x76>
	}

	i2c_handle_t *i2c_handle = (i2c_handle_t*) malloc(sizeof(i2c_handle_t));
 8001730:	f44f 6095 	mov.w	r0, #1192	@ 0x4a8
 8001734:	f00b fc46 	bl	800cfc4 <malloc>
 8001738:	4603      	mov	r3, r0
 800173a:	60bb      	str	r3, [r7, #8]
	if (i2c_handle == NULL) {
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d104      	bne.n	800174c <shtp_i2c_hal_init+0x38>
		free(i2c_hal);
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f00b fc46 	bl	800cfd4 <free>
		return NULL;
 8001748:	2300      	movs	r3, #0
 800174a:	e01e      	b.n	800178a <shtp_i2c_hal_init+0x76>
//
//	for (size_t i = 0; i < sizeof(i2c_handle_t); i++) {
//		((uint8_t *)i2c_handle)[i] = 0;
//	}

	i2c_handle->config = config;
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
	i2c_handle->is_open = false;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2200      	movs	r2, #0
 8001756:	711a      	strb	r2, [r3, #4]
	i2c_handle->in_reset = false;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2200      	movs	r2, #0
 800175c:	715a      	strb	r2, [r3, #5]
	i2c_handle->bus_state = BUS_INIT;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2200      	movs	r2, #0
 8001762:	719a      	strb	r2, [r3, #6]

	i2c_hal->i2c_handle = i2c_handle;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	615a      	str	r2, [r3, #20]
	i2c_hal->sh2_hal.open = shtp_i2c_hal_open;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <shtp_i2c_hal_init+0x80>)
 800176e:	601a      	str	r2, [r3, #0]
	i2c_hal->sh2_hal.close = shtp_i2c_hal_close;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4a09      	ldr	r2, [pc, #36]	@ (8001798 <shtp_i2c_hal_init+0x84>)
 8001774:	605a      	str	r2, [r3, #4]
	i2c_hal->sh2_hal.read = shtp_i2c_hal_read;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4a08      	ldr	r2, [pc, #32]	@ (800179c <shtp_i2c_hal_init+0x88>)
 800177a:	609a      	str	r2, [r3, #8]
	i2c_hal->sh2_hal.write = shtp_i2c_hal_write;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <shtp_i2c_hal_init+0x8c>)
 8001780:	60da      	str	r2, [r3, #12]
	i2c_hal->sh2_hal.getTimeUs = shtp_i2c_getTimeUs;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4a07      	ldr	r2, [pc, #28]	@ (80017a4 <shtp_i2c_hal_init+0x90>)
 8001786:	611a      	str	r2, [r3, #16]

	return i2c_hal;
 8001788:	68fb      	ldr	r3, [r7, #12]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	08001365 	.word	0x08001365
 8001798:	08001419 	.word	0x08001419
 800179c:	080014ad 	.word	0x080014ad
 80017a0:	08001643 	.word	0x08001643
 80017a4:	080016ef 	.word	0x080016ef

080017a8 <IMPL_HAL_GPIO_EXTI_Callback>:

void IMPL_HAL_GPIO_EXTI_Callback(uint16_t n, i2c_hal_t *i2c_hal) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	80fb      	strh	r3, [r7, #6]
	i2c_handle_t *handle = i2c_hal->i2c_handle;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	617b      	str	r3, [r7, #20]
	i2c_config_t *config = handle->config;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	613b      	str	r3, [r7, #16]

	// read bus state just once for consistency.
	bus_state_t busState = handle->bus_state;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	799b      	ldrb	r3, [r3, #6]
 80017c4:	73fb      	strb	r3, [r7, #15]

	if (busState == BUS_INIT) {
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d04d      	beq.n	8001868 <IMPL_HAL_GPIO_EXTI_Callback+0xc0>
		// No active hal, ignore this call, don't crash.
		return;
	}

	handle->in_reset = false;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2200      	movs	r2, #0
 80017d0:	715a      	strb	r2, [r3, #5]

	// Start read, if possible
	if ((busState == BUS_IDLE) && (handle->hdr_buf_len == 0)
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d125      	bne.n	8001824 <IMPL_HAL_GPIO_EXTI_Callback+0x7c>
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d120      	bne.n	8001824 <IMPL_HAL_GPIO_EXTI_Callback+0x7c>
			&& (handle->rx_buf_len == 0)) {
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d11b      	bne.n	8001824 <IMPL_HAL_GPIO_EXTI_Callback+0x7c>
		handle->int_last_timestamp_us = timeNowUs(config->tim);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fd71 	bl	80012d8 <timeNowUs>
 80017f6:	4602      	mov	r2, r0
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c

		// Read header to get payload length
		handle->read_retries = 0;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2200      	movs	r2, #0
 8001802:	f8a3 24a0 	strh.w	r2, [r3, #1184]	@ 0x4a0
		handle->bus_state = BUS_READING_LEN;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2202      	movs	r2, #2
 800180a:	719a      	strb	r2, [r3, #6]
		HAL_I2C_Master_Receive_IT(config->i2c, config->i2c_addr,
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	6858      	ldr	r0, [r3, #4]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	7a1b      	ldrb	r3, [r3, #8]
 8001814:	4619      	mov	r1, r3
				handle->hdr_buf, HDR_READ_LEN);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f203 420c 	addw	r2, r3, #1036	@ 0x40c
		HAL_I2C_Master_Receive_IT(config->i2c, config->i2c_addr,
 800181c:	2304      	movs	r3, #4
 800181e:	f005 fd3f 	bl	80072a0 <HAL_I2C_Master_Receive_IT>
 8001822:	e022      	b.n	800186a <IMPL_HAL_GPIO_EXTI_Callback+0xc2>
	} else if ((busState == BUS_GOT_LEN) && (handle->rx_buf_len == 0)) {
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d119      	bne.n	800185e <IMPL_HAL_GPIO_EXTI_Callback+0xb6>
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001830:	2b00      	cmp	r3, #0
 8001832:	d114      	bne.n	800185e <IMPL_HAL_GPIO_EXTI_Callback+0xb6>
		// Read payload
		handle->read_retries = 0;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2200      	movs	r2, #0
 8001838:	f8a3 24a0 	strh.w	r2, [r3, #1184]	@ 0x4a0
		handle->bus_state = BUS_READING_TRANSFER;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2204      	movs	r2, #4
 8001840:	719a      	strb	r2, [r3, #6]
		HAL_I2C_Master_Receive_IT(config->i2c, config->i2c_addr, handle->rx_buf,
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	6858      	ldr	r0, [r3, #4]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	7a1b      	ldrb	r3, [r3, #8]
 800184a:	4619      	mov	r1, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	1dda      	adds	r2, r3, #7
				handle->payload_len);
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
		HAL_I2C_Master_Receive_IT(config->i2c, config->i2c_addr, handle->rx_buf,
 8001856:	b29b      	uxth	r3, r3
 8001858:	f005 fd22 	bl	80072a0 <HAL_I2C_Master_Receive_IT>
 800185c:	e005      	b.n	800186a <IMPL_HAL_GPIO_EXTI_Callback+0xc2>
	} else {
		// We can't start read immediately, set flag so it gets done later.
		handle->rx_data_ready = true;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2498 	strb.w	r2, [r3, #1176]	@ 0x498
 8001866:	e000      	b.n	800186a <IMPL_HAL_GPIO_EXTI_Callback+0xc2>
		return;
 8001868:	bf00      	nop
	}
}
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <IMPL_HAL_I2C_MasterRxCpltCallback>:

void IMPL_HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *pI2c,
		i2c_hal_t *i2c_hal) {
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	i2c_handle_t *handle = i2c_hal->i2c_handle;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	60fb      	str	r3, [r7, #12]

	// read bus state just once for consistency.
	bus_state_t busState = handle->bus_state;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	799b      	ldrb	r3, [r3, #6]
 8001884:	72fb      	strb	r3, [r7, #11]

	// Read completed
	if (busState == BUS_READING_LEN) {
 8001886:	7afb      	ldrb	r3, [r7, #11]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d123      	bne.n	80018d4 <IMPL_HAL_I2C_MasterRxCpltCallback+0x64>
		// Len of payload is available, decide how long to do next read
		uint16_t len = (handle->hdr_buf[0] + (handle->hdr_buf[1] << 8))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	b29b      	uxth	r3, r3
 800189e:	4413      	add	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018a6:	813b      	strh	r3, [r7, #8]
				& ~0x8000;
		if (len > sizeof(handle->rx_buf)) {
 80018a8:	893b      	ldrh	r3, [r7, #8]
 80018aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ae:	d905      	bls.n	80018bc <IMPL_HAL_I2C_MasterRxCpltCallback+0x4c>
			// read only what will fit in handle->rx_buf
			handle->payload_len = sizeof(handle->rx_buf);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018b6:	f8c3 24a4 	str.w	r2, [r3, #1188]	@ 0x4a4
 80018ba:	e003      	b.n	80018c4 <IMPL_HAL_I2C_MasterRxCpltCallback+0x54>
		} else {
			handle->payload_len = len;
 80018bc:	893a      	ldrh	r2, [r7, #8]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f8c3 24a4 	str.w	r2, [r3, #1188]	@ 0x4a4
		}

		handle->hdr_buf_len = HDR_READ_LEN;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2204      	movs	r2, #4
 80018c8:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
		handle->bus_state = BUS_GOT_LEN;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2203      	movs	r2, #3
 80018d0:	719a      	strb	r2, [r3, #6]
		// Transition back to idle state
		handle->hdr_buf_len = 0;
		handle->rx_buf_len = handle->payload_len;
		handle->bus_state = BUS_IDLE;
	}
}
 80018d2:	e01c      	b.n	800190e <IMPL_HAL_I2C_MasterRxCpltCallback+0x9e>
	} else if (busState == BUS_READING_TRANSFER) {
 80018d4:	7afb      	ldrb	r3, [r7, #11]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d109      	bne.n	80018ee <IMPL_HAL_I2C_MasterRxCpltCallback+0x7e>
		handle->rx_buf_len = handle->payload_len;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	@ 0x4a4
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
		handle->bus_state = BUS_IDLE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2201      	movs	r2, #1
 80018ea:	719a      	strb	r2, [r3, #6]
}
 80018ec:	e00f      	b.n	800190e <IMPL_HAL_I2C_MasterRxCpltCallback+0x9e>
	} else if (busState == BUS_READING_DFU) {
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	2b06      	cmp	r3, #6
 80018f2:	d10c      	bne.n	800190e <IMPL_HAL_I2C_MasterRxCpltCallback+0x9e>
		handle->hdr_buf_len = 0;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
		handle->rx_buf_len = handle->payload_len;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	@ 0x4a4
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
		handle->bus_state = BUS_IDLE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2201      	movs	r2, #1
 800190c:	719a      	strb	r2, [r3, #6]
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <IMPL_HAL_I2C_MasterTxCpltCallback>:

void IMPL_HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *i2c,
		i2c_hal_t *i2c_hal) {
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
	i2c_handle_t *handle = i2c_hal->i2c_handle;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	60fb      	str	r3, [r7, #12]

	// read bus state just once for consistency.
	bus_state_t busState = handle->bus_state;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	799b      	ldrb	r3, [r3, #6]
 800192e:	72fb      	strb	r3, [r7, #11]

	if (busState == BUS_WRITING) {
 8001930:	7afb      	ldrb	r3, [r7, #11]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d103      	bne.n	800193e <IMPL_HAL_I2C_MasterTxCpltCallback+0x24>
		// Switch back to bus idle
		handle->bus_state = BUS_IDLE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	719a      	strb	r2, [r3, #6]
	} else if (busState == BUS_WRITING_DFU) {
		// Switch back to bus idle
		handle->bus_state = BUS_IDLE;
	}
}
 800193c:	e005      	b.n	800194a <IMPL_HAL_I2C_MasterTxCpltCallback+0x30>
	} else if (busState == BUS_WRITING_DFU) {
 800193e:	7afb      	ldrb	r3, [r7, #11]
 8001940:	2b07      	cmp	r3, #7
 8001942:	d102      	bne.n	800194a <IMPL_HAL_I2C_MasterTxCpltCallback+0x30>
		handle->bus_state = BUS_IDLE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2201      	movs	r2, #1
 8001948:	719a      	strb	r2, [r3, #6]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <IMPL_HAL_I2C_ErrorCallback>:

void IMPL_HAL_I2C_ErrorCallback(I2C_HandleTypeDef *i2c, i2c_hal_t *i2c_hal) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
	printf("I2CError\n");
 8001962:	483b      	ldr	r0, [pc, #236]	@ (8001a50 <IMPL_HAL_I2C_ErrorCallback+0xf8>)
 8001964:	f00b ffc2 	bl	800d8ec <puts>
	i2c_handle_t *handle = i2c_hal->i2c_handle;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	613b      	str	r3, [r7, #16]
	i2c_config_t *config = handle->config;
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60fb      	str	r3, [r7, #12]

	// Assume we will abort this operation.
	// (Gets reset if we determine we will retry.)
	bool abort = true;
 8001974:	2301      	movs	r3, #1
 8001976:	75fb      	strb	r3, [r7, #23]

	if (handle->read_retries < MAX_RETRIES) {
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f8b3 34a0 	ldrh.w	r3, [r3, #1184]	@ 0x4a0
 800197e:	2b04      	cmp	r3, #4
 8001980:	d84f      	bhi.n	8001a22 <IMPL_HAL_I2C_ErrorCallback+0xca>
		// Re-issue the I2C operation
		handle->read_retries++;
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f8b3 34a0 	ldrh.w	r3, [r3, #1184]	@ 0x4a0
 8001988:	3301      	adds	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	f8a3 24a0 	strh.w	r2, [r3, #1184]	@ 0x4a0

		switch (handle->bus_state) {
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	799b      	ldrb	r3, [r3, #6]
 8001996:	3b02      	subs	r3, #2
 8001998:	2b05      	cmp	r3, #5
 800199a:	d841      	bhi.n	8001a20 <IMPL_HAL_I2C_ErrorCallback+0xc8>
 800199c:	a201      	add	r2, pc, #4	@ (adr r2, 80019a4 <IMPL_HAL_I2C_ErrorCallback+0x4c>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019e9 	.word	0x080019e9
 80019a8:	08001a21 	.word	0x08001a21
 80019ac:	08001a03 	.word	0x08001a03
 80019b0:	080019bd 	.word	0x080019bd
 80019b4:	08001a03 	.word	0x08001a03
 80019b8:	080019bd 	.word	0x080019bd
		case BUS_WRITING:
		case BUS_WRITING_DFU:
			// Set up write operation
			delay_us(config->tim, I2C_WRITE_DELAY_US);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	210a      	movs	r1, #10
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fc95 	bl	80012f2 <delay_us>
			HAL_I2C_Master_Transmit_IT(i2c, config->i2c_addr, handle->tx_buf,
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	7a1b      	ldrb	r3, [r3, #8]
 80019cc:	4619      	mov	r1, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f203 4214 	addw	r2, r3, #1044	@ 0x414
					handle->tx_buf_len);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
			HAL_I2C_Master_Transmit_IT(i2c, config->i2c_addr, handle->tx_buf,
 80019da:	b29b      	uxth	r3, r3
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f005 fbbd 	bl	800715c <HAL_I2C_Master_Transmit_IT>
			abort = false;
 80019e2:	2300      	movs	r3, #0
 80019e4:	75fb      	strb	r3, [r7, #23]
			break;
 80019e6:	e01c      	b.n	8001a22 <IMPL_HAL_I2C_ErrorCallback+0xca>
		case BUS_READING_LEN:
			// Restart Read operation for header
			HAL_I2C_Master_Receive_IT(i2c, config->i2c_addr, handle->hdr_buf,
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	7a1b      	ldrb	r3, [r3, #8]
 80019ec:	4619      	mov	r1, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	f203 420c 	addw	r2, r3, #1036	@ 0x40c
 80019f4:	2304      	movs	r3, #4
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f005 fc52 	bl	80072a0 <HAL_I2C_Master_Receive_IT>
			HDR_READ_LEN);
			abort = false;
 80019fc:	2300      	movs	r3, #0
 80019fe:	75fb      	strb	r3, [r7, #23]
			break;
 8001a00:	e00f      	b.n	8001a22 <IMPL_HAL_I2C_ErrorCallback+0xca>
		case BUS_READING_TRANSFER:
		case BUS_READING_DFU:
			// Restart read operation for transfer
			HAL_I2C_Master_Receive_IT(i2c, config->i2c_addr, handle->rx_buf,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	7a1b      	ldrb	r3, [r3, #8]
 8001a06:	4619      	mov	r1, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1dda      	adds	r2, r3, #7
					handle->payload_len);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
			HAL_I2C_Master_Receive_IT(i2c, config->i2c_addr, handle->rx_buf,
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f005 fc43 	bl	80072a0 <HAL_I2C_Master_Receive_IT>
			abort = false;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	75fb      	strb	r3, [r7, #23]
			break;
 8001a1e:	e000      	b.n	8001a22 <IMPL_HAL_I2C_ErrorCallback+0xca>
		default:
			// No operation in progress from other states.
			break;
 8001a20:	bf00      	nop
		}
	}

	// If we didn't retry above, we should abort now.
	if (abort) {
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00e      	beq.n	8001a46 <IMPL_HAL_I2C_ErrorCallback+0xee>
		handle->hdr_buf_len = 0;
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
		handle->rx_buf_len = 0;
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
		handle->tx_buf_len = 0;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494
		handle->bus_state = BUS_IDLE;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2201      	movs	r2, #1
 8001a44:	719a      	strb	r2, [r3, #6]
	}
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	0800f798 	.word	0x0800f798

08001a54 <init_gpio>:

i2c_hal_t* i2c_hal;
i2c_config_t i2c_config;

static void init_gpio(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b14 <init_gpio+0xc0>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a2c      	ldr	r2, [pc, #176]	@ (8001b14 <init_gpio+0xc0>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b14 <init_gpio+0xc0>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <init_gpio+0xc0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a25      	ldr	r2, [pc, #148]	@ (8001b14 <init_gpio+0xc0>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b23      	ldr	r3, [pc, #140]	@ (8001b14 <init_gpio+0xc0>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

    /* Configure RSTN*/
    HAL_GPIO_WritePin(RSTN_PORT, RSTN_PIN, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a98:	481f      	ldr	r0, [pc, #124]	@ (8001b18 <init_gpio+0xc4>)
 8001a9a:	f005 f9a5 	bl	8006de8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = RSTN_PIN;
 8001a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RSTN_PORT, &GPIO_InitStruct);
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4818      	ldr	r0, [pc, #96]	@ (8001b18 <init_gpio+0xc4>)
 8001ab8:	f004 ff0e 	bl	80068d8 <HAL_GPIO_Init>

    /* Configure BOOTN */
    HAL_GPIO_WritePin(BOOTN_PORT, BOOTN_PIN, GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ac2:	4815      	ldr	r0, [pc, #84]	@ (8001b18 <init_gpio+0xc4>)
 8001ac4:	f005 f990 	bl	8006de8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = BOOTN_PIN;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001acc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BOOTN_PORT, &GPIO_InitStruct);
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <init_gpio+0xc4>)
 8001ae2:	f004 fef9 	bl	80068d8 <HAL_GPIO_Init>

    /*Configure GPIO pin : INTN */
    GPIO_InitStruct.Pin = INTN_PIN;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(INTN_PORT, &GPIO_InitStruct);
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	4808      	ldr	r0, [pc, #32]	@ (8001b1c <init_gpio+0xc8>)
 8001afc:	f004 feec 	bl	80068d8 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2105      	movs	r1, #5
 8001b04:	2006      	movs	r0, #6
 8001b06:	f004 fe72 	bl	80067ee <HAL_NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	40020000 	.word	0x40020000

08001b20 <init_i2c>:

static void init_i2c(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Configure GPIO Pins for use with I2C
    // PB8 : I2C1_SCL
    // PB9 : I2C1_SDA
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001b26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b2a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b2c:	2312      	movs	r3, #18
 8001b2e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4821      	ldr	r0, [pc, #132]	@ (8001bc8 <init_i2c+0xa8>)
 8001b42:	f004 fec9 	bl	80068d8 <HAL_GPIO_Init>

    // Peripheral clock enable
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <init_i2c+0xac>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bcc <init_i2c+0xac>)
 8001b50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <init_i2c+0xac>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]

    hi2c1.Instance = I2C1;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <init_i2c+0xb0>)
 8001b64:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd4 <init_i2c+0xb4>)
 8001b66:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <init_i2c+0xb0>)
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd8 <init_i2c+0xb8>)
 8001b6c:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b6e:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <init_i2c+0xb0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001b74:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <init_i2c+0xb0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <init_i2c+0xb0>)
 8001b7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b80:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001b82:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <init_i2c+0xb0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001b88:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <init_i2c+0xb0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <init_i2c+0xb0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <init_i2c+0xb0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b9a:	480d      	ldr	r0, [pc, #52]	@ (8001bd0 <init_i2c+0xb0>)
 8001b9c:	f005 f956 	bl	8006e4c <HAL_I2C_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <init_i2c+0x8c>
    {
    	printf("HAL_I2C_Init Error\n");
 8001ba6:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <init_i2c+0xbc>)
 8001ba8:	f00b fea0 	bl	800d8ec <puts>
    }

    // Set Priority for I2C IRQ and enable
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2105      	movs	r1, #5
 8001bb0:	201f      	movs	r0, #31
 8001bb2:	f004 fe1c 	bl	80067ee <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2105      	movs	r1, #5
 8001bba:	2020      	movs	r0, #32
 8001bbc:	f004 fe17 	bl	80067ee <HAL_NVIC_SetPriority>
}
 8001bc0:	bf00      	nop
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	2000032c 	.word	0x2000032c
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	00061a80 	.word	0x00061a80
 8001bdc:	0800f7a4 	.word	0x0800f7a4

08001be0 <init_timer>:

static void init_timer(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <init_timer+0x68>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	4a16      	ldr	r2, [pc, #88]	@ (8001c48 <init_timer+0x68>)
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf6:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <init_timer+0x68>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]

    // Prescale to get 1 count per uS
    uint32_t prescaler = (uint32_t)((HAL_RCC_GetPCLK2Freq() / 1000000) - 1);
 8001c02:	f007 f9b3 	bl	8008f6c <HAL_RCC_GetPCLK2Freq>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a10      	ldr	r2, [pc, #64]	@ (8001c4c <init_timer+0x6c>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	0c9b      	lsrs	r3, r3, #18
 8001c10:	3b01      	subs	r3, #1
 8001c12:	607b      	str	r3, [r7, #4]

    htim5.Instance = TIM5;
 8001c14:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <init_timer+0x70>)
 8001c16:	4a0f      	ldr	r2, [pc, #60]	@ (8001c54 <init_timer+0x74>)
 8001c18:	601a      	str	r2, [r3, #0]
    htim5.Init.Period = 0xFFFFFFFF;
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <init_timer+0x70>)
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c20:	60da      	str	r2, [r3, #12]
    htim5.Init.Prescaler = prescaler;
 8001c22:	4a0b      	ldr	r2, [pc, #44]	@ (8001c50 <init_timer+0x70>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6053      	str	r3, [r2, #4]
    htim5.Init.ClockDivision = 0;
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <init_timer+0x70>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <init_timer+0x70>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]

    HAL_TIM_Base_Init(&htim5);
 8001c34:	4806      	ldr	r0, [pc, #24]	@ (8001c50 <init_timer+0x70>)
 8001c36:	f007 fe7b 	bl	8009930 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&htim5);
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <init_timer+0x70>)
 8001c3c:	f007 fed2 	bl	80099e4 <HAL_TIM_Base_Start>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	431bde83 	.word	0x431bde83
 8001c50:	20000410 	.word	0x20000410
 8001c54:	40000c00 	.word	0x40000c00

08001c58 <init_hw>:

static void init_hw(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	init_timer();
 8001c5c:	f7ff ffc0 	bl	8001be0 <init_timer>
    init_gpio();
 8001c60:	f7ff fef8 	bl	8001a54 <init_gpio>
    init_i2c();
 8001c64:	f7ff ff5c 	bl	8001b20 <init_i2c>
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <set_rst>:

static void set_rst(bool state)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RSTN_PORT, RSTN_PIN,
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c7e:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <set_rst+0x20>)
 8001c80:	f005 f8b2 	bl	8006de8 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020400 	.word	0x40020400

08001c90 <set_boot>:

static void set_boot(bool state)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(BOOTN_PORT, BOOTN_PIN,
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ca2:	4803      	ldr	r0, [pc, #12]	@ (8001cb0 <set_boot+0x20>)
 8001ca4:	f005 f8a0 	bl	8006de8 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <set_ints>:

static void set_ints(bool state)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
    if (state)
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d009      	beq.n	8001cd8 <set_ints+0x24>
    {
        // Enable INTN interrupt
        HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f004 fdae 	bl	8006826 <HAL_NVIC_EnableIRQ>

        // Enable I2C interrupts
        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cca:	201f      	movs	r0, #31
 8001ccc:	f004 fdab 	bl	8006826 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cd0:	2020      	movs	r0, #32
 8001cd2:	f004 fda8 	bl	8006826 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);

        // Disable INTN interrupt line
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);
    }
}
 8001cd6:	e008      	b.n	8001cea <set_ints+0x36>
        HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001cd8:	2020      	movs	r0, #32
 8001cda:	f004 fdb2 	bl	8006842 <HAL_NVIC_DisableIRQ>
        HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001cde:	201f      	movs	r0, #31
 8001ce0:	f004 fdaf 	bl	8006842 <HAL_NVIC_DisableIRQ>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001ce4:	2006      	movs	r0, #6
 8001ce6:	f004 fdac 	bl	8006842 <HAL_NVIC_DisableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <set_i2c_ints>:

static void set_i2c_ints(bool state)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
    if (state)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <set_i2c_ints+0x1e>
    {
        // Enable I2C interrupts
        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d02:	201f      	movs	r0, #31
 8001d04:	f004 fd8f 	bl	8006826 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d08:	2020      	movs	r0, #32
 8001d0a:	f004 fd8c 	bl	8006826 <HAL_NVIC_EnableIRQ>
    {
        // Disable I2C interrupts
        HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
        HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    }
}
 8001d0e:	e005      	b.n	8001d1c <set_i2c_ints+0x2a>
        HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001d10:	2020      	movs	r0, #32
 8001d12:	f004 fd96 	bl	8006842 <HAL_NVIC_DisableIRQ>
        HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001d16:	201f      	movs	r0, #31
 8001d18:	f004 fd93 	bl	8006842 <HAL_NVIC_DisableIRQ>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <bno08x_init_i2c>:

i2c_hal_t *bno08x_init_i2c(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
    init_hw();
 8001d28:	f7ff ff96 	bl	8001c58 <init_hw>

    i2c_config.tim = &htim5;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <bno08x_init_i2c+0x48>)
 8001d2e:	4a10      	ldr	r2, [pc, #64]	@ (8001d70 <bno08x_init_i2c+0x4c>)
 8001d30:	601a      	str	r2, [r3, #0]
    i2c_config.i2c = &hi2c1;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <bno08x_init_i2c+0x48>)
 8001d34:	4a0f      	ldr	r2, [pc, #60]	@ (8001d74 <bno08x_init_i2c+0x50>)
 8001d36:	605a      	str	r2, [r3, #4]
    i2c_config.i2c_addr = BNO08X_I2C_ADDR2 << 1;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <bno08x_init_i2c+0x48>)
 8001d3a:	2296      	movs	r2, #150	@ 0x96
 8001d3c:	721a      	strb	r2, [r3, #8]
    i2c_config.set_boot = set_boot;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <bno08x_init_i2c+0x48>)
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <bno08x_init_i2c+0x54>)
 8001d42:	611a      	str	r2, [r3, #16]
    i2c_config.set_rst = set_rst;
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <bno08x_init_i2c+0x48>)
 8001d46:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <bno08x_init_i2c+0x58>)
 8001d48:	60da      	str	r2, [r3, #12]
    i2c_config.set_ints = set_ints;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <bno08x_init_i2c+0x48>)
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <bno08x_init_i2c+0x5c>)
 8001d4e:	615a      	str	r2, [r3, #20]
    i2c_config.set_i2c_ints = &set_i2c_ints;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <bno08x_init_i2c+0x48>)
 8001d52:	4a0c      	ldr	r2, [pc, #48]	@ (8001d84 <bno08x_init_i2c+0x60>)
 8001d54:	619a      	str	r2, [r3, #24]

    i2c_hal = shtp_i2c_hal_init(&i2c_config);
 8001d56:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <bno08x_init_i2c+0x48>)
 8001d58:	f7ff fcdc 	bl	8001714 <shtp_i2c_hal_init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <bno08x_init_i2c+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

    return i2c_hal;
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <bno08x_init_i2c+0x64>)
 8001d64:	681b      	ldr	r3, [r3, #0]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200002c8 	.word	0x200002c8
 8001d70:	20000410 	.word	0x20000410
 8001d74:	2000032c 	.word	0x2000032c
 8001d78:	08001c91 	.word	0x08001c91
 8001d7c:	08001c6d 	.word	0x08001c6d
 8001d80:	08001cb5 	.word	0x08001cb5
 8001d84:	08001cf3 	.word	0x08001cf3
 8001d88:	200002c4 	.word	0x200002c4

08001d8c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t n)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
    if (n == INTN_PIN)
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_GPIO_EXTI_Callback+0x1e>
    {
        IMPL_HAL_GPIO_EXTI_Callback(n, i2c_hal);
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_GPIO_EXTI_Callback+0x28>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fcff 	bl	80017a8 <IMPL_HAL_GPIO_EXTI_Callback>
    }
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200002c4 	.word	0x200002c4

08001db8 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *pI2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    if (pI2c == &hi2c1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a06      	ldr	r2, [pc, #24]	@ (8001ddc <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d105      	bne.n	8001dd4 <HAL_I2C_MasterRxCpltCallback+0x1c>
    {
        IMPL_HAL_I2C_MasterRxCpltCallback(pI2c, i2c_hal);
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fd4e 	bl	8001870 <IMPL_HAL_I2C_MasterRxCpltCallback>
    }
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000032c 	.word	0x2000032c
 8001de0:	200002c4 	.word	0x200002c4

08001de4 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *pI2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	if (pI2c == &hi2c1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a06      	ldr	r2, [pc, #24]	@ (8001e08 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d105      	bne.n	8001e00 <HAL_I2C_MasterTxCpltCallback+0x1c>
    {
        IMPL_HAL_I2C_MasterTxCpltCallback(pI2c, i2c_hal);
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff fd8d 	bl	800191a <IMPL_HAL_I2C_MasterTxCpltCallback>
    }
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000032c 	.word	0x2000032c
 8001e0c:	200002c4 	.word	0x200002c4

08001e10 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *pI2c){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	IMPL_HAL_I2C_ErrorCallback(pI2c, i2c_hal);
 8001e18:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <HAL_I2C_ErrorCallback+0x1c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fd9a 	bl	8001958 <IMPL_HAL_I2C_ErrorCallback>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200002c4 	.word	0x200002c4

08001e30 <EXTI0_IRQHandler>:
//	printf("I2C1_ER_IRQHandler\n");
//    HAL_I2C_ER_IRQHandler(&hi2c1);
//}

void EXTI0_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e34:	2001      	movs	r0, #1
 8001e36:	f004 fff1 	bl	8006e1c <HAL_GPIO_EXTI_IRQHandler>
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <max_int>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int max_int(int val, int min, int max) {
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
	if (val > max) {
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	dd01      	ble.n	8001e56 <max_int+0x18>
		return max;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	e006      	b.n	8001e64 <max_int+0x26>
	} else if (val < min) {
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	da01      	bge.n	8001e62 <max_int+0x24>
		return min;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	e000      	b.n	8001e64 <max_int+0x26>
	} else {
		return val;
 8001e62:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <set_fr>:

void set_fr(int p) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	int ch_a = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
	int ch_b = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
	if (p > 0) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	dd0c      	ble.n	8001ea0 <set_fr+0x30>
		ch_a = (int) ((float) p / COMPARE_DIV);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e94:	ee17 3a90 	vmov	r3, s15
 8001e98:	60fb      	str	r3, [r7, #12]
		ch_b = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	e015      	b.n	8001ecc <set_fr+0x5c>
	} else if (p < 0) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da0e      	bge.n	8001ec4 <set_fr+0x54>
		ch_a = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
		ch_b = (int) (-((float) p) / COMPARE_DIV);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb4:	eef1 7a67 	vneg.f32	s15, s15
 8001eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ebc:	ee17 3a90 	vmov	r3, s15
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	e003      	b.n	8001ecc <set_fr+0x5c>
	} else {
		ch_a = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
		ch_b = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
	}

	ch_a = max_int(ch_a, 0, COMPRE_MAX);
 8001ecc:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7ff ffb3 	bl	8001e3e <max_int>
 8001ed8:	60f8      	str	r0, [r7, #12]
	ch_b = max_int(ch_b, 0, COMPRE_MAX);
 8001eda:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 8001ede:	2100      	movs	r1, #0
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7ff ffac 	bl	8001e3e <max_int>
 8001ee6:	60b8      	str	r0, [r7, #8]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ch_a);
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <set_fr+0x90>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ch_b);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <set_fr+0x90>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000380 	.word	0x20000380

08001f04 <set_fl>:

// Motor

void set_fl(int p) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	int ch_a = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
	int ch_b = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
	if (p > 0) {
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	dd0c      	ble.n	8001f34 <set_fl+0x30>
		ch_a = (int) ((float) p / COMPARE_DIV);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f28:	ee17 3a90 	vmov	r3, s15
 8001f2c:	60fb      	str	r3, [r7, #12]
		ch_b = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	e015      	b.n	8001f60 <set_fl+0x5c>
	} else if (p < 0) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	da0e      	bge.n	8001f58 <set_fl+0x54>
		ch_a = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
		ch_b = (int) (-((float) p) / COMPARE_DIV);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	ee07 3a90 	vmov	s15, r3
 8001f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f48:	eef1 7a67 	vneg.f32	s15, s15
 8001f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f50:	ee17 3a90 	vmov	r3, s15
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	e003      	b.n	8001f60 <set_fl+0x5c>
	} else {
		ch_a = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
		ch_b = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
	}

	ch_a = max_int(ch_a, 0, COMPRE_MAX);
 8001f60:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 8001f64:	2100      	movs	r1, #0
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff ff69 	bl	8001e3e <max_int>
 8001f6c:	60f8      	str	r0, [r7, #12]
	ch_b = max_int(ch_b, 0, COMPRE_MAX);
 8001f6e:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 8001f72:	2100      	movs	r1, #0
 8001f74:	68b8      	ldr	r0, [r7, #8]
 8001f76:	f7ff ff62 	bl	8001e3e <max_int>
 8001f7a:	60b8      	str	r0, [r7, #8]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ch_a);
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <set_fl+0x90>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ch_b);
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <set_fl+0x90>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200003c8 	.word	0x200003c8

08001f98 <set_rr>:

void set_rr(int p) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	int ch_a = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
	int ch_b = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
	if (p > 0) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	dd0c      	ble.n	8001fc8 <set_rr+0x30>
		ch_a = (int) ((float) p / COMPARE_DIV);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fbc:	ee17 3a90 	vmov	r3, s15
 8001fc0:	60fb      	str	r3, [r7, #12]
		ch_b = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	e015      	b.n	8001ff4 <set_rr+0x5c>
	} else if (p < 0) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da0e      	bge.n	8001fec <set_rr+0x54>
		ch_a = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
		ch_b = (int) (-((float) p) / COMPARE_DIV);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fdc:	eef1 7a67 	vneg.f32	s15, s15
 8001fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe4:	ee17 3a90 	vmov	r3, s15
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	e003      	b.n	8001ff4 <set_rr+0x5c>
	} else {
		ch_a = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
		ch_b = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
	}

	ch_a = max_int(ch_a, 0, COMPRE_MAX);
 8001ff4:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f7ff ff1f 	bl	8001e3e <max_int>
 8002000:	60f8      	str	r0, [r7, #12]
	ch_b = max_int(ch_b, 0, COMPRE_MAX);
 8002002:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 8002006:	2100      	movs	r1, #0
 8002008:	68b8      	ldr	r0, [r7, #8]
 800200a:	f7ff ff18 	bl	8001e3e <max_int>
 800200e:	60b8      	str	r0, [r7, #8]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ch_b); // Reversed
 8002010:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <set_rr+0x90>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ch_a); // Reversed
 8002018:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <set_rr+0x90>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000380 	.word	0x20000380

0800202c <set_rl>:

void set_rl(int p) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	int ch_a = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
	int ch_b = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
	if (p > 0) {
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	dd0c      	ble.n	800205c <set_rl+0x30>
		ch_a = (int) ((float) p / COMPARE_DIV);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002050:	ee17 3a90 	vmov	r3, s15
 8002054:	60fb      	str	r3, [r7, #12]
		ch_b = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	e015      	b.n	8002088 <set_rl+0x5c>
	} else if (p < 0) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	da0e      	bge.n	8002080 <set_rl+0x54>
		ch_a = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
		ch_b = (int) (-((float) p) / COMPARE_DIV);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002070:	eef1 7a67 	vneg.f32	s15, s15
 8002074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002078:	ee17 3a90 	vmov	r3, s15
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	e003      	b.n	8002088 <set_rl+0x5c>
	} else {
		ch_a = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
		ch_b = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
	}

	ch_a = max_int(ch_a, 0, COMPRE_MAX);
 8002088:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 800208c:	2100      	movs	r1, #0
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff fed5 	bl	8001e3e <max_int>
 8002094:	60f8      	str	r0, [r7, #12]
	ch_b = max_int(ch_b, 0, COMPRE_MAX);
 8002096:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 800209a:	2100      	movs	r1, #0
 800209c:	68b8      	ldr	r0, [r7, #8]
 800209e:	f7ff fece 	bl	8001e3e <max_int>
 80020a2:	60b8      	str	r0, [r7, #8]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ch_a);
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <set_rl+0x90>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ch_b);
 80020ac:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <set_rl+0x90>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	200003c8 	.word	0x200003c8

080020c0 <calcWorldMotorSpeed>:
float calcMotorSpeed(float angle, float speed, float motorAngle) {
	return sin((angle - motorAngle) * DEG2RAD) * speed;
}

float calcWorldMotorSpeed(float motorAngle, float wheel_r, float angle,
		float speed_x, float speed_y, float speed_angle) {
 80020c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	ed87 0a05 	vstr	s0, [r7, #20]
 80020cc:	edc7 0a04 	vstr	s1, [r7, #16]
 80020d0:	ed87 1a03 	vstr	s2, [r7, #12]
 80020d4:	edc7 1a02 	vstr	s3, [r7, #8]
 80020d8:	ed87 2a01 	vstr	s4, [r7, #4]
 80020dc:	edc7 2a00 	vstr	s5, [r7]
	return (-sin(angle + motorAngle) * cos(angle) * speed_x
 80020e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80020e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ec:	ee17 0a90 	vmov	r0, s15
 80020f0:	f7fe fa4a 	bl	8000588 <__aeabi_f2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	ec43 2b10 	vmov	d0, r2, r3
 80020fc:	f009 fb8c 	bl	800b818 <sin>
 8002100:	ec53 2b10 	vmov	r2, r3, d0
 8002104:	4614      	mov	r4, r2
 8002106:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7fe fa3c 	bl	8000588 <__aeabi_f2d>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	ec43 2b10 	vmov	d0, r2, r3
 8002118:	f009 fb22 	bl	800b760 <cos>
 800211c:	ec53 2b10 	vmov	r2, r3, d0
 8002120:	4620      	mov	r0, r4
 8002122:	4629      	mov	r1, r5
 8002124:	f7fe fa88 	bl	8000638 <__aeabi_dmul>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4614      	mov	r4, r2
 800212e:	461d      	mov	r5, r3
 8002130:	68b8      	ldr	r0, [r7, #8]
 8002132:	f7fe fa29 	bl	8000588 <__aeabi_f2d>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4620      	mov	r0, r4
 800213c:	4629      	mov	r1, r5
 800213e:	f7fe fa7b 	bl	8000638 <__aeabi_dmul>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4614      	mov	r4, r2
 8002148:	461d      	mov	r5, r3
			+ cos(angle + motorAngle) * cos(angle) * speed_y + speed_angle)
 800214a:	ed97 7a03 	vldr	s14, [r7, #12]
 800214e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002156:	ee17 0a90 	vmov	r0, s15
 800215a:	f7fe fa15 	bl	8000588 <__aeabi_f2d>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	ec43 2b10 	vmov	d0, r2, r3
 8002166:	f009 fafb 	bl	800b760 <cos>
 800216a:	ec59 8b10 	vmov	r8, r9, d0
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f7fe fa0a 	bl	8000588 <__aeabi_f2d>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	ec43 2b10 	vmov	d0, r2, r3
 800217c:	f009 faf0 	bl	800b760 <cos>
 8002180:	ec53 2b10 	vmov	r2, r3, d0
 8002184:	4640      	mov	r0, r8
 8002186:	4649      	mov	r1, r9
 8002188:	f7fe fa56 	bl	8000638 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4690      	mov	r8, r2
 8002192:	4699      	mov	r9, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7fe f9f7 	bl	8000588 <__aeabi_f2d>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4640      	mov	r0, r8
 80021a0:	4649      	mov	r1, r9
 80021a2:	f7fe fa49 	bl	8000638 <__aeabi_dmul>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4620      	mov	r0, r4
 80021ac:	4629      	mov	r1, r5
 80021ae:	f7fe f88d 	bl	80002cc <__adddf3>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4614      	mov	r4, r2
 80021b8:	461d      	mov	r5, r3
 80021ba:	6838      	ldr	r0, [r7, #0]
 80021bc:	f7fe f9e4 	bl	8000588 <__aeabi_f2d>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4620      	mov	r0, r4
 80021c6:	4629      	mov	r1, r5
 80021c8:	f7fe f880 	bl	80002cc <__adddf3>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4614      	mov	r4, r2
 80021d2:	461d      	mov	r5, r3
			/ wheel_r;
 80021d4:	6938      	ldr	r0, [r7, #16]
 80021d6:	f7fe f9d7 	bl	8000588 <__aeabi_f2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4620      	mov	r0, r4
 80021e0:	4629      	mov	r1, r5
 80021e2:	f7fe fb53 	bl	800088c <__aeabi_ddiv>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	f7fe fcfb 	bl	8000be8 <__aeabi_d2f>
 80021f2:	4603      	mov	r3, r0
 80021f4:	ee07 3a90 	vmov	s15, r3
}
 80021f8:	eeb0 0a67 	vmov.f32	s0, s15
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002204 <moveWorld>:
	set_fl((int) calcMotorSpeed(angle, speed, -45));
	set_rr((int) calcMotorSpeed(angle, speed, 135));
	set_rl((int) calcMotorSpeed(angle, speed, -135));
}

void moveWorld(float x, float y, float world_angle, float theta) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	ed87 0a03 	vstr	s0, [r7, #12]
 800220e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002212:	ed87 1a01 	vstr	s2, [r7, #4]
 8002216:	edc7 1a00 	vstr	s3, [r7]
	set_fr(calcWorldMotorSpeed(FR, WHEEL_R, world_angle, x, y, theta));
 800221a:	edd7 2a00 	vldr	s5, [r7]
 800221e:	ed97 2a02 	vldr	s4, [r7, #8]
 8002222:	edd7 1a03 	vldr	s3, [r7, #12]
 8002226:	ed97 1a01 	vldr	s2, [r7, #4]
 800222a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800222e:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 80022d4 <moveWorld+0xd0>
 8002232:	f7ff ff45 	bl	80020c0 <calcWorldMotorSpeed>
 8002236:	eef0 7a40 	vmov.f32	s15, s0
 800223a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223e:	ee17 0a90 	vmov	r0, s15
 8002242:	f7ff fe15 	bl	8001e70 <set_fr>
	set_fl(calcWorldMotorSpeed(FL, WHEEL_R, world_angle, x, y, theta));
 8002246:	edd7 2a00 	vldr	s5, [r7]
 800224a:	ed97 2a02 	vldr	s4, [r7, #8]
 800224e:	edd7 1a03 	vldr	s3, [r7, #12]
 8002252:	ed97 1a01 	vldr	s2, [r7, #4]
 8002256:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800225a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80022d8 <moveWorld+0xd4>
 800225e:	f7ff ff2f 	bl	80020c0 <calcWorldMotorSpeed>
 8002262:	eef0 7a40 	vmov.f32	s15, s0
 8002266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800226a:	ee17 0a90 	vmov	r0, s15
 800226e:	f7ff fe49 	bl	8001f04 <set_fl>
	set_rr(calcWorldMotorSpeed(RR, WHEEL_R, world_angle, x, y, theta));
 8002272:	edd7 2a00 	vldr	s5, [r7]
 8002276:	ed97 2a02 	vldr	s4, [r7, #8]
 800227a:	edd7 1a03 	vldr	s3, [r7, #12]
 800227e:	ed97 1a01 	vldr	s2, [r7, #4]
 8002282:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002286:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80022dc <moveWorld+0xd8>
 800228a:	f7ff ff19 	bl	80020c0 <calcWorldMotorSpeed>
 800228e:	eef0 7a40 	vmov.f32	s15, s0
 8002292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002296:	ee17 0a90 	vmov	r0, s15
 800229a:	f7ff fe7d 	bl	8001f98 <set_rr>
	set_rl(calcWorldMotorSpeed(RL, WHEEL_R, world_angle, x, y, theta));
 800229e:	edd7 2a00 	vldr	s5, [r7]
 80022a2:	ed97 2a02 	vldr	s4, [r7, #8]
 80022a6:	edd7 1a03 	vldr	s3, [r7, #12]
 80022aa:	ed97 1a01 	vldr	s2, [r7, #4]
 80022ae:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80022b2:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80022e0 <moveWorld+0xdc>
 80022b6:	f7ff ff03 	bl	80020c0 <calcWorldMotorSpeed>
 80022ba:	eef0 7a40 	vmov.f32	s15, s0
 80022be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c2:	ee17 0a90 	vmov	r0, s15
 80022c6:	f7ff feb1 	bl	800202c <set_rl>
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	42340000 	.word	0x42340000
 80022d8:	c2340000 	.word	0xc2340000
 80022dc:	43070000 	.word	0x43070000
 80022e0:	c3070000 	.word	0xc3070000

080022e4 <read_line_sensor>:
	set_fl(theta);
	set_rr(theta);
	set_rl(theta);
}

int read_line_sensor(int id) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Line_A_GPIO_Port, Line_A_Pin, id & 0b0001);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022fc:	4829      	ldr	r0, [pc, #164]	@ (80023a4 <read_line_sensor+0xc0>)
 80022fe:	f004 fd73 	bl	8006de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Line_B_GPIO_Port, Line_B_Pin, (id & 0b0010) >> 1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	105b      	asrs	r3, r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002314:	4823      	ldr	r0, [pc, #140]	@ (80023a4 <read_line_sensor+0xc0>)
 8002316:	f004 fd67 	bl	8006de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Line_C_GPIO_Port, Line_C_Pin, (id & 0b0100) >> 2);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	109b      	asrs	r3, r3, #2
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800232c:	481d      	ldr	r0, [pc, #116]	@ (80023a4 <read_line_sensor+0xc0>)
 800232e:	f004 fd5b 	bl	8006de8 <HAL_GPIO_WritePin>

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
	sConfig.Rank = 1;
 8002340:	2301      	movs	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]

	sConfig.Channel = (id & 0b1000) >> 3 ? ADC_CHANNEL_10 : ADC_CHANNEL_11;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <read_line_sensor+0x72>
 8002352:	230a      	movs	r3, #10
 8002354:	e000      	b.n	8002358 <read_line_sensor+0x74>
 8002356:	230b      	movs	r3, #11
 8002358:	60fb      	str	r3, [r7, #12]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	4619      	mov	r1, r3
 8002360:	4811      	ldr	r0, [pc, #68]	@ (80023a8 <read_line_sensor+0xc4>)
 8002362:	f003 ff17 	bl	8006194 <HAL_ADC_ConfigChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <read_line_sensor+0x8c>
		Error_Handler();
 800236c:	f000 fee2 	bl	8003134 <Error_Handler>
	}

	int val = -1;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002374:	61fb      	str	r3, [r7, #28]

	HAL_ADC_Start(&hadc1);
 8002376:	480c      	ldr	r0, [pc, #48]	@ (80023a8 <read_line_sensor+0xc4>)
 8002378:	f003 fd6e 	bl	8005e58 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 800237c:	2164      	movs	r1, #100	@ 0x64
 800237e:	480a      	ldr	r0, [pc, #40]	@ (80023a8 <read_line_sensor+0xc4>)
 8002380:	f003 fe6f 	bl	8006062 <HAL_ADC_PollForConversion>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d104      	bne.n	8002394 <read_line_sensor+0xb0>
		val = HAL_ADC_GetValue(&hadc1);
 800238a:	4807      	ldr	r0, [pc, #28]	@ (80023a8 <read_line_sensor+0xc4>)
 800238c:	f003 fef4 	bl	8006178 <HAL_ADC_GetValue>
 8002390:	4603      	mov	r3, r0
 8002392:	61fb      	str	r3, [r7, #28]
	}
	HAL_ADC_Stop(&hadc1);
 8002394:	4804      	ldr	r0, [pc, #16]	@ (80023a8 <read_line_sensor+0xc4>)
 8002396:	f003 fe31 	bl	8005ffc <HAL_ADC_Stop>

	return val;
 800239a:	69fb      	ldr	r3, [r7, #28]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40020000 	.word	0x40020000
 80023a8:	200002e4 	.word	0x200002e4
 80023ac:	00000000 	.word	0x00000000

080023b0 <init_line_sensor_vec>:

void init_line_sensor_vec() {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
	for (int i = 0; i < LINE_SENSOR_NUM; i++) {
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	e05f      	b.n	800247c <init_line_sensor_vec+0xcc>
		line_vec[i].x = cos(
		LINE_SENSOR_OFFSET + LINE_SENSOR_ONE_ANGLE * i) * LINE_SENSOR_VEC_MUL;
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7fe f8d1 	bl	8000564 <__aeabi_i2d>
 80023c2:	a333      	add	r3, pc, #204	@ (adr r3, 8002490 <init_line_sensor_vec+0xe0>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fe f936 	bl	8000638 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
		line_vec[i].x = cos(
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	f7fd ff76 	bl	80002cc <__adddf3>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	ec43 2b17 	vmov	d7, r2, r3
 80023e8:	eeb0 0a47 	vmov.f32	s0, s14
 80023ec:	eef0 0a67 	vmov.f32	s1, s15
 80023f0:	f009 f9b6 	bl	800b760 <cos>
 80023f4:	ec51 0b10 	vmov	r0, r1, d0
		LINE_SENSOR_OFFSET + LINE_SENSOR_ONE_ANGLE * i) * LINE_SENSOR_VEC_MUL;
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <init_line_sensor_vec+0xe8>)
 80023fe:	f7fe f91b 	bl	8000638 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
		line_vec[i].x = cos(
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe fbc5 	bl	8000b98 <__aeabi_d2iz>
 800240e:	4602      	mov	r2, r0
 8002410:	4922      	ldr	r1, [pc, #136]	@ (800249c <init_line_sensor_vec+0xec>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		line_vec[i].y = sin(
		LINE_SENSOR_OFFSET + LINE_SENSOR_ONE_ANGLE * i) * LINE_SENSOR_VEC_MUL;
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7fe f8a3 	bl	8000564 <__aeabi_i2d>
 800241e:	a31c      	add	r3, pc, #112	@ (adr r3, 8002490 <init_line_sensor_vec+0xe0>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	f7fe f908 	bl	8000638 <__aeabi_dmul>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
		line_vec[i].y = sin(
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	f7fd ff48 	bl	80002cc <__adddf3>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	ec43 2b17 	vmov	d7, r2, r3
 8002444:	eeb0 0a47 	vmov.f32	s0, s14
 8002448:	eef0 0a67 	vmov.f32	s1, s15
 800244c:	f009 f9e4 	bl	800b818 <sin>
 8002450:	ec51 0b10 	vmov	r0, r1, d0
		LINE_SENSOR_OFFSET + LINE_SENSOR_ONE_ANGLE * i) * LINE_SENSOR_VEC_MUL;
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <init_line_sensor_vec+0xe8>)
 800245a:	f7fe f8ed 	bl	8000638 <__aeabi_dmul>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
		line_vec[i].y = sin(
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	f7fe fb97 	bl	8000b98 <__aeabi_d2iz>
 800246a:	4602      	mov	r2, r0
 800246c:	490b      	ldr	r1, [pc, #44]	@ (800249c <init_line_sensor_vec+0xec>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < LINE_SENSOR_NUM; i++) {
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3301      	adds	r3, #1
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	dd9c      	ble.n	80023bc <init_line_sensor_vec+0xc>
	}
}
 8002482:	bf00      	nop
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	f3af 8000 	nop.w
 8002490:	54442d18 	.word	0x54442d18
 8002494:	3fd921fb 	.word	0x3fd921fb
 8002498:	408f4000 	.word	0x408f4000
 800249c:	200004b4 	.word	0x200004b4

080024a0 <line_sensor_angle>:

void line_sensor_angle(float_vector2_t *v, int *max) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
	uint32_vector2_t sum = { x: 0, y: 0 };
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
	v->x = 0;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
	v->y = 0;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	605a      	str	r2, [r3, #4]
	*max = 0;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < LINE_SENSOR_NUM; i++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80024cc:	e023      	b.n	8002516 <line_sensor_angle+0x76>
		int val = read_line_sensor(i);
 80024ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024d0:	f7ff ff08 	bl	80022e4 <read_line_sensor>
 80024d4:	61f8      	str	r0, [r7, #28]
		if (val > *max) {
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	429a      	cmp	r2, r3
 80024de:	dd02      	ble.n	80024e6 <line_sensor_angle+0x46>
			*max = val;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	601a      	str	r2, [r3, #0]
		}
		sum.x += line_vec[i].x * val;
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4937      	ldr	r1, [pc, #220]	@ (80025c8 <line_sensor_angle+0x128>)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80024f0:	69f9      	ldr	r1, [r7, #28]
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
		sum.y += line_vec[i].y * val;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4932      	ldr	r1, [pc, #200]	@ (80025c8 <line_sensor_angle+0x128>)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	69f9      	ldr	r1, [r7, #28]
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < LINE_SENSOR_NUM; i++) {
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	3301      	adds	r3, #1
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	2b0f      	cmp	r3, #15
 800251a:	ddd8      	ble.n	80024ce <line_sensor_angle+0x2e>
	}

	printf("%ld, %ld\n", sum.x, sum.y);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4619      	mov	r1, r3
 8002522:	482a      	ldr	r0, [pc, #168]	@ (80025cc <line_sensor_angle+0x12c>)
 8002524:	f00b f97a 	bl	800d81c <iprintf>

	float_vector2_t f_sum = { x: (sum.x / LINE_SENSOR_VEC_MUL), y: (sum.y
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	4a29      	ldr	r2, [pc, #164]	@ (80025d0 <line_sensor_angle+0x130>)
 800252c:	fb82 1203 	smull	r1, r2, r2, r3
 8002530:	1192      	asrs	r2, r2, #6
 8002532:	17db      	asrs	r3, r3, #31
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253e:	edc7 7a03 	vstr	s15, [r7, #12]
 8002542:	69bb      	ldr	r3, [r7, #24]
			/ LINE_SENSOR_VEC_MUL) };
 8002544:	4a22      	ldr	r2, [pc, #136]	@ (80025d0 <line_sensor_angle+0x130>)
 8002546:	fb82 1203 	smull	r1, r2, r2, r3
 800254a:	1192      	asrs	r2, r2, #6
 800254c:	17db      	asrs	r3, r3, #31
 800254e:	1ad3      	subs	r3, r2, r3
	float_vector2_t f_sum = { x: (sum.x / LINE_SENSOR_VEC_MUL), y: (sum.y
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002558:	edc7 7a04 	vstr	s15, [r7, #16]

	float div = sqrt(f_sum.x * f_sum.x + f_sum.y * f_sum.y);
 800255c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002560:	edd7 7a03 	vldr	s15, [r7, #12]
 8002564:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002568:	edd7 6a04 	vldr	s13, [r7, #16]
 800256c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002578:	ee17 0a90 	vmov	r0, s15
 800257c:	f7fe f804 	bl	8000588 <__aeabi_f2d>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	ec43 2b10 	vmov	d0, r2, r3
 8002588:	f008 ff24 	bl	800b3d4 <sqrt>
 800258c:	ec53 2b10 	vmov	r2, r3, d0
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	f7fe fb28 	bl	8000be8 <__aeabi_d2f>
 8002598:	4603      	mov	r3, r0
 800259a:	623b      	str	r3, [r7, #32]

	v->x = f_sum.x / div;
 800259c:	edd7 6a03 	vldr	s13, [r7, #12]
 80025a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80025a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	edc3 7a00 	vstr	s15, [r3]
	v->y = f_sum.y / div;
 80025ae:	edd7 6a04 	vldr	s13, [r7, #16]
 80025b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80025b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	edc3 7a01 	vstr	s15, [r3, #4]

//	atan2(sum.x, sum.y);
}
 80025c0:	bf00      	nop
 80025c2:	3728      	adds	r7, #40	@ 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200004b4 	.word	0x200004b4
 80025cc:	0800f7b8 	.word	0x0800f7b8
 80025d0:	10624dd3 	.word	0x10624dd3

080025d4 <quaternion_to_euler_angle>:
//		HAL_Delay(1);
//	}
//}

void quaternion_to_euler_angle(float x, float y, float z, float w,
		float *eular_x, float *eular_y, float *eular_z) {
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b092      	sub	sp, #72	@ 0x48
 80025d8:	af00      	add	r7, sp, #0
 80025da:	ed87 0a07 	vstr	s0, [r7, #28]
 80025de:	edc7 0a06 	vstr	s1, [r7, #24]
 80025e2:	ed87 1a05 	vstr	s2, [r7, #20]
 80025e6:	edc7 1a04 	vstr	s3, [r7, #16]
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
	float ysqr = y * y;
 80025f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80025f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025f8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	float t0 = 2.0 * (w * x + y * z);
 80025fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002600:	edd7 7a07 	vldr	s15, [r7, #28]
 8002604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002608:	edd7 6a06 	vldr	s13, [r7, #24]
 800260c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002618:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800261c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	float t1 = 1.0 - 2.0 * (x * x + ysqr);
 8002620:	edd7 7a07 	vldr	s15, [r7, #28]
 8002624:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002628:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800262c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002630:	ee17 0a90 	vmov	r0, s15
 8002634:	f7fd ffa8 	bl	8000588 <__aeabi_f2d>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	f7fd fe46 	bl	80002cc <__adddf3>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	f04f 0000 	mov.w	r0, #0
 8002648:	495b      	ldr	r1, [pc, #364]	@ (80027b8 <quaternion_to_euler_angle+0x1e4>)
 800264a:	f7fd fe3d 	bl	80002c8 <__aeabi_dsub>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fe fac7 	bl	8000be8 <__aeabi_d2f>
 800265a:	4603      	mov	r3, r0
 800265c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float X = atan2(t0, t1);
 800265e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002660:	f7fd ff92 	bl	8000588 <__aeabi_f2d>
 8002664:	4604      	mov	r4, r0
 8002666:	460d      	mov	r5, r1
 8002668:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800266a:	f7fd ff8d 	bl	8000588 <__aeabi_f2d>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	ec43 2b11 	vmov	d1, r2, r3
 8002676:	ec45 4b10 	vmov	d0, r4, r5
 800267a:	f008 fbdd 	bl	800ae38 <atan2>
 800267e:	ec53 2b10 	vmov	r2, r3, d0
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f7fe faaf 	bl	8000be8 <__aeabi_d2f>
 800268a:	4603      	mov	r3, r0
 800268c:	63bb      	str	r3, [r7, #56]	@ 0x38

	float t2 = 2.0 * (w * y - z * x);
 800268e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002692:	edd7 7a06 	vldr	s15, [r7, #24]
 8002696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269a:	edd7 6a05 	vldr	s13, [r7, #20]
 800269e:	edd7 7a07 	vldr	s15, [r7, #28]
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026ae:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	t2 = (t2 > 1.0) ? 1.0 : t2;
 80026b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80026b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80026ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c2:	dd02      	ble.n	80026ca <quaternion_to_euler_angle+0xf6>
 80026c4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80026c8:	e000      	b.n	80026cc <quaternion_to_euler_angle+0xf8>
 80026ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026cc:	637b      	str	r3, [r7, #52]	@ 0x34
	t2 = (t2 < -1.0) ? -1.0 : t2;
 80026ce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80026d2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80026d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	d501      	bpl.n	80026e4 <quaternion_to_euler_angle+0x110>
 80026e0:	4b36      	ldr	r3, [pc, #216]	@ (80027bc <quaternion_to_euler_angle+0x1e8>)
 80026e2:	e000      	b.n	80026e6 <quaternion_to_euler_angle+0x112>
 80026e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
	float Y = asin(t2);
 80026e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80026ea:	f7fd ff4d 	bl	8000588 <__aeabi_f2d>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	ec43 2b10 	vmov	d0, r2, r3
 80026f6:	f008 fb6b 	bl	800add0 <asin>
 80026fa:	ec53 2b10 	vmov	r2, r3, d0
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f7fe fa71 	bl	8000be8 <__aeabi_d2f>
 8002706:	4603      	mov	r3, r0
 8002708:	633b      	str	r3, [r7, #48]	@ 0x30

	float t3 = 2.0 * (w * z + x * y);
 800270a:	ed97 7a04 	vldr	s14, [r7, #16]
 800270e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002716:	edd7 6a07 	vldr	s13, [r7, #28]
 800271a:	edd7 7a06 	vldr	s15, [r7, #24]
 800271e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002726:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800272a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float t4 = 1.0 - 2.0 * (ysqr + z * z);
 800272e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002732:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002736:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800273a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273e:	ee17 0a90 	vmov	r0, s15
 8002742:	f7fd ff21 	bl	8000588 <__aeabi_f2d>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	f7fd fdbf 	bl	80002cc <__adddf3>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	f04f 0000 	mov.w	r0, #0
 8002756:	4918      	ldr	r1, [pc, #96]	@ (80027b8 <quaternion_to_euler_angle+0x1e4>)
 8002758:	f7fd fdb6 	bl	80002c8 <__aeabi_dsub>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe fa40 	bl	8000be8 <__aeabi_d2f>
 8002768:	4603      	mov	r3, r0
 800276a:	62bb      	str	r3, [r7, #40]	@ 0x28

	float Z = atan2(t3, t4);
 800276c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800276e:	f7fd ff0b 	bl	8000588 <__aeabi_f2d>
 8002772:	4604      	mov	r4, r0
 8002774:	460d      	mov	r5, r1
 8002776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002778:	f7fd ff06 	bl	8000588 <__aeabi_f2d>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	ec43 2b11 	vmov	d1, r2, r3
 8002784:	ec45 4b10 	vmov	d0, r4, r5
 8002788:	f008 fb56 	bl	800ae38 <atan2>
 800278c:	ec53 2b10 	vmov	r2, r3, d0
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f7fe fa28 	bl	8000be8 <__aeabi_d2f>
 8002798:	4603      	mov	r3, r0
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24

	*eular_x = X;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027a0:	601a      	str	r2, [r3, #0]
	*eular_y = Y;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027a6:	601a      	str	r2, [r3, #0]
	*eular_z = Z;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ac:	601a      	str	r2, [r3, #0]

	return;
 80027ae:	bf00      	nop
}
 80027b0:	3748      	adds	r7, #72	@ 0x48
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bdb0      	pop	{r4, r5, r7, pc}
 80027b6:	bf00      	nop
 80027b8:	3ff00000 	.word	0x3ff00000
 80027bc:	bf800000 	.word	0xbf800000

080027c0 <bno08x_callback>:

void bno08x_callback(bno08x_data_t *data) {
 80027c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
//	printf("%f, %f, %f, %f\n", data->gameRotationVector.i,
//			data->gameRotationVector.j, data->gameRotationVector.k,
//			data->gameRotationVector.real);
	quaternion_to_euler_angle(data->gameRotationVector.i,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	ed93 6a17 	vldr	s12, [r3, #92]	@ 0x5c
 80027e2:	4a5d      	ldr	r2, [pc, #372]	@ (8002958 <bno08x_callback+0x198>)
 80027e4:	495d      	ldr	r1, [pc, #372]	@ (800295c <bno08x_callback+0x19c>)
 80027e6:	485e      	ldr	r0, [pc, #376]	@ (8002960 <bno08x_callback+0x1a0>)
 80027e8:	eef0 1a46 	vmov.f32	s3, s12
 80027ec:	eeb0 1a66 	vmov.f32	s2, s13
 80027f0:	eef0 0a47 	vmov.f32	s1, s14
 80027f4:	eeb0 0a67 	vmov.f32	s0, s15
 80027f8:	f7ff feec 	bl	80025d4 <quaternion_to_euler_angle>
			data->gameRotationVector.j, data->gameRotationVector.k,
			data->gameRotationVector.real, &imu_x, &imu_y, &imu_roll);
//	printf("%f, %f, %f\n", imu_x, imu_y, imu_roll);

	static int t_pre = 0;
	int t = HAL_GetTick();
 80027fc:	f003 fadc 	bl	8005db8 <HAL_GetTick>
 8002800:	4603      	mov	r3, r0
 8002802:	60fb      	str	r3, [r7, #12]

	int t_w = t - t_pre;
 8002804:	4b57      	ldr	r3, [pc, #348]	@ (8002964 <bno08x_callback+0x1a4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	60bb      	str	r3, [r7, #8]

	static float e = 0, ei = 0, ed = 0, e_pre = 0;

	e = target_angle - imu_roll;
 800280e:	4b56      	ldr	r3, [pc, #344]	@ (8002968 <bno08x_callback+0x1a8>)
 8002810:	ed93 7a00 	vldr	s14, [r3]
 8002814:	4b50      	ldr	r3, [pc, #320]	@ (8002958 <bno08x_callback+0x198>)
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281e:	4b53      	ldr	r3, [pc, #332]	@ (800296c <bno08x_callback+0x1ac>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
	ei += e * (t_w * 1e-3);
 8002824:	4b52      	ldr	r3, [pc, #328]	@ (8002970 <bno08x_callback+0x1b0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fead 	bl	8000588 <__aeabi_f2d>
 800282e:	4604      	mov	r4, r0
 8002830:	460d      	mov	r5, r1
 8002832:	4b4e      	ldr	r3, [pc, #312]	@ (800296c <bno08x_callback+0x1ac>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fea6 	bl	8000588 <__aeabi_f2d>
 800283c:	4680      	mov	r8, r0
 800283e:	4689      	mov	r9, r1
 8002840:	68b8      	ldr	r0, [r7, #8]
 8002842:	f7fd fe8f 	bl	8000564 <__aeabi_i2d>
 8002846:	a340      	add	r3, pc, #256	@ (adr r3, 8002948 <bno08x_callback+0x188>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd fef4 	bl	8000638 <__aeabi_dmul>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4640      	mov	r0, r8
 8002856:	4649      	mov	r1, r9
 8002858:	f7fd feee 	bl	8000638 <__aeabi_dmul>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4620      	mov	r0, r4
 8002862:	4629      	mov	r1, r5
 8002864:	f7fd fd32 	bl	80002cc <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f7fe f9ba 	bl	8000be8 <__aeabi_d2f>
 8002874:	4603      	mov	r3, r0
 8002876:	4a3e      	ldr	r2, [pc, #248]	@ (8002970 <bno08x_callback+0x1b0>)
 8002878:	6013      	str	r3, [r2, #0]
	ed = (e - e_pre) / (t_w * 1e-3);
 800287a:	4b3c      	ldr	r3, [pc, #240]	@ (800296c <bno08x_callback+0x1ac>)
 800287c:	ed93 7a00 	vldr	s14, [r3]
 8002880:	4b3c      	ldr	r3, [pc, #240]	@ (8002974 <bno08x_callback+0x1b4>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288a:	ee17 0a90 	vmov	r0, s15
 800288e:	f7fd fe7b 	bl	8000588 <__aeabi_f2d>
 8002892:	4604      	mov	r4, r0
 8002894:	460d      	mov	r5, r1
 8002896:	68b8      	ldr	r0, [r7, #8]
 8002898:	f7fd fe64 	bl	8000564 <__aeabi_i2d>
 800289c:	a32a      	add	r3, pc, #168	@ (adr r3, 8002948 <bno08x_callback+0x188>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	f7fd fec9 	bl	8000638 <__aeabi_dmul>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4620      	mov	r0, r4
 80028ac:	4629      	mov	r1, r5
 80028ae:	f7fd ffed 	bl	800088c <__aeabi_ddiv>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe f995 	bl	8000be8 <__aeabi_d2f>
 80028be:	4603      	mov	r3, r0
 80028c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002978 <bno08x_callback+0x1b8>)
 80028c2:	6013      	str	r3, [r2, #0]
	e_pre = e;
 80028c4:	4b29      	ldr	r3, [pc, #164]	@ (800296c <bno08x_callback+0x1ac>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002974 <bno08x_callback+0x1b4>)
 80028ca:	6013      	str	r3, [r2, #0]

	motor_angle_u = Kp * (e + 1 / Ti * ei + Td * ed);
 80028cc:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <bno08x_callback+0x1b0>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800297c <bno08x_callback+0x1bc>
 80028d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028da:	4b24      	ldr	r3, [pc, #144]	@ (800296c <bno08x_callback+0x1ac>)
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e4:	ee17 0a90 	vmov	r0, s15
 80028e8:	f7fd fe4e 	bl	8000588 <__aeabi_f2d>
 80028ec:	4604      	mov	r4, r0
 80028ee:	460d      	mov	r5, r1
 80028f0:	4b21      	ldr	r3, [pc, #132]	@ (8002978 <bno08x_callback+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fe47 	bl	8000588 <__aeabi_f2d>
 80028fa:	a315      	add	r3, pc, #84	@ (adr r3, 8002950 <bno08x_callback+0x190>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fd fe9a 	bl	8000638 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4620      	mov	r0, r4
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd fcde 	bl	80002cc <__adddf3>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	4b18      	ldr	r3, [pc, #96]	@ (8002980 <bno08x_callback+0x1c0>)
 800291e:	f7fd fe8b 	bl	8000638 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	f7fe f95d 	bl	8000be8 <__aeabi_d2f>
 800292e:	4603      	mov	r3, r0
 8002930:	4a14      	ldr	r2, [pc, #80]	@ (8002984 <bno08x_callback+0x1c4>)
 8002932:	6013      	str	r3, [r2, #0]

	t_pre = t;
 8002934:	4a0b      	ldr	r2, [pc, #44]	@ (8002964 <bno08x_callback+0x1a4>)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6013      	str	r3, [r2, #0]
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002944:	f3af 8000 	nop.w
 8002948:	d2f1a9fc 	.word	0xd2f1a9fc
 800294c:	3f50624d 	.word	0x3f50624d
 8002950:	9999999a 	.word	0x9999999a
 8002954:	3fa99999 	.word	0x3fa99999
 8002958:	200004a8 	.word	0x200004a8
 800295c:	200004a4 	.word	0x200004a4
 8002960:	200004a0 	.word	0x200004a0
 8002964:	20000534 	.word	0x20000534
 8002968:	200004ac 	.word	0x200004ac
 800296c:	20000538 	.word	0x20000538
 8002970:	2000053c 	.word	0x2000053c
 8002974:	20000540 	.word	0x20000540
 8002978:	20000544 	.word	0x20000544
 800297c:	00000000 	.word	0x00000000
 8002980:	4092c000 	.word	0x4092c000
 8002984:	200004b0 	.word	0x200004b0

08002988 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b08a      	sub	sp, #40	@ 0x28
 800298c:	af04      	add	r7, sp, #16

	/* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800298e:	4b57      	ldr	r3, [pc, #348]	@ (8002aec <main+0x164>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f00a fd54 	bl	800d444 <setbuf>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800299c:	f003 f9a6 	bl	8005cec <HAL_Init>
	/* USER CODE BEGIN Init */
//	nvic_init();
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80029a0:	f000 f8c0 	bl	8002b24 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80029a4:	f000 fb2a 	bl	8002ffc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80029a8:	f000 fafe 	bl	8002fa8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80029ac:	f000 f9b2 	bl	8002d14 <MX_TIM2_Init>
	MX_TIM3_Init();
 80029b0:	f000 fa2a 	bl	8002e08 <MX_TIM3_Init>
	MX_I2C1_Init();
 80029b4:	f000 f976 	bl	8002ca4 <MX_I2C1_Init>
	MX_TIM5_Init();
 80029b8:	f000 faa0 	bl	8002efc <MX_TIM5_Init>
	MX_ADC1_Init();
 80029bc:	f000 f920 	bl	8002c00 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	printf("start\n");
 80029c0:	484b      	ldr	r0, [pc, #300]	@ (8002af0 <main+0x168>)
 80029c2:	f00a ff93 	bl	800d8ec <puts>
	i2c_hal_t *hal = bno08x_init_i2c();
 80029c6:	f7ff f9ad 	bl	8001d24 <bno08x_init_i2c>
 80029ca:	6178      	str	r0, [r7, #20]
	if (hal == NULL) {
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <main+0x50>
		printf("error while init!\n");
 80029d2:	4848      	ldr	r0, [pc, #288]	@ (8002af4 <main+0x16c>)
 80029d4:	f00a ff8a 	bl	800d8ec <puts>
	}
	printf("main: bno08x_init_i2c\n");
 80029d8:	4847      	ldr	r0, [pc, #284]	@ (8002af8 <main+0x170>)
 80029da:	f00a ff87 	bl	800d8ec <puts>
	bno08x_open(hal, bno08x_callback);
 80029de:	4947      	ldr	r1, [pc, #284]	@ (8002afc <main+0x174>)
 80029e0:	6978      	ldr	r0, [r7, #20]
 80029e2:	f7fe fc39 	bl	8001258 <bno08x_open>
	printf("main: opened\n");
 80029e6:	4846      	ldr	r0, [pc, #280]	@ (8002b00 <main+0x178>)
 80029e8:	f00a ff80 	bl	800d8ec <puts>

// M0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80029ec:	2100      	movs	r1, #0
 80029ee:	4845      	ldr	r0, [pc, #276]	@ (8002b04 <main+0x17c>)
 80029f0:	f007 f8fe 	bl	8009bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80029f4:	2104      	movs	r1, #4
 80029f6:	4843      	ldr	r0, [pc, #268]	@ (8002b04 <main+0x17c>)
 80029f8:	f007 f8fa 	bl	8009bf0 <HAL_TIM_PWM_Start>

// M1
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80029fc:	2108      	movs	r1, #8
 80029fe:	4841      	ldr	r0, [pc, #260]	@ (8002b04 <main+0x17c>)
 8002a00:	f007 f8f6 	bl	8009bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002a04:	210c      	movs	r1, #12
 8002a06:	483f      	ldr	r0, [pc, #252]	@ (8002b04 <main+0x17c>)
 8002a08:	f007 f8f2 	bl	8009bf0 <HAL_TIM_PWM_Start>

// M3
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002a0c:	2108      	movs	r1, #8
 8002a0e:	483e      	ldr	r0, [pc, #248]	@ (8002b08 <main+0x180>)
 8002a10:	f007 f8ee 	bl	8009bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002a14:	210c      	movs	r1, #12
 8002a16:	483c      	ldr	r0, [pc, #240]	@ (8002b08 <main+0x180>)
 8002a18:	f007 f8ea 	bl	8009bf0 <HAL_TIM_PWM_Start>

// M4
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	483a      	ldr	r0, [pc, #232]	@ (8002b08 <main+0x180>)
 8002a20:	f007 f8e6 	bl	8009bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002a24:	2104      	movs	r1, #4
 8002a26:	4838      	ldr	r0, [pc, #224]	@ (8002b08 <main+0x180>)
 8002a28:	f007 f8e2 	bl	8009bf0 <HAL_TIM_PWM_Start>

	init_line_sensor_vec();
 8002a2c:	f7ff fcc0 	bl	80023b0 <init_line_sensor_vec>

	printf("i'm entering loop\n");
 8002a30:	4836      	ldr	r0, [pc, #216]	@ (8002b0c <main+0x184>)
 8002a32:	f00a ff5b 	bl	800d8ec <puts>

	float_vector2_t v = { x:0, y:0 };
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
	int line_max = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
	while (1) {
//		for (int i = 90; i < 450; i++) {
//			move(i, 512);
//			HAL_Delay(3);
//		}
		bno08x_update();
 8002a46:	f7fe fc31 	bl	80012ac <bno08x_update>

		uint32_t tick = HAL_GetTick();
 8002a4a:	f003 f9b5 	bl	8005db8 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]
		if (tick % MOTOR_OUTPUT_PERIOD == 0) {
//			rotate(-motor_u);
		}

		if (tick % ADC_SMPL_PERIOD == 0) {
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4b2f      	ldr	r3, [pc, #188]	@ (8002b10 <main+0x188>)
 8002a54:	fba3 1302 	umull	r1, r3, r3, r2
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	2164      	movs	r1, #100	@ 0x64
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d11b      	bne.n	8002a9e <main+0x116>
//				int val = read_line_sensor(i);
//				printf("%d,", val);
//			}
//			printf("\n");

			line_sensor_angle(&v, &line_max);
 8002a66:	1d3a      	adds	r2, r7, #4
 8002a68:	f107 0308 	add.w	r3, r7, #8
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fd16 	bl	80024a0 <line_sensor_angle>
			printf("%f, %f, %d\n", v.x, v.y, line_max);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fd86 	bl	8000588 <__aeabi_f2d>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	460d      	mov	r5, r1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd80 	bl	8000588 <__aeabi_f2d>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	9102      	str	r1, [sp, #8]
 8002a90:	e9cd 2300 	strd	r2, r3, [sp]
 8002a94:	4622      	mov	r2, r4
 8002a96:	462b      	mov	r3, r5
 8002a98:	481e      	ldr	r0, [pc, #120]	@ (8002b14 <main+0x18c>)
 8002a9a:	f00a febf 	bl	800d81c <iprintf>
		}

		if (line_max < 1000)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002aa4:	da05      	bge.n	8002ab2 <main+0x12a>
		{
			v.x = 0;
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
			v.y = 0;
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
		}

		moveWorld(v.x * 1000, v.y * 1000, 0, -motor_angle_u);
 8002ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ab6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002b18 <main+0x190>
 8002aba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ac2:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002b18 <main+0x190>
 8002ac6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002aca:	4b14      	ldr	r3, [pc, #80]	@ (8002b1c <main+0x194>)
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	eef1 7a67 	vneg.f32	s15, s15
 8002ad4:	eef0 1a67 	vmov.f32	s3, s15
 8002ad8:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8002b20 <main+0x198>
 8002adc:	eef0 0a66 	vmov.f32	s1, s13
 8002ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae4:	f7ff fb8e 	bl	8002204 <moveWorld>
	while (1) {
 8002ae8:	e7ad      	b.n	8002a46 <main+0xbe>
 8002aea:	bf00      	nop
 8002aec:	2000002c 	.word	0x2000002c
 8002af0:	0800f7c4 	.word	0x0800f7c4
 8002af4:	0800f7cc 	.word	0x0800f7cc
 8002af8:	0800f7e0 	.word	0x0800f7e0
 8002afc:	080027c1 	.word	0x080027c1
 8002b00:	0800f7f8 	.word	0x0800f7f8
 8002b04:	20000380 	.word	0x20000380
 8002b08:	200003c8 	.word	0x200003c8
 8002b0c:	0800f808 	.word	0x0800f808
 8002b10:	51eb851f 	.word	0x51eb851f
 8002b14:	0800f81c 	.word	0x0800f81c
 8002b18:	447a0000 	.word	0x447a0000
 8002b1c:	200004b0 	.word	0x200004b0
 8002b20:	00000000 	.word	0x00000000

08002b24 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b094      	sub	sp, #80	@ 0x50
 8002b28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	2234      	movs	r2, #52	@ 0x34
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f00a fee2 	bl	800d8fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002b38:	f107 0308 	add.w	r3, r7, #8
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	2300      	movs	r3, #0
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf8 <SystemClock_Config+0xd4>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	4a29      	ldr	r2, [pc, #164]	@ (8002bf8 <SystemClock_Config+0xd4>)
 8002b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b58:	4b27      	ldr	r3, [pc, #156]	@ (8002bf8 <SystemClock_Config+0xd4>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b64:	2300      	movs	r3, #0
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4b24      	ldr	r3, [pc, #144]	@ (8002bfc <SystemClock_Config+0xd8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b70:	4a22      	ldr	r2, [pc, #136]	@ (8002bfc <SystemClock_Config+0xd8>)
 8002b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b20      	ldr	r3, [pc, #128]	@ (8002bfc <SystemClock_Config+0xd8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b84:	2302      	movs	r3, #2
 8002b86:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b8c:	2310      	movs	r3, #16
 8002b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b90:	2302      	movs	r3, #2
 8002b92:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b94:	2300      	movs	r3, #0
 8002b96:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002b98:	2310      	movs	r3, #16
 8002b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002b9c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002ba0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002baa:	2302      	movs	r3, #2
 8002bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002bae:	f107 031c 	add.w	r3, r7, #28
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f006 fc1e 	bl	80093f4 <HAL_RCC_OscConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <SystemClock_Config+0x9e>
		Error_Handler();
 8002bbe:	f000 fab9 	bl	8003134 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002bc2:	230f      	movs	r3, #15
 8002bc4:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bd2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002bd8:	f107 0308 	add.w	r3, r7, #8
 8002bdc:	2102      	movs	r1, #2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f006 f8be 	bl	8008d60 <HAL_RCC_ClockConfig>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <SystemClock_Config+0xca>
		Error_Handler();
 8002bea:	f000 faa3 	bl	8003134 <Error_Handler>
	}
}
 8002bee:	bf00      	nop
 8002bf0:	3750      	adds	r7, #80	@ 0x50
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40007000 	.word	0x40007000

08002c00 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002c06:	463b      	mov	r3, r7
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002c12:	4b21      	ldr	r3, [pc, #132]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c14:	4a21      	ldr	r2, [pc, #132]	@ (8002c9c <MX_ADC1_Init+0x9c>)
 8002c16:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c18:	4b1f      	ldr	r3, [pc, #124]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c1e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8002c26:	4b1c      	ldr	r3, [pc, #112]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c32:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c3a:	4b17      	ldr	r3, [pc, #92]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c40:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c42:	4a17      	ldr	r2, [pc, #92]	@ (8002ca0 <MX_ADC1_Init+0xa0>)
 8002c44:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c46:	4b14      	ldr	r3, [pc, #80]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002c4c:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002c60:	480d      	ldr	r0, [pc, #52]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c62:	f003 f8b5 	bl	8005dd0 <HAL_ADC_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_ADC1_Init+0x70>
		Error_Handler();
 8002c6c:	f000 fa62 	bl	8003134 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8002c70:	230a      	movs	r3, #10
 8002c72:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002c74:	2301      	movs	r3, #1
 8002c76:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4805      	ldr	r0, [pc, #20]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c82:	f003 fa87 	bl	8006194 <HAL_ADC_ConfigChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_ADC1_Init+0x90>
		Error_Handler();
 8002c8c:	f000 fa52 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	200002e4 	.word	0x200002e4
 8002c9c:	40012000 	.word	0x40012000
 8002ca0:	0f000001 	.word	0x0f000001

08002ca4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_Init 0 */
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */
	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	@ (8002d08 <MX_I2C1_Init+0x64>)
 8002caa:	4a18      	ldr	r2, [pc, #96]	@ (8002d0c <MX_I2C1_Init+0x68>)
 8002cac:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8002cae:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <MX_I2C1_Init+0x64>)
 8002cb0:	4a17      	ldr	r2, [pc, #92]	@ (8002d10 <MX_I2C1_Init+0x6c>)
 8002cb2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cb4:	4b14      	ldr	r3, [pc, #80]	@ (8002d08 <MX_I2C1_Init+0x64>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002cba:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <MX_I2C1_Init+0x64>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <MX_I2C1_Init+0x64>)
 8002cc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cc6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <MX_I2C1_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <MX_I2C1_Init+0x64>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <MX_I2C1_Init+0x64>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <MX_I2C1_Init+0x64>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002ce0:	4809      	ldr	r0, [pc, #36]	@ (8002d08 <MX_I2C1_Init+0x64>)
 8002ce2:	f004 f8b3 	bl	8006e4c <HAL_I2C_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002cec:	f000 fa22 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2105      	movs	r1, #5
 8002cf4:	201f      	movs	r0, #31
 8002cf6:	f003 fd7a 	bl	80067ee <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2105      	movs	r1, #5
 8002cfe:	2020      	movs	r0, #32
 8002d00:	f003 fd75 	bl	80067ee <HAL_NVIC_SetPriority>
	/* USER CODE END I2C1_Init 2 */

}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	2000032c 	.word	0x2000032c
 8002d0c:	40005400 	.word	0x40005400
 8002d10:	00061a80 	.word	0x00061a80

08002d14 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	@ 0x28
 8002d18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002d1a:	f107 0320 	add.w	r3, r7, #32
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	60da      	str	r2, [r3, #12]
 8002d30:	611a      	str	r2, [r3, #16]
 8002d32:	615a      	str	r2, [r3, #20]
 8002d34:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002d36:	4b33      	ldr	r3, [pc, #204]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002d38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d3c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002d3e:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d44:	4b2f      	ldr	r3, [pc, #188]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 449;
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002d4c:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8002d50:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d52:	4b2c      	ldr	r3, [pc, #176]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d58:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002d5e:	4829      	ldr	r0, [pc, #164]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002d60:	f006 fef7 	bl	8009b52 <HAL_TIM_PWM_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM2_Init+0x5a>
		Error_Handler();
 8002d6a:	f000 f9e3 	bl	8003134 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002d76:	f107 0320 	add.w	r3, r7, #32
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4821      	ldr	r0, [pc, #132]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002d7e:	f007 fb9f 	bl	800a4c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8002d88:	f000 f9d4 	bl	8003134 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d8c:	2360      	movs	r3, #96	@ 0x60
 8002d8e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4619      	mov	r1, r3
 8002da2:	4818      	ldr	r0, [pc, #96]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002da4:	f007 f848 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8002dae:	f000 f9c1 	bl	8003134 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	2204      	movs	r2, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	4812      	ldr	r0, [pc, #72]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002dba:	f007 f83d 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8002dc4:	f000 f9b6 	bl	8003134 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	2208      	movs	r2, #8
 8002dcc:	4619      	mov	r1, r3
 8002dce:	480d      	ldr	r0, [pc, #52]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002dd0:	f007 f832 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM2_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8002dda:	f000 f9ab 	bl	8003134 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	220c      	movs	r2, #12
 8002de2:	4619      	mov	r1, r3
 8002de4:	4807      	ldr	r0, [pc, #28]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002de6:	f007 f827 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM2_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8002df0:	f000 f9a0 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002df4:	4803      	ldr	r0, [pc, #12]	@ (8002e04 <MX_TIM2_Init+0xf0>)
 8002df6:	f000 faed 	bl	80033d4 <HAL_TIM_MspPostInit>

}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	@ 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000380 	.word	0x20000380

08002e08 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	@ 0x28
 8002e0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002e0e:	f107 0320 	add.w	r3, r7, #32
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	611a      	str	r2, [r3, #16]
 8002e26:	615a      	str	r2, [r3, #20]
 8002e28:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002e2a:	4b32      	ldr	r3, [pc, #200]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002e2c:	4a32      	ldr	r2, [pc, #200]	@ (8002ef8 <MX_TIM3_Init+0xf0>)
 8002e2e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002e30:	4b30      	ldr	r3, [pc, #192]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e36:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 449;
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002e3e:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8002e42:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e44:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002e50:	4828      	ldr	r0, [pc, #160]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002e52:	f006 fe7e 	bl	8009b52 <HAL_TIM_PWM_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM3_Init+0x58>
		Error_Handler();
 8002e5c:	f000 f96a 	bl	8003134 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e60:	2300      	movs	r3, #0
 8002e62:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002e68:	f107 0320 	add.w	r3, r7, #32
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4821      	ldr	r0, [pc, #132]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002e70:	f007 fb26 	bl	800a4c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8002e7a:	f000 f95b 	bl	8003134 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e7e:	2360      	movs	r3, #96	@ 0x60
 8002e80:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	2200      	movs	r2, #0
 8002e92:	4619      	mov	r1, r3
 8002e94:	4817      	ldr	r0, [pc, #92]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002e96:	f006 ffcf 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8002ea0:	f000 f948 	bl	8003134 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4812      	ldr	r0, [pc, #72]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002eac:	f006 ffc4 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8002eb6:	f000 f93d 	bl	8003134 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	480c      	ldr	r0, [pc, #48]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002ec2:	f006 ffb9 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM3_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8002ecc:	f000 f932 	bl	8003134 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4807      	ldr	r0, [pc, #28]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002ed8:	f006 ffae 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM3_Init+0xde>
			!= HAL_OK) {
		Error_Handler();
 8002ee2:	f000 f927 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002ee6:	4803      	ldr	r0, [pc, #12]	@ (8002ef4 <MX_TIM3_Init+0xec>)
 8002ee8:	f000 fa74 	bl	80033d4 <HAL_TIM_MspPostInit>

}
 8002eec:	bf00      	nop
 8002eee:	3728      	adds	r7, #40	@ 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	200003c8 	.word	0x200003c8
 8002ef8:	40000400 	.word	0x40000400

08002efc <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	@ 0x28
 8002f00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002f02:	f107 0320 	add.w	r3, r7, #32
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	611a      	str	r2, [r3, #16]
 8002f1a:	615a      	str	r2, [r3, #20]
 8002f1c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002f1e:	4b20      	ldr	r3, [pc, #128]	@ (8002fa0 <MX_TIM5_Init+0xa4>)
 8002f20:	4a20      	ldr	r2, [pc, #128]	@ (8002fa4 <MX_TIM5_Init+0xa8>)
 8002f22:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002f24:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa0 <MX_TIM5_Init+0xa4>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <MX_TIM5_Init+0xa4>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8002f30:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <MX_TIM5_Init+0xa4>)
 8002f32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f36:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <MX_TIM5_Init+0xa4>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3e:	4b18      	ldr	r3, [pc, #96]	@ (8002fa0 <MX_TIM5_Init+0xa4>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim5) != HAL_OK) {
 8002f44:	4816      	ldr	r0, [pc, #88]	@ (8002fa0 <MX_TIM5_Init+0xa4>)
 8002f46:	f006 fdb5 	bl	8009ab4 <HAL_TIM_OC_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM5_Init+0x58>
		Error_Handler();
 8002f50:	f000 f8f0 	bl	8003134 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f54:	2300      	movs	r3, #0
 8002f56:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002f5c:	f107 0320 	add.w	r3, r7, #32
 8002f60:	4619      	mov	r1, r3
 8002f62:	480f      	ldr	r0, [pc, #60]	@ (8002fa0 <MX_TIM5_Init+0xa4>)
 8002f64:	f007 faac 	bl	800a4c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_TIM5_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8002f6e:	f000 f8e1 	bl	8003134 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	2200      	movs	r2, #0
 8002f86:	4619      	mov	r1, r3
 8002f88:	4805      	ldr	r0, [pc, #20]	@ (8002fa0 <MX_TIM5_Init+0xa4>)
 8002f8a:	f006 fef9 	bl	8009d80 <HAL_TIM_OC_ConfigChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM5_Init+0x9c>
		Error_Handler();
 8002f94:	f000 f8ce 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	@ 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000410 	.word	0x20000410
 8002fa4:	40000c00 	.word	0x40000c00

08002fa8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <MX_USART2_UART_Init+0x4c>)
 8002fae:	4a12      	ldr	r2, [pc, #72]	@ (8002ff8 <MX_USART2_UART_Init+0x50>)
 8002fb0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <MX_USART2_UART_Init+0x4c>)
 8002fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fb8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fba:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff4 <MX_USART2_UART_Init+0x4c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <MX_USART2_UART_Init+0x4c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <MX_USART2_UART_Init+0x4c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002fcc:	4b09      	ldr	r3, [pc, #36]	@ (8002ff4 <MX_USART2_UART_Init+0x4c>)
 8002fce:	220c      	movs	r2, #12
 8002fd0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd2:	4b08      	ldr	r3, [pc, #32]	@ (8002ff4 <MX_USART2_UART_Init+0x4c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <MX_USART2_UART_Init+0x4c>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002fde:	4805      	ldr	r0, [pc, #20]	@ (8002ff4 <MX_USART2_UART_Init+0x4c>)
 8002fe0:	f007 faea 	bl	800a5b8 <HAL_UART_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002fea:	f000 f8a3 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000458 	.word	0x20000458
 8002ff8:	40004400 	.word	0x40004400

08002ffc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	@ 0x28
 8003000:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	60da      	str	r2, [r3, #12]
 8003010:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	4b39      	ldr	r3, [pc, #228]	@ (80030fc <MX_GPIO_Init+0x100>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	4a38      	ldr	r2, [pc, #224]	@ (80030fc <MX_GPIO_Init+0x100>)
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6313      	str	r3, [r2, #48]	@ 0x30
 8003022:	4b36      	ldr	r3, [pc, #216]	@ (80030fc <MX_GPIO_Init+0x100>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	4b32      	ldr	r3, [pc, #200]	@ (80030fc <MX_GPIO_Init+0x100>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	4a31      	ldr	r2, [pc, #196]	@ (80030fc <MX_GPIO_Init+0x100>)
 8003038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800303c:	6313      	str	r3, [r2, #48]	@ 0x30
 800303e:	4b2f      	ldr	r3, [pc, #188]	@ (80030fc <MX_GPIO_Init+0x100>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	4b2b      	ldr	r3, [pc, #172]	@ (80030fc <MX_GPIO_Init+0x100>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	4a2a      	ldr	r2, [pc, #168]	@ (80030fc <MX_GPIO_Init+0x100>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6313      	str	r3, [r2, #48]	@ 0x30
 800305a:	4b28      	ldr	r3, [pc, #160]	@ (80030fc <MX_GPIO_Init+0x100>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <MX_GPIO_Init+0x100>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	4a23      	ldr	r2, [pc, #140]	@ (80030fc <MX_GPIO_Init+0x100>)
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	6313      	str	r3, [r2, #48]	@ 0x30
 8003076:	4b21      	ldr	r3, [pc, #132]	@ (80030fc <MX_GPIO_Init+0x100>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	607b      	str	r3, [r7, #4]
 8003080:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | Line_A_Pin | Line_B_Pin | Line_C_Pin,
 8003082:	2200      	movs	r2, #0
 8003084:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8003088:	481d      	ldr	r0, [pc, #116]	@ (8003100 <MX_GPIO_Init+0x104>)
 800308a:	f003 fead 	bl	8006de8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BNO_BOOT_Pin | BNO_RST_Pin, GPIO_PIN_RESET);
 800308e:	2200      	movs	r2, #0
 8003090:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003094:	481b      	ldr	r0, [pc, #108]	@ (8003104 <MX_GPIO_Init+0x108>)
 8003096:	f003 fea7 	bl	8006de8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800309a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800309e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030a0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80030a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80030aa:	f107 0314 	add.w	r3, r7, #20
 80030ae:	4619      	mov	r1, r3
 80030b0:	4815      	ldr	r0, [pc, #84]	@ (8003108 <MX_GPIO_Init+0x10c>)
 80030b2:	f003 fc11 	bl	80068d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin Line_A_Pin Line_B_Pin Line_C_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | Line_A_Pin | Line_B_Pin | Line_C_Pin;
 80030b6:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 80030ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030bc:	2301      	movs	r3, #1
 80030be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	4619      	mov	r1, r3
 80030ce:	480c      	ldr	r0, [pc, #48]	@ (8003100 <MX_GPIO_Init+0x104>)
 80030d0:	f003 fc02 	bl	80068d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BNO_BOOT_Pin BNO_RST_Pin */
	GPIO_InitStruct.Pin = BNO_BOOT_Pin | BNO_RST_Pin;
 80030d4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80030d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030da:	2301      	movs	r3, #1
 80030dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	2300      	movs	r3, #0
 80030e4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e6:	f107 0314 	add.w	r3, r7, #20
 80030ea:	4619      	mov	r1, r3
 80030ec:	4805      	ldr	r0, [pc, #20]	@ (8003104 <MX_GPIO_Init+0x108>)
 80030ee:	f003 fbf3 	bl	80068d8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80030f2:	bf00      	nop
 80030f4:	3728      	adds	r7, #40	@ 0x28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	40020000 	.word	0x40020000
 8003104:	40020400 	.word	0x40020400
 8003108:	40020800 	.word	0x40020800

0800310c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 10);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	b29a      	uxth	r2, r3
 800311c:	230a      	movs	r3, #10
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	4803      	ldr	r0, [pc, #12]	@ (8003130 <_write+0x24>)
 8003122:	f007 fa99 	bl	800a658 <HAL_UART_Transmit>
	return len;
 8003126:	687b      	ldr	r3, [r7, #4]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000458 	.word	0x20000458

08003134 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003138:	b672      	cpsid	i
}
 800313a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		printf("Error_Handler\n");
 800313c:	4801      	ldr	r0, [pc, #4]	@ (8003144 <Error_Handler+0x10>)
 800313e:	f00a fbd5 	bl	800d8ec <puts>
 8003142:	e7fb      	b.n	800313c <Error_Handler+0x8>
 8003144:	0800f828 	.word	0x0800f828

08003148 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	4b10      	ldr	r3, [pc, #64]	@ (8003194 <HAL_MspInit+0x4c>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	4a0f      	ldr	r2, [pc, #60]	@ (8003194 <HAL_MspInit+0x4c>)
 8003158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800315c:	6453      	str	r3, [r2, #68]	@ 0x44
 800315e:	4b0d      	ldr	r3, [pc, #52]	@ (8003194 <HAL_MspInit+0x4c>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <HAL_MspInit+0x4c>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	4a08      	ldr	r2, [pc, #32]	@ (8003194 <HAL_MspInit+0x4c>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003178:	6413      	str	r3, [r2, #64]	@ 0x40
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_MspInit+0x4c>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003186:	2007      	movs	r0, #7
 8003188:	f003 fb26 	bl	80067d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40023800 	.word	0x40023800

08003198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	@ 0x28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a17      	ldr	r2, [pc, #92]	@ (8003214 <HAL_ADC_MspInit+0x7c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d127      	bne.n	800320a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	4b16      	ldr	r3, [pc, #88]	@ (8003218 <HAL_ADC_MspInit+0x80>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	4a15      	ldr	r2, [pc, #84]	@ (8003218 <HAL_ADC_MspInit+0x80>)
 80031c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ca:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <HAL_ADC_MspInit+0x80>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	4b0f      	ldr	r3, [pc, #60]	@ (8003218 <HAL_ADC_MspInit+0x80>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	4a0e      	ldr	r2, [pc, #56]	@ (8003218 <HAL_ADC_MspInit+0x80>)
 80031e0:	f043 0304 	orr.w	r3, r3, #4
 80031e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <HAL_ADC_MspInit+0x80>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = LineADC_A_Pin|LineADC_B_Pin;
 80031f2:	2303      	movs	r3, #3
 80031f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031f6:	2303      	movs	r3, #3
 80031f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fe:	f107 0314 	add.w	r3, r7, #20
 8003202:	4619      	mov	r1, r3
 8003204:	4805      	ldr	r0, [pc, #20]	@ (800321c <HAL_ADC_MspInit+0x84>)
 8003206:	f003 fb67 	bl	80068d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800320a:	bf00      	nop
 800320c:	3728      	adds	r7, #40	@ 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40012000 	.word	0x40012000
 8003218:	40023800 	.word	0x40023800
 800321c:	40020800 	.word	0x40020800

08003220 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	@ 0x28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a21      	ldr	r2, [pc, #132]	@ (80032c4 <HAL_I2C_MspInit+0xa4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d13c      	bne.n	80032bc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	4b20      	ldr	r3, [pc, #128]	@ (80032c8 <HAL_I2C_MspInit+0xa8>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	4a1f      	ldr	r2, [pc, #124]	@ (80032c8 <HAL_I2C_MspInit+0xa8>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	6313      	str	r3, [r2, #48]	@ 0x30
 8003252:	4b1d      	ldr	r3, [pc, #116]	@ (80032c8 <HAL_I2C_MspInit+0xa8>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800325e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003264:	2312      	movs	r3, #18
 8003266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326c:	2303      	movs	r3, #3
 800326e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003270:	2304      	movs	r3, #4
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	4619      	mov	r1, r3
 800327a:	4814      	ldr	r0, [pc, #80]	@ (80032cc <HAL_I2C_MspInit+0xac>)
 800327c:	f003 fb2c 	bl	80068d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <HAL_I2C_MspInit+0xa8>)
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	4a0f      	ldr	r2, [pc, #60]	@ (80032c8 <HAL_I2C_MspInit+0xa8>)
 800328a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800328e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003290:	4b0d      	ldr	r3, [pc, #52]	@ (80032c8 <HAL_I2C_MspInit+0xa8>)
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800329c:	2200      	movs	r2, #0
 800329e:	2100      	movs	r1, #0
 80032a0:	201f      	movs	r0, #31
 80032a2:	f003 faa4 	bl	80067ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80032a6:	201f      	movs	r0, #31
 80032a8:	f003 fabd 	bl	8006826 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2100      	movs	r1, #0
 80032b0:	2020      	movs	r0, #32
 80032b2:	f003 fa9c 	bl	80067ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80032b6:	2020      	movs	r0, #32
 80032b8:	f003 fab5 	bl	8006826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032bc:	bf00      	nop
 80032be:	3728      	adds	r7, #40	@ 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40005400 	.word	0x40005400
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020400 	.word	0x40020400

080032d0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003318 <HAL_I2C_MspDeInit+0x48>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d115      	bne.n	800330e <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80032e2:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <HAL_I2C_MspDeInit+0x4c>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	4a0d      	ldr	r2, [pc, #52]	@ (800331c <HAL_I2C_MspDeInit+0x4c>)
 80032e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032ec:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80032ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032f2:	480b      	ldr	r0, [pc, #44]	@ (8003320 <HAL_I2C_MspDeInit+0x50>)
 80032f4:	f003 fc84 	bl	8006c00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80032f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032fc:	4808      	ldr	r0, [pc, #32]	@ (8003320 <HAL_I2C_MspDeInit+0x50>)
 80032fe:	f003 fc7f 	bl	8006c00 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003302:	201f      	movs	r0, #31
 8003304:	f003 fa9d 	bl	8006842 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003308:	2020      	movs	r0, #32
 800330a:	f003 fa9a 	bl	8006842 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40005400 	.word	0x40005400
 800331c:	40023800 	.word	0x40023800
 8003320:	40020400 	.word	0x40020400

08003324 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003334:	d10e      	bne.n	8003354 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <HAL_TIM_PWM_MspInit+0x64>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	4a12      	ldr	r2, [pc, #72]	@ (8003388 <HAL_TIM_PWM_MspInit+0x64>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6413      	str	r3, [r2, #64]	@ 0x40
 8003346:	4b10      	ldr	r3, [pc, #64]	@ (8003388 <HAL_TIM_PWM_MspInit+0x64>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003352:	e012      	b.n	800337a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0c      	ldr	r2, [pc, #48]	@ (800338c <HAL_TIM_PWM_MspInit+0x68>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10d      	bne.n	800337a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_TIM_PWM_MspInit+0x64>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	4a08      	ldr	r2, [pc, #32]	@ (8003388 <HAL_TIM_PWM_MspInit+0x64>)
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	6413      	str	r3, [r2, #64]	@ 0x40
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_TIM_PWM_MspInit+0x64>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	40000400 	.word	0x40000400

08003390 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0b      	ldr	r2, [pc, #44]	@ (80033cc <HAL_TIM_OC_MspInit+0x3c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10d      	bne.n	80033be <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <HAL_TIM_OC_MspInit+0x40>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	4a09      	ldr	r2, [pc, #36]	@ (80033d0 <HAL_TIM_OC_MspInit+0x40>)
 80033ac:	f043 0308 	orr.w	r3, r3, #8
 80033b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b2:	4b07      	ldr	r3, [pc, #28]	@ (80033d0 <HAL_TIM_OC_MspInit+0x40>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40023800 	.word	0x40023800

080033d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f4:	d13e      	bne.n	8003474 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	4b32      	ldr	r3, [pc, #200]	@ (80034c4 <HAL_TIM_MspPostInit+0xf0>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	4a31      	ldr	r2, [pc, #196]	@ (80034c4 <HAL_TIM_MspPostInit+0xf0>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6313      	str	r3, [r2, #48]	@ 0x30
 8003406:	4b2f      	ldr	r3, [pc, #188]	@ (80034c4 <HAL_TIM_MspPostInit+0xf0>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b2b      	ldr	r3, [pc, #172]	@ (80034c4 <HAL_TIM_MspPostInit+0xf0>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341a:	4a2a      	ldr	r2, [pc, #168]	@ (80034c4 <HAL_TIM_MspPostInit+0xf0>)
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	6313      	str	r3, [r2, #48]	@ 0x30
 8003422:	4b28      	ldr	r3, [pc, #160]	@ (80034c4 <HAL_TIM_MspPostInit+0xf0>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = M0_B_Pin|M0_A_Pin;
 800342e:	f248 0302 	movw	r3, #32770	@ 0x8002
 8003432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	2300      	movs	r3, #0
 800343e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003440:	2301      	movs	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4619      	mov	r1, r3
 800344a:	481f      	ldr	r0, [pc, #124]	@ (80034c8 <HAL_TIM_MspPostInit+0xf4>)
 800344c:	f003 fa44 	bl	80068d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_A_Pin|M1_B_Pin;
 8003450:	f240 4304 	movw	r3, #1028	@ 0x404
 8003454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	2302      	movs	r3, #2
 8003458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345e:	2300      	movs	r3, #0
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003462:	2301      	movs	r3, #1
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003466:	f107 0314 	add.w	r3, r7, #20
 800346a:	4619      	mov	r1, r3
 800346c:	4817      	ldr	r0, [pc, #92]	@ (80034cc <HAL_TIM_MspPostInit+0xf8>)
 800346e:	f003 fa33 	bl	80068d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003472:	e023      	b.n	80034bc <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM3)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a15      	ldr	r2, [pc, #84]	@ (80034d0 <HAL_TIM_MspPostInit+0xfc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d11e      	bne.n	80034bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <HAL_TIM_MspPostInit+0xf0>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	4a0f      	ldr	r2, [pc, #60]	@ (80034c4 <HAL_TIM_MspPostInit+0xf0>)
 8003488:	f043 0304 	orr.w	r3, r3, #4
 800348c:	6313      	str	r3, [r2, #48]	@ 0x30
 800348e:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <HAL_TIM_MspPostInit+0xf0>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3_A_Pin|M3_B_Pin|M2_A_Pin|M2_B_Pin;
 800349a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800349e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a8:	2300      	movs	r3, #0
 80034aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034ac:	2302      	movs	r3, #2
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	4619      	mov	r1, r3
 80034b6:	4807      	ldr	r0, [pc, #28]	@ (80034d4 <HAL_TIM_MspPostInit+0x100>)
 80034b8:	f003 fa0e 	bl	80068d8 <HAL_GPIO_Init>
}
 80034bc:	bf00      	nop
 80034be:	3728      	adds	r7, #40	@ 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40020000 	.word	0x40020000
 80034cc:	40020400 	.word	0x40020400
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40020800 	.word	0x40020800

080034d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	@ 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a19      	ldr	r2, [pc, #100]	@ (800355c <HAL_UART_MspInit+0x84>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d12b      	bne.n	8003552 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	4b18      	ldr	r3, [pc, #96]	@ (8003560 <HAL_UART_MspInit+0x88>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	4a17      	ldr	r2, [pc, #92]	@ (8003560 <HAL_UART_MspInit+0x88>)
 8003504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003508:	6413      	str	r3, [r2, #64]	@ 0x40
 800350a:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <HAL_UART_MspInit+0x88>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b11      	ldr	r3, [pc, #68]	@ (8003560 <HAL_UART_MspInit+0x88>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	4a10      	ldr	r2, [pc, #64]	@ (8003560 <HAL_UART_MspInit+0x88>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6313      	str	r3, [r2, #48]	@ 0x30
 8003526:	4b0e      	ldr	r3, [pc, #56]	@ (8003560 <HAL_UART_MspInit+0x88>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003532:	230c      	movs	r3, #12
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353e:	2303      	movs	r3, #3
 8003540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003542:	2307      	movs	r3, #7
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	4805      	ldr	r0, [pc, #20]	@ (8003564 <HAL_UART_MspInit+0x8c>)
 800354e:	f003 f9c3 	bl	80068d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	@ 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40004400 	.word	0x40004400
 8003560:	40023800 	.word	0x40023800
 8003564:	40020000 	.word	0x40020000

08003568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <NMI_Handler+0x4>

08003570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <HardFault_Handler+0x4>

08003578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <MemManage_Handler+0x4>

08003580 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <BusFault_Handler+0x4>

08003588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <UsageFault_Handler+0x4>

08003590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035be:	f002 fbe7 	bl	8005d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
//	printf("I2C1_EV_IRQHandler\n");
  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80035cc:	4802      	ldr	r0, [pc, #8]	@ (80035d8 <I2C1_EV_IRQHandler+0x10>)
 80035ce:	f003 ff11 	bl	80073f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */
//
  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2000032c 	.word	0x2000032c

080035dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */
//	printf("I2C1_ER_IRQHandler\n");
  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80035e0:	4802      	ldr	r0, [pc, #8]	@ (80035ec <I2C1_ER_IRQHandler+0x10>)
 80035e2:	f004 f85a 	bl	800769a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */
//
  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	2000032c 	.word	0x2000032c

080035f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return 1;
 80035f4:	2301      	movs	r3, #1
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <_kill>:

int _kill(int pid, int sig)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800360a:	f00a f9b5 	bl	800d978 <__errno>
 800360e:	4603      	mov	r3, r0
 8003610:	2216      	movs	r2, #22
 8003612:	601a      	str	r2, [r3, #0]
  return -1;
 8003614:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <_exit>:

void _exit (int status)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003628:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ffe7 	bl	8003600 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003632:	bf00      	nop
 8003634:	e7fd      	b.n	8003632 <_exit+0x12>

08003636 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e00a      	b.n	800365e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003648:	f3af 8000 	nop.w
 800364c:	4601      	mov	r1, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	60ba      	str	r2, [r7, #8]
 8003654:	b2ca      	uxtb	r2, r1
 8003656:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	3301      	adds	r3, #1
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	dbf0      	blt.n	8003648 <_read+0x12>
  }

  return len;
 8003666:	687b      	ldr	r3, [r7, #4]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003698:	605a      	str	r2, [r3, #4]
  return 0;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <_isatty>:

int _isatty(int file)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036b0:	2301      	movs	r3, #1
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036e0:	4a14      	ldr	r2, [pc, #80]	@ (8003734 <_sbrk+0x5c>)
 80036e2:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <_sbrk+0x60>)
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036ec:	4b13      	ldr	r3, [pc, #76]	@ (800373c <_sbrk+0x64>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036f4:	4b11      	ldr	r3, [pc, #68]	@ (800373c <_sbrk+0x64>)
 80036f6:	4a12      	ldr	r2, [pc, #72]	@ (8003740 <_sbrk+0x68>)
 80036f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036fa:	4b10      	ldr	r3, [pc, #64]	@ (800373c <_sbrk+0x64>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	429a      	cmp	r2, r3
 8003706:	d207      	bcs.n	8003718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003708:	f00a f936 	bl	800d978 <__errno>
 800370c:	4603      	mov	r3, r0
 800370e:	220c      	movs	r2, #12
 8003710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003716:	e009      	b.n	800372c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003718:	4b08      	ldr	r3, [pc, #32]	@ (800373c <_sbrk+0x64>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800371e:	4b07      	ldr	r3, [pc, #28]	@ (800373c <_sbrk+0x64>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	4a05      	ldr	r2, [pc, #20]	@ (800373c <_sbrk+0x64>)
 8003728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800372a:	68fb      	ldr	r3, [r7, #12]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20020000 	.word	0x20020000
 8003738:	00000400 	.word	0x00000400
 800373c:	20000548 	.word	0x20000548
 8003740:	20001150 	.word	0x20001150

08003744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003748:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <SystemInit+0x20>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374e:	4a05      	ldr	r2, [pc, #20]	@ (8003764 <SystemInit+0x20>)
 8003750:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003754:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <opStart+0x18>
 800377a:	f06f 0302 	mvn.w	r3, #2
 800377e:	e014      	b.n	80037aa <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
 8003794:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	61da      	str	r2, [r3, #28]
    }

    return rc;
 80037a8:	68fb      	ldr	r3, [r7, #12]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	4613      	mov	r3, r2
 80037be:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d006      	beq.n	80037e0 <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	88fa      	ldrh	r2, [r7, #6]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	4798      	blx	r3
    }
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00f      	beq.n	800383c <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 8003830:	e004      	b.n	800383c <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 8003832:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff ffd6 	bl	80037e8 <opCompleted>
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e00f      	b.n	8003874 <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 8003854:	4a0c      	ldr	r2, [pc, #48]	@ (8003888 <getReportLen+0x44>)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800385c:	79fa      	ldrb	r2, [r7, #7]
 800385e:	429a      	cmp	r2, r3
 8003860:	d105      	bne.n	800386e <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 8003862:	4a09      	ldr	r2, [pc, #36]	@ (8003888 <getReportLen+0x44>)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	785b      	ldrb	r3, [r3, #1]
 800386c:	e006      	b.n	800387c <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3301      	adds	r3, #1
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b2f      	cmp	r3, #47	@ 0x2f
 8003878:	d9ec      	bls.n	8003854 <getReportLen+0x10>
        }
    }

    return 0;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	0800f868 	.word	0x0800f868

0800388c <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	@ 0x28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	4613      	mov	r3, r2
 800389a:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint32_t count = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 8094 	bne.w	80039dc <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        return;
 80038c2:	e090      	b.n	80039e6 <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	3301      	adds	r3, #1
 80038c8:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 80038ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	4413      	add	r3, r2
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff ffb4 	bl	8003844 <getReportLen>
 80038dc:	4603      	mov	r3, r0
 80038de:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 80038e0:	7dbb      	ldrb	r3, [r7, #22]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d107      	bne.n	80038f6 <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
            return;
 80038f4:	e077      	b.n	80039e6 <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	2bf1      	cmp	r3, #241	@ 0xf1
 80038fa:	d107      	bne.n	800390c <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 80038fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	4413      	add	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	789b      	ldrb	r3, [r3, #2]
 8003908:	2b84      	cmp	r3, #132	@ 0x84
 800390a:	e059      	b.n	80039c0 <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2bfc      	cmp	r3, #252	@ 0xfc
 8003910:	d156      	bne.n	80039c0 <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003916:	2b00      	cmp	r3, #0
 8003918:	d052      	beq.n	80039c0 <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 800391a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	4413      	add	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 8003922:	4b32      	ldr	r3, [pc, #200]	@ (80039ec <sensorhubControlHdlr+0x160>)
 8003924:	2202      	movs	r2, #2
 8003926:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	785a      	ldrb	r2, [r3, #1]
 800392c:	4b2f      	ldr	r3, [pc, #188]	@ (80039ec <sensorhubControlHdlr+0x160>)
 800392e:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	789b      	ldrb	r3, [r3, #2]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 8003942:	4b2a      	ldr	r3, [pc, #168]	@ (80039ec <sensorhubControlHdlr+0x160>)
 8003944:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	789b      	ldrb	r3, [r3, #2]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	bf14      	ite	ne
 8003952:	2301      	movne	r3, #1
 8003954:	2300      	moveq	r3, #0
 8003956:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 8003958:	4b24      	ldr	r3, [pc, #144]	@ (80039ec <sensorhubControlHdlr+0x160>)
 800395a:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	789b      	ldrb	r3, [r3, #2]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 800396e:	4b1f      	ldr	r3, [pc, #124]	@ (80039ec <sensorhubControlHdlr+0x160>)
 8003970:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	789b      	ldrb	r3, [r3, #2]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 8003984:	4b19      	ldr	r3, [pc, #100]	@ (80039ec <sensorhubControlHdlr+0x160>)
 8003986:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800398e:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 8003990:	4b16      	ldr	r3, [pc, #88]	@ (80039ec <sensorhubControlHdlr+0x160>)
 8003992:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 800399a:	4a14      	ldr	r2, [pc, #80]	@ (80039ec <sensorhubControlHdlr+0x160>)
 800399c:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 80039a4:	4a11      	ldr	r2, [pc, #68]	@ (80039ec <sensorhubControlHdlr+0x160>)
 80039a6:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 80039ae:	4a0f      	ldr	r2, [pc, #60]	@ (80039ec <sensorhubControlHdlr+0x160>)
 80039b0:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039ba:	490c      	ldr	r1, [pc, #48]	@ (80039ec <sensorhubControlHdlr+0x160>)
 80039bc:	4610      	mov	r0, r2
 80039be:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 80039c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	4413      	add	r3, r2
 80039c6:	7dba      	ldrb	r2, [r7, #22]
 80039c8:	b292      	uxth	r2, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	69f8      	ldr	r0, [r7, #28]
 80039ce:	f7ff fef0 	bl	80037b2 <opRx>
            cursor += reportLen;
 80039d2:	7dbb      	ldrb	r3, [r7, #22]
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80039d8:	4413      	add	r3, r2
 80039da:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (cursor < len) {
 80039dc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	f4ff af6f 	bcc.w	80038c4 <sensorhubControlHdlr+0x38>
        }
    }
}
 80039e6:	3728      	adds	r7, #40	@ 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	200006c4 	.word	0x200006c4

080039f0 <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4798      	blx	r3
 8003a10:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 8003a12:	6839      	ldr	r1, [r7, #0]
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fea7 	bl	8003768 <opStart>
 8003a1a:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <opProcess+0x36>
        return status;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	e034      	b.n	8003a90 <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 8003a2a:	e015      	b.n	8003a58 <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a3a:	621a      	str	r2, [r3, #32]
            break;
 8003a3c:	e01b      	b.n	8003a76 <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 f901 	bl	8005c4a <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6812      	ldr	r2, [r2, #0]
 8003a52:	4610      	mov	r0, r2
 8003a54:	4798      	blx	r3
 8003a56:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0e1      	beq.n	8003a2c <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad2      	subs	r2, r2, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d3da      	bcc.n	8003a2c <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d006      	beq.n	8003a8c <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f06f 0205 	mvn.w	r2, #5
 8003a8a:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 8003a98:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003a9c:	b087      	sub	sp, #28
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b18 <touSTimestamp+0x80>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d204      	bcs.n	8003abc <touSTimestamp+0x24>
        rollovers++;
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b1c <touSTimestamp+0x84>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	4a18      	ldr	r2, [pc, #96]	@ (8003b1c <touSTimestamp+0x84>)
 8003aba:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 8003abc:	4a16      	ldr	r2, [pc, #88]	@ (8003b18 <touSTimestamp+0x80>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 8003ac2:	4b16      	ldr	r3, [pc, #88]	@ (8003b1c <touSTimestamp+0x84>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	469a      	mov	sl, r3
 8003aca:	4693      	mov	fp, r2
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	4653      	mov	r3, sl
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 8003adc:	88fa      	ldrh	r2, [r7, #6]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	2264      	movs	r2, #100	@ 0x64
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	2200      	movs	r2, #0
 8003af0:	461c      	mov	r4, r3
 8003af2:	4615      	mov	r5, r2
 8003af4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003af8:	eb12 0804 	adds.w	r8, r2, r4
 8003afc:	eb43 0905 	adc.w	r9, r3, r5
 8003b00:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 8003b04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	200006e0 	.word	0x200006e0
 8003b1c:	200006e4 	.word	0x200006e4

08003b20 <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003b20:	b5b0      	push	{r4, r5, r7, lr}
 8003b22:	b0a0      	sub	sp, #128	@ 0x80
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

    int32_t referenceDelta = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (cursor < len) {
 8003b3a:	e098      	b.n	8003c6e <sensorhubInputHdlr+0x14e>
        // Get next report id
        uint8_t reportId = payload[cursor];
 8003b3c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	4413      	add	r3, r2
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8003b4a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fe78 	bl	8003844 <getReportLen>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
        if (reportLen == 0) {
 8003b5a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 8003b70:	e083      	b.n	8003c7a <sensorhubInputHdlr+0x15a>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 8003b72:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003b76:	2bfb      	cmp	r3, #251	@ 0xfb
 8003b78:	d10a      	bne.n	8003b90 <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 8003b7a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	4413      	add	r3, r2
 8003b82:	667b      	str	r3, [r7, #100]	@ 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 8003b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b86:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003b8a:	425b      	negs	r3, r3
 8003b8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b8e:	e066      	b.n	8003c5e <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 8003b90:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003b94:	2bfa      	cmp	r3, #250	@ 0xfa
 8003b96:	d10b      	bne.n	8003bb0 <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 8003b98:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	66bb      	str	r3, [r7, #104]	@ 0x68

                referenceDelta += rpt->timebase;
 8003ba2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ba4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003ba8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003baa:	4413      	add	r3, r2
 8003bac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bae:	e056      	b.n	8003c5e <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 8003bb0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003bb4:	2bef      	cmp	r3, #239	@ 0xef
 8003bb6:	d10b      	bne.n	8003bd0 <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 8003bb8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8003bc4:	b292      	uxth	r2, r2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7ff fdf2 	bl	80037b2 <opRx>
 8003bce:	e046      	b.n	8003c5e <sensorhubInputHdlr+0x13e>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 8003bd0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	673b      	str	r3, [r7, #112]	@ 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 8003bda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bdc:	3302      	adds	r3, #2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	019b      	lsls	r3, r3, #6
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003bec:	3203      	adds	r2, #3
 8003bee:	7812      	ldrb	r2, [r2, #0]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 8003bf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003bfe:	6838      	ldr	r0, [r7, #0]
 8003c00:	f7ff ff4a 	bl	8003a98 <touSTimestamp>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 8003c0c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8003c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c12:	4413      	add	r3, r2
 8003c14:	2264      	movs	r2, #100	@ 0x64
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	17da      	asrs	r2, r3, #31
 8003c1c:	461c      	mov	r4, r3
 8003c1e:	4615      	mov	r5, r2
 8003c20:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 8003c24:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003c28:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                memcpy(event.report, pReport, reportLen);
 8003c2c:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8003c30:	f107 0310 	add.w	r3, r7, #16
 8003c34:	3312      	adds	r3, #18
 8003c36:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f009 feca 	bl	800d9d2 <memcpy>
                event.len = reportLen;
 8003c3e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003c42:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <sensorhubInputHdlr+0x13e>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003c56:	f107 0110 	add.w	r1, r7, #16
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 8003c5e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003c68:	4413      	add	r3, r2
 8003c6a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    while (cursor < len) {
 8003c6e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	f4ff af61 	bcc.w	8003b3c <sensorhubInputHdlr+0x1c>
        }
    }
}
 8003c7a:	3780      	adds	r7, #128	@ 0x80
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bdb0      	pop	{r4, r5, r7, pc}

08003c80 <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7ff ff40 	bl	8003b20 <sensorhubInputHdlr>
}
 8003ca0:	bf00      	nop
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff ff2c 	bl	8003b20 <sensorhubInputHdlr>
}
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003cd0:	b5b0      	push	{r4, r5, r7, lr}
 8003cd2:	b09c      	sub	sp, #112	@ 0x70
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	66bb      	str	r3, [r7, #104]	@ 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 8003cea:	232a      	movs	r3, #42	@ 0x2a
 8003cec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    uint8_t reportLen = getReportLen(reportId);
 8003cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fda5 	bl	8003844 <getReportLen>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    while (cursor < len) {
 8003d00:	e02d      	b.n	8003d5e <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2200      	movs	r2, #0
 8003d06:	461c      	mov	r4, r3
 8003d08:	4615      	mov	r5, r2
 8003d0a:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 8003d0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003d12:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        memcpy(event.report, payload+cursor, reportLen);
 8003d16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	18d1      	adds	r1, r2, r3
 8003d1e:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8003d22:	f107 0310 	add.w	r3, r7, #16
 8003d26:	3312      	adds	r3, #18
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f009 fe52 	bl	800d9d2 <memcpy>
        event.len = reportLen;
 8003d2e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003d32:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 8003d36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8003d3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d44:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003d46:	f107 0110 	add.w	r1, r7, #16
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4798      	blx	r3
        }

        cursor += reportLen;
 8003d4e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003d58:	4413      	add	r3, r2
 8003d5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    while (cursor < len) {
 8003d5e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d3cc      	bcc.n	8003d02 <sensorhubInputGyroRvHdlr+0x32>
    }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	3770      	adds	r7, #112	@ 0x70
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003d74 <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d007      	beq.n	8003d9e <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        return;
 8003d9c:	e021      	b.n	8003de2 <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d114      	bne.n	8003dd0 <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2201      	movs	r2, #1
 8003daa:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 8003dac:	6978      	ldr	r0, [r7, #20]
 8003dae:	f7ff fd2d 	bl	800380c <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 8003db2:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <executableDeviceHdlr+0x74>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00f      	beq.n	8003de0 <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dc8:	4907      	ldr	r1, [pc, #28]	@ (8003de8 <executableDeviceHdlr+0x74>)
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4798      	blx	r3
            }
            break;
 8003dce:	e007      	b.n	8003de0 <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
            break;
 8003dde:	e000      	b.n	8003de2 <executableDeviceHdlr+0x6e>
            break;
 8003de0:	bf00      	nop
    }
}
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	200006c4 	.word	0x200006c4

08003dec <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6858      	ldr	r0, [r3, #4]
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	2102      	movs	r1, #2
 8003e04:	f001 fef0 	bl	8005be8 <shtp_send>
 8003e08:	4603      	mov	r3, r0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08a      	sub	sp, #40	@ 0x28
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <setSensorConfigStart+0x28>
 8003e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e32:	f043 0302 	orr.w	r3, r3, #2
 8003e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <setSensorConfigStart+0x3c>
 8003e42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	789b      	ldrb	r3, [r3, #2]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <setSensorConfigStart+0x50>
 8003e56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e5a:	f043 0304 	orr.w	r3, r3, #4
 8003e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	78db      	ldrb	r3, [r3, #3]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <setSensorConfigStart+0x64>
 8003e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e6e:	f043 0308 	orr.w	r3, r3, #8
 8003e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	791b      	ldrb	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <setSensorConfigStart+0x78>
 8003e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e82:	f043 0310 	orr.w	r3, r3, #16
 8003e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    memset(&req, 0, sizeof(req));
 8003e8a:	f107 0308 	add.w	r3, r7, #8
 8003e8e:	2211      	movs	r2, #17
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f009 fd32 	bl	800d8fc <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 8003e98:	23fd      	movs	r3, #253	@ 0xfd
 8003e9a:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ea2:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 8003ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ea8:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	88db      	ldrh	r3, [r3, #6]
 8003eae:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8003eca:	f107 0308 	add.w	r3, r7, #8
 8003ece:	2211      	movs	r2, #17
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ff8a 	bl	8003dec <sendCtrl>
 8003ed8:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 8003eda:	69f9      	ldr	r1, [r7, #28]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff fc83 	bl	80037e8 <opCompleted>

    return rc;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3728      	adds	r7, #40	@ 0x28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <shtpEventCallback+0x3c>)
 8003efa:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 8003efc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f2c <shtpEventCallback+0x40>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 8003f02:	4a0a      	ldr	r2, [pc, #40]	@ (8003f2c <shtpEventCallback+0x40>)
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d006      	beq.n	8003f1e <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f18:	4904      	ldr	r1, [pc, #16]	@ (8003f2c <shtpEventCallback+0x40>)
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4798      	blx	r3
    }
}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	2000054c 	.word	0x2000054c
 8003f2c:	200006c4 	.word	0x200006c4

08003f30 <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 8003f3c:	4b41      	ldr	r3, [pc, #260]	@ (8004044 <sh2_open+0x114>)
 8003f3e:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d102      	bne.n	8003f4c <sh2_open+0x1c>
 8003f46:	f06f 0301 	mvn.w	r3, #1
 8003f4a:	e077      	b.n	800403c <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 8003f4c:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8003f50:	2100      	movs	r1, #0
 8003f52:	69b8      	ldr	r0, [r7, #24]
 8003f54:	f009 fcd2 	bl	800d8fc <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	639a      	str	r2, [r3, #56]	@ 0x38
    pSh2->eventCookie = eventCookie;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pSh2->sensorCallback = 0;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2200      	movs	r2, #0
 8003f74:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = 0;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	645a      	str	r2, [r3, #68]	@ 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 fdb9 	bl	8005af8 <shtp_open>
 8003f86:	4602      	mov	r2, r0
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 8003f94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f98:	e050      	b.n	800403c <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4929      	ldr	r1, [pc, #164]	@ (8004048 <sh2_open+0x118>)
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 fddc 	bl	8005b60 <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	6858      	ldr	r0, [r3, #4]
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	4a27      	ldr	r2, [pc, #156]	@ (800404c <sh2_open+0x11c>)
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	f001 fde9 	bl	8005b88 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	6858      	ldr	r0, [r3, #4]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	@ (8004050 <sh2_open+0x120>)
 8003fbe:	2103      	movs	r1, #3
 8003fc0:	f001 fde2 	bl	8005b88 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	6858      	ldr	r0, [r3, #4]
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	4a22      	ldr	r2, [pc, #136]	@ (8004054 <sh2_open+0x124>)
 8003fcc:	2104      	movs	r1, #4
 8003fce:	f001 fddb 	bl	8005b88 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	6858      	ldr	r0, [r3, #4]
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004058 <sh2_open+0x128>)
 8003fda:	2105      	movs	r1, #5
 8003fdc:	f001 fdd4 	bl	8005b88 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	6858      	ldr	r0, [r3, #4]
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800405c <sh2_open+0x12c>)
 8003fe8:	2101      	movs	r1, #1
 8003fea:	f001 fdcd 	bl	8005b88 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4798      	blx	r3
 8003ffc:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8004002:	e00c      	b.n	800401e <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4618      	mov	r0, r3
 800400a:	f001 fe1e 	bl	8005c4a <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	4610      	mov	r0, r2
 800401a:	4798      	blx	r3
 800401c:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	4a0e      	ldr	r2, [pc, #56]	@ (8004060 <sh2_open+0x130>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d807      	bhi.n	800403a <sh2_open+0x10a>
           (!pSh2->resetComplete))
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	7a1b      	ldrb	r3, [r3, #8]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f083 0301 	eor.w	r3, r3, #1
 8004034:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e4      	bne.n	8004004 <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	2000054c 	.word	0x2000054c
 8004048:	08003eed 	.word	0x08003eed
 800404c:	0800388d 	.word	0x0800388d
 8004050:	08003c81 	.word	0x08003c81
 8004054:	08003ca9 	.word	0x08003ca9
 8004058:	08003cd1 	.word	0x08003cd1
 800405c:	08003d75 	.word	0x08003d75
 8004060:	00030d3f 	.word	0x00030d3f

08004064 <sh2_service>:
 * @brief Service the SH2 device, reading any data that is available and dispatching callbacks.
 *
 * This function should be called periodically by the host system to service an open sensor hub.
 */
void sh2_service(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 800406a:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <sh2_service+0x24>)
 800406c:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp != 0) {
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <sh2_service+0x1c>
        shtp_service(pSh2->pShtp);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4618      	mov	r0, r3
 800407c:	f001 fde5 	bl	8005c4a <shtp_service>
    }
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	2000054c 	.word	0x2000054c

0800408c <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 8004096:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <sh2_setSensorCallback+0x28>)
 8004098:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = cookie;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44

    return SH2_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	2000054c 	.word	0x2000054c

080040b8 <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	6039      	str	r1, [r7, #0]
 80040c2:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 80040c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004104 <sh2_setSensorConfig+0x4c>)
 80040c6:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040d4:	e012      	b.n	80040fc <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3324      	adds	r3, #36	@ 0x24
 80040da:	2210      	movs	r2, #16
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f009 fc0c 	bl	800d8fc <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	79fa      	ldrb	r2, [r7, #7]
 80040e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 80040f2:	4905      	ldr	r1, [pc, #20]	@ (8004108 <sh2_setSensorConfig+0x50>)
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7ff fc7b 	bl	80039f0 <opProcess>
 80040fa:	4603      	mov	r3, r0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	2000054c 	.word	0x2000054c
 8004108:	0800f8c8 	.word	0x0800f8c8

0800410c <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	7c5a      	ldrb	r2, [r3, #17]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b2a      	cmp	r3, #42	@ 0x2a
 8004134:	d00b      	beq.n	800414e <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	7cda      	ldrb	r2, [r3, #19]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	7d1b      	ldrb	r3, [r3, #20]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	b2da      	uxtb	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	709a      	strb	r2, [r3, #2]
 800414c:	e005      	b.n	800415a <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	3b01      	subs	r3, #1
 8004160:	2b2d      	cmp	r3, #45	@ 0x2d
 8004162:	f200 8155 	bhi.w	8004410 <sh2_decodeSensorEvent+0x304>
 8004166:	a201      	add	r2, pc, #4	@ (adr r2, 800416c <sh2_decodeSensorEvent+0x60>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	08004231 	.word	0x08004231
 8004170:	08004261 	.word	0x08004261
 8004174:	08004285 	.word	0x08004285
 8004178:	0800423d 	.word	0x0800423d
 800417c:	0800429d 	.word	0x0800429d
 8004180:	08004249 	.word	0x08004249
 8004184:	0800426d 	.word	0x0800426d
 8004188:	080042a9 	.word	0x080042a9
 800418c:	080042b5 	.word	0x080042b5
 8004190:	080042c1 	.word	0x080042c1
 8004194:	080042cd 	.word	0x080042cd
 8004198:	080042d9 	.word	0x080042d9
 800419c:	080042e5 	.word	0x080042e5
 80041a0:	080042f1 	.word	0x080042f1
 80041a4:	08004291 	.word	0x08004291
 80041a8:	08004309 	.word	0x08004309
 80041ac:	08004321 	.word	0x08004321
 80041b0:	0800432d 	.word	0x0800432d
 80041b4:	08004339 	.word	0x08004339
 80041b8:	08004225 	.word	0x08004225
 80041bc:	08004255 	.word	0x08004255
 80041c0:	08004279 	.word	0x08004279
 80041c4:	080042fd 	.word	0x080042fd
 80041c8:	08004315 	.word	0x08004315
 80041cc:	08004345 	.word	0x08004345
 80041d0:	08004351 	.word	0x08004351
 80041d4:	0800435d 	.word	0x0800435d
 80041d8:	08004369 	.word	0x08004369
 80041dc:	08004411 	.word	0x08004411
 80041e0:	08004375 	.word	0x08004375
 80041e4:	08004381 	.word	0x08004381
 80041e8:	0800438d 	.word	0x0800438d
 80041ec:	08004399 	.word	0x08004399
 80041f0:	080043a5 	.word	0x080043a5
 80041f4:	080043b1 	.word	0x080043b1
 80041f8:	08004411 	.word	0x08004411
 80041fc:	08004411 	.word	0x08004411
 8004200:	08004411 	.word	0x08004411
 8004204:	08004411 	.word	0x08004411
 8004208:	080043bd 	.word	0x080043bd
 800420c:	080043c9 	.word	0x080043c9
 8004210:	080043d5 	.word	0x080043d5
 8004214:	080043e1 	.word	0x080043e1
 8004218:	080043ed 	.word	0x080043ed
 800421c:	080043f9 	.word	0x080043f9
 8004220:	08004405 	.word	0x08004405
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8fc 	bl	8004424 <decodeRawAccelerometer>
 800422c:	60f8      	str	r0, [r7, #12]
            break;
 800422e:	e0f3      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 8004230:	6839      	ldr	r1, [r7, #0]
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f924 	bl	8004480 <decodeAccelerometer>
 8004238:	60f8      	str	r0, [r7, #12]
            break;
 800423a:	e0ed      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f95e 	bl	8004500 <decodeLinearAcceleration>
 8004244:	60f8      	str	r0, [r7, #12]
            break;
 8004246:	e0e7      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f998 	bl	8004580 <decodeGravity>
 8004250:	60f8      	str	r0, [r7, #12]
            break;
 8004252:	e0e1      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f9d2 	bl	8004600 <decodeRawGyroscope>
 800425c:	60f8      	str	r0, [r7, #12]
            break;
 800425e:	e0db      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 8004260:	6839      	ldr	r1, [r7, #0]
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa04 	bl	8004670 <decodeGyroscopeCalibrated>
 8004268:	60f8      	str	r0, [r7, #12]
            break;
 800426a:	e0d5      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fa3e 	bl	80046f0 <decodeGyroscopeUncal>
 8004274:	60f8      	str	r0, [r7, #12]
            break;
 8004276:	e0cf      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 faaa 	bl	80047d4 <decodeRawMagnetometer>
 8004280:	60f8      	str	r0, [r7, #12]
            break;
 8004282:	e0c9      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 8004284:	6839      	ldr	r1, [r7, #0]
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fad2 	bl	8004830 <decodeMagneticFieldCalibrated>
 800428c:	60f8      	str	r0, [r7, #12]
            break;
 800428e:	e0c3      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fb0c 	bl	80048b0 <decodeMagneticFieldUncal>
 8004298:	60f8      	str	r0, [r7, #12]
            break;
 800429a:	e0bd      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 800429c:	6839      	ldr	r1, [r7, #0]
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fb78 	bl	8004994 <decodeRotationVector>
 80042a4:	60f8      	str	r0, [r7, #12]
            break;
 80042a6:	e0b7      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fbd6 	bl	8004a5c <decodeGameRotationVector>
 80042b0:	60f8      	str	r0, [r7, #12]
            break;
 80042b2:	e0b1      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 80042b4:	6839      	ldr	r1, [r7, #0]
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fc20 	bl	8004afc <decodeGeomagneticRotationVector>
 80042bc:	60f8      	str	r0, [r7, #12]
            break;
 80042be:	e0ab      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 80042c0:	6839      	ldr	r1, [r7, #0]
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fc7e 	bl	8004bc4 <decodePressure>
 80042c8:	60f8      	str	r0, [r7, #12]
            break;
 80042ca:	e0a5      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fc94 	bl	8004bfc <decodeAmbientLight>
 80042d4:	60f8      	str	r0, [r7, #12]
            break;
 80042d6:	e09f      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 80042d8:	6839      	ldr	r1, [r7, #0]
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fcaa 	bl	8004c34 <decodeHumidity>
 80042e0:	60f8      	str	r0, [r7, #12]
            break;
 80042e2:	e099      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 80042e4:	6839      	ldr	r1, [r7, #0]
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fcc2 	bl	8004c70 <decodeProximity>
 80042ec:	60f8      	str	r0, [r7, #12]
            break;
 80042ee:	e093      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fcda 	bl	8004cac <decodeTemperature>
 80042f8:	60f8      	str	r0, [r7, #12]
            break;
 80042fa:	e08d      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 80042fc:	6839      	ldr	r1, [r7, #0]
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fcf2 	bl	8004ce8 <decodeReserved>
 8004304:	60f8      	str	r0, [r7, #12]
            break;
 8004306:	e087      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 8004308:	6839      	ldr	r1, [r7, #0]
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fd0a 	bl	8004d24 <decodeTapDetector>
 8004310:	60f8      	str	r0, [r7, #12]
            break;
 8004312:	e081      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fd14 	bl	8004d44 <decodeStepDetector>
 800431c:	60f8      	str	r0, [r7, #12]
            break;
 800431e:	e07b      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fd20 	bl	8004d68 <decodeStepCounter>
 8004328:	60f8      	str	r0, [r7, #12]
            break;
 800432a:	e075      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 800432c:	6839      	ldr	r1, [r7, #0]
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fd35 	bl	8004d9e <decodeSignificantMotion>
 8004334:	60f8      	str	r0, [r7, #12]
            break;
 8004336:	e06f      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fd42 	bl	8004dc4 <decodeStabilityClassifier>
 8004340:	60f8      	str	r0, [r7, #12]
            break;
 8004342:	e069      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 8004344:	6839      	ldr	r1, [r7, #0]
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fd4c 	bl	8004de4 <decodeShakeDetector>
 800434c:	60f8      	str	r0, [r7, #12]
            break;
 800434e:	e063      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fd59 	bl	8004e0a <decodeFlipDetector>
 8004358:	60f8      	str	r0, [r7, #12]
            break;
 800435a:	e05d      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 800435c:	6839      	ldr	r1, [r7, #0]
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fd66 	bl	8004e30 <decodePickupDetector>
 8004364:	60f8      	str	r0, [r7, #12]
            break;
 8004366:	e057      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 8004368:	6839      	ldr	r1, [r7, #0]
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fd73 	bl	8004e56 <decodeStabilityDetector>
 8004370:	60f8      	str	r0, [r7, #12]
            break;
 8004372:	e051      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 8004374:	6839      	ldr	r1, [r7, #0]
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fd80 	bl	8004e7c <decodePersonalActivityClassifier>
 800437c:	60f8      	str	r0, [r7, #12]
            break;
 800437e:	e04b      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fdad 	bl	8004ee2 <decodeSleepDetector>
 8004388:	60f8      	str	r0, [r7, #12]
            break;
 800438a:	e045      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fdb7 	bl	8004f02 <decodeTiltDetector>
 8004394:	60f8      	str	r0, [r7, #12]
            break;
 8004396:	e03f      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fdc4 	bl	8004f28 <decodePocketDetector>
 80043a0:	60f8      	str	r0, [r7, #12]
            break;
 80043a2:	e039      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fdd1 	bl	8004f4e <decodeCircleDetector>
 80043ac:	60f8      	str	r0, [r7, #12]
            break;
 80043ae:	e033      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 80043b0:	6839      	ldr	r1, [r7, #0]
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fdde 	bl	8004f74 <decodeHeartRateMonitor>
 80043b8:	60f8      	str	r0, [r7, #12]
            break;
 80043ba:	e02d      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 80043bc:	6839      	ldr	r1, [r7, #0]
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fdec 	bl	8004f9c <decodeArvrStabilizedRV>
 80043c4:	60f8      	str	r0, [r7, #12]
            break;
 80043c6:	e027      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 80043c8:	6839      	ldr	r1, [r7, #0]
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fe4a 	bl	8005064 <decodeArvrStabilizedGRV>
 80043d0:	60f8      	str	r0, [r7, #12]
            break;
 80043d2:	e021      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 80043d4:	6839      	ldr	r1, [r7, #0]
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fe94 	bl	8005104 <decodeGyroIntegratedRV>
 80043dc:	60f8      	str	r0, [r7, #12]
            break;
 80043de:	e01b      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 80043e0:	6839      	ldr	r1, [r7, #0]
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 ff14 	bl	8005210 <decodeIZroRequest>
 80043e8:	60f8      	str	r0, [r7, #12]
            break;
 80043ea:	e015      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 80043ec:	6839      	ldr	r1, [r7, #0]
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 ff22 	bl	8005238 <decodeRawOptFlow>
 80043f4:	60f8      	str	r0, [r7, #12]
            break;
 80043f6:	e00f      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 ff9a 	bl	8005334 <decodeDeadReckoningPose>
 8004400:	60f8      	str	r0, [r7, #12]
            break;
 8004402:	e009      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f001 f87e 	bl	8005508 <decodeWheelEncoder>
 800440c:	60f8      	str	r0, [r7, #12]
            break;
 800440e:	e003      	b.n	8004418 <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004414:	60fb      	str	r3, [r7, #12]
            break;
 8004416:	bf00      	nop
    }

    return rc;
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop

08004424 <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	3316      	adds	r3, #22
 8004432:	4618      	mov	r0, r3
 8004434:	f001 f8d9 	bl	80055ea <read16>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	3318      	adds	r3, #24
 8004444:	4618      	mov	r0, r3
 8004446:	f001 f8d0 	bl	80055ea <read16>
 800444a:	4603      	mov	r3, r0
 800444c:	461a      	mov	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	331a      	adds	r3, #26
 8004456:	4618      	mov	r0, r3
 8004458:	f001 f8c7 	bl	80055ea <read16>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	331e      	adds	r3, #30
 8004468:	4618      	mov	r0, r3
 800446a:	f001 f8d4 	bl	8005616 <read32>
 800446e:	4603      	mov	r3, r0
 8004470:	461a      	mov	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	3316      	adds	r3, #22
 800448e:	4618      	mov	r0, r3
 8004490:	f001 f8ab 	bl	80055ea <read16>
 8004494:	4603      	mov	r3, r0
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800449e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80044fc <decodeAccelerometer+0x7c>
 80044a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	3318      	adds	r3, #24
 80044b0:	4618      	mov	r0, r3
 80044b2:	f001 f89a 	bl	80055ea <read16>
 80044b6:	4603      	mov	r3, r0
 80044b8:	ee07 3a90 	vmov	s15, r3
 80044bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80044fc <decodeAccelerometer+0x7c>
 80044c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	331a      	adds	r3, #26
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 f889 	bl	80055ea <read16>
 80044d8:	4603      	mov	r3, r0
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80044fc <decodeAccelerometer+0x7c>
 80044e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	3b800000 	.word	0x3b800000

08004500 <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	3316      	adds	r3, #22
 800450e:	4618      	mov	r0, r3
 8004510:	f001 f86b 	bl	80055ea <read16>
 8004514:	4603      	mov	r3, r0
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800451e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800457c <decodeLinearAcceleration+0x7c>
 8004522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	3318      	adds	r3, #24
 8004530:	4618      	mov	r0, r3
 8004532:	f001 f85a 	bl	80055ea <read16>
 8004536:	4603      	mov	r3, r0
 8004538:	ee07 3a90 	vmov	s15, r3
 800453c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004540:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800457c <decodeLinearAcceleration+0x7c>
 8004544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	331a      	adds	r3, #26
 8004552:	4618      	mov	r0, r3
 8004554:	f001 f849 	bl	80055ea <read16>
 8004558:	4603      	mov	r3, r0
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004562:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800457c <decodeLinearAcceleration+0x7c>
 8004566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	3b800000 	.word	0x3b800000

08004580 <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	3316      	adds	r3, #22
 800458e:	4618      	mov	r0, r3
 8004590:	f001 f82b 	bl	80055ea <read16>
 8004594:	4603      	mov	r3, r0
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800459e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80045fc <decodeGravity+0x7c>
 80045a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	3318      	adds	r3, #24
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 f81a 	bl	80055ea <read16>
 80045b6:	4603      	mov	r3, r0
 80045b8:	ee07 3a90 	vmov	s15, r3
 80045bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80045fc <decodeGravity+0x7c>
 80045c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	331a      	adds	r3, #26
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 f809 	bl	80055ea <read16>
 80045d8:	4603      	mov	r3, r0
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80045fc <decodeGravity+0x7c>
 80045e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	3b800000 	.word	0x3b800000

08004600 <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	3316      	adds	r3, #22
 800460e:	4618      	mov	r0, r3
 8004610:	f000 ffeb 	bl	80055ea <read16>
 8004614:	4603      	mov	r3, r0
 8004616:	461a      	mov	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	3318      	adds	r3, #24
 8004620:	4618      	mov	r0, r3
 8004622:	f000 ffe2 	bl	80055ea <read16>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	331a      	adds	r3, #26
 8004632:	4618      	mov	r0, r3
 8004634:	f000 ffd9 	bl	80055ea <read16>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	331c      	adds	r3, #28
 8004644:	4618      	mov	r0, r3
 8004646:	f000 ffd0 	bl	80055ea <read16>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	331e      	adds	r3, #30
 8004656:	4618      	mov	r0, r3
 8004658:	f000 ffdd 	bl	8005616 <read32>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	3316      	adds	r3, #22
 800467e:	4618      	mov	r0, r3
 8004680:	f000 ffb3 	bl	80055ea <read16>
 8004684:	4603      	mov	r3, r0
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800468e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80046ec <decodeGyroscopeCalibrated+0x7c>
 8004692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	3318      	adds	r3, #24
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 ffa2 	bl	80055ea <read16>
 80046a6:	4603      	mov	r3, r0
 80046a8:	ee07 3a90 	vmov	s15, r3
 80046ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046b0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80046ec <decodeGyroscopeCalibrated+0x7c>
 80046b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	331a      	adds	r3, #26
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 ff91 	bl	80055ea <read16>
 80046c8:	4603      	mov	r3, r0
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046d2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80046ec <decodeGyroscopeCalibrated+0x7c>
 80046d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	3b000000 	.word	0x3b000000

080046f0 <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	3316      	adds	r3, #22
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 ff73 	bl	80055ea <read16>
 8004704:	4603      	mov	r3, r0
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800470e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80047d0 <decodeGyroscopeUncal+0xe0>
 8004712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	3318      	adds	r3, #24
 8004720:	4618      	mov	r0, r3
 8004722:	f000 ff62 	bl	80055ea <read16>
 8004726:	4603      	mov	r3, r0
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004730:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80047d0 <decodeGyroscopeUncal+0xe0>
 8004734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	331a      	adds	r3, #26
 8004742:	4618      	mov	r0, r3
 8004744:	f000 ff51 	bl	80055ea <read16>
 8004748:	4603      	mov	r3, r0
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004752:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80047d0 <decodeGyroscopeUncal+0xe0>
 8004756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	331c      	adds	r3, #28
 8004764:	4618      	mov	r0, r3
 8004766:	f000 ff40 	bl	80055ea <read16>
 800476a:	4603      	mov	r3, r0
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004774:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80047d0 <decodeGyroscopeUncal+0xe0>
 8004778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	331e      	adds	r3, #30
 8004786:	4618      	mov	r0, r3
 8004788:	f000 ff2f 	bl	80055ea <read16>
 800478c:	4603      	mov	r3, r0
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004796:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80047d0 <decodeGyroscopeUncal+0xe0>
 800479a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	3320      	adds	r3, #32
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 ff1e 	bl	80055ea <read16>
 80047ae:	4603      	mov	r3, r0
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047b8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80047d0 <decodeGyroscopeUncal+0xe0>
 80047bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	3b000000 	.word	0x3b000000

080047d4 <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	3316      	adds	r3, #22
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 ff01 	bl	80055ea <read16>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	3318      	adds	r3, #24
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fef8 	bl	80055ea <read16>
 80047fa:	4603      	mov	r3, r0
 80047fc:	461a      	mov	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	331a      	adds	r3, #26
 8004806:	4618      	mov	r0, r3
 8004808:	f000 feef 	bl	80055ea <read16>
 800480c:	4603      	mov	r3, r0
 800480e:	461a      	mov	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	331e      	adds	r3, #30
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fefc 	bl	8005616 <read32>
 800481e:	4603      	mov	r3, r0
 8004820:	461a      	mov	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	3316      	adds	r3, #22
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fed3 	bl	80055ea <read16>
 8004844:	4603      	mov	r3, r0
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800484e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80048ac <decodeMagneticFieldCalibrated+0x7c>
 8004852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	3318      	adds	r3, #24
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fec2 	bl	80055ea <read16>
 8004866:	4603      	mov	r3, r0
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004870:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80048ac <decodeMagneticFieldCalibrated+0x7c>
 8004874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	331a      	adds	r3, #26
 8004882:	4618      	mov	r0, r3
 8004884:	f000 feb1 	bl	80055ea <read16>
 8004888:	4603      	mov	r3, r0
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004892:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80048ac <decodeMagneticFieldCalibrated+0x7c>
 8004896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	3d800000 	.word	0x3d800000

080048b0 <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	3316      	adds	r3, #22
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fe93 	bl	80055ea <read16>
 80048c4:	4603      	mov	r3, r0
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ce:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8004990 <decodeMagneticFieldUncal+0xe0>
 80048d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	3318      	adds	r3, #24
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fe82 	bl	80055ea <read16>
 80048e6:	4603      	mov	r3, r0
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004990 <decodeMagneticFieldUncal+0xe0>
 80048f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	331a      	adds	r3, #26
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fe71 	bl	80055ea <read16>
 8004908:	4603      	mov	r3, r0
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004912:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8004990 <decodeMagneticFieldUncal+0xe0>
 8004916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	331c      	adds	r3, #28
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fe60 	bl	80055ea <read16>
 800492a:	4603      	mov	r3, r0
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004934:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004990 <decodeMagneticFieldUncal+0xe0>
 8004938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	331e      	adds	r3, #30
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fe4f 	bl	80055ea <read16>
 800494c:	4603      	mov	r3, r0
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004956:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004990 <decodeMagneticFieldUncal+0xe0>
 800495a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	3320      	adds	r3, #32
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fe3e 	bl	80055ea <read16>
 800496e:	4603      	mov	r3, r0
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004978:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004990 <decodeMagneticFieldUncal+0xe0>
 800497c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	3d800000 	.word	0x3d800000

08004994 <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	3316      	adds	r3, #22
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fe21 	bl	80055ea <read16>
 80049a8:	4603      	mov	r3, r0
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049b2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004a54 <decodeRotationVector+0xc0>
 80049b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	3318      	adds	r3, #24
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fe10 	bl	80055ea <read16>
 80049ca:	4603      	mov	r3, r0
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8004a54 <decodeRotationVector+0xc0>
 80049d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	331a      	adds	r3, #26
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fdff 	bl	80055ea <read16>
 80049ec:	4603      	mov	r3, r0
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049f6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8004a54 <decodeRotationVector+0xc0>
 80049fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	331c      	adds	r3, #28
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fdee 	bl	80055ea <read16>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a18:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004a54 <decodeRotationVector+0xc0>
 8004a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	331e      	adds	r3, #30
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fddd 	bl	80055ea <read16>
 8004a30:	4603      	mov	r3, r0
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a3a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004a58 <decodeRotationVector+0xc4>
 8004a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	38800000 	.word	0x38800000
 8004a58:	39800000 	.word	0x39800000

08004a5c <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	3316      	adds	r3, #22
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fdbd 	bl	80055ea <read16>
 8004a70:	4603      	mov	r3, r0
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a7a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8004af8 <decodeGameRotationVector+0x9c>
 8004a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	3318      	adds	r3, #24
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fdac 	bl	80055ea <read16>
 8004a92:	4603      	mov	r3, r0
 8004a94:	ee07 3a90 	vmov	s15, r3
 8004a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a9c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004af8 <decodeGameRotationVector+0x9c>
 8004aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	331a      	adds	r3, #26
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fd9b 	bl	80055ea <read16>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004af8 <decodeGameRotationVector+0x9c>
 8004ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	331c      	adds	r3, #28
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fd8a 	bl	80055ea <read16>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ae0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004af8 <decodeGameRotationVector+0x9c>
 8004ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	38800000 	.word	0x38800000

08004afc <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	3316      	adds	r3, #22
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fd6d 	bl	80055ea <read16>
 8004b10:	4603      	mov	r3, r0
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b1a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004bbc <decodeGeomagneticRotationVector+0xc0>
 8004b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	3318      	adds	r3, #24
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fd5c 	bl	80055ea <read16>
 8004b32:	4603      	mov	r3, r0
 8004b34:	ee07 3a90 	vmov	s15, r3
 8004b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b3c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8004bbc <decodeGeomagneticRotationVector+0xc0>
 8004b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	331a      	adds	r3, #26
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fd4b 	bl	80055ea <read16>
 8004b54:	4603      	mov	r3, r0
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b5e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8004bbc <decodeGeomagneticRotationVector+0xc0>
 8004b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	331c      	adds	r3, #28
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fd3a 	bl	80055ea <read16>
 8004b76:	4603      	mov	r3, r0
 8004b78:	ee07 3a90 	vmov	s15, r3
 8004b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b80:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004bbc <decodeGeomagneticRotationVector+0xc0>
 8004b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	331e      	adds	r3, #30
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fd29 	bl	80055ea <read16>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ba2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004bc0 <decodeGeomagneticRotationVector+0xc4>
 8004ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	38800000 	.word	0x38800000
 8004bc0:	39800000 	.word	0x39800000

08004bc4 <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	3316      	adds	r3, #22
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fd1f 	bl	8005616 <read32>
 8004bd8:	ee07 0a90 	vmov	s15, r0
 8004bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004bf8 <decodePressure+0x34>
 8004be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	35800000 	.word	0x35800000

08004bfc <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	3316      	adds	r3, #22
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fd03 	bl	8005616 <read32>
 8004c10:	ee07 0a90 	vmov	s15, r0
 8004c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c18:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004c30 <decodeAmbientLight+0x34>
 8004c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	3b800000 	.word	0x3b800000

08004c34 <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	3316      	adds	r3, #22
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fcd1 	bl	80055ea <read16>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c52:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004c6c <decodeHumidity+0x38>
 8004c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	3b800000 	.word	0x3b800000

08004c70 <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	3316      	adds	r3, #22
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fcb3 	bl	80055ea <read16>
 8004c84:	4603      	mov	r3, r0
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c8e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004ca8 <decodeProximity+0x38>
 8004c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	3d800000 	.word	0x3d800000

08004cac <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	3316      	adds	r3, #22
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fc95 	bl	80055ea <read16>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cca:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004ce4 <decodeTemperature+0x38>
 8004cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	3c000000 	.word	0x3c000000

08004ce8 <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	3316      	adds	r3, #22
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fc77 	bl	80055ea <read16>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d06:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004d20 <decodeReserved+0x38>
 8004d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	3c000000 	.word	0x3c000000

08004d24 <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	7d9a      	ldrb	r2, [r3, #22]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	3316      	adds	r3, #22
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fc1c 	bl	8005590 <readu32>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	3316      	adds	r3, #22
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fc0a 	bl	8005590 <readu32>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	331a      	adds	r3, #26
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fc02 	bl	8005590 <readu32>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	3316      	adds	r3, #22
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fbd9 	bl	8005564 <readu16>
 8004db2:	4603      	mov	r3, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	7d9a      	ldrb	r2, [r3, #22]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	3316      	adds	r3, #22
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fbb6 	bl	8005564 <readu16>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	3316      	adds	r3, #22
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fba3 	bl	8005564 <readu16>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	461a      	mov	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	3316      	adds	r3, #22
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fb90 	bl	8005564 <readu16>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	3316      	adds	r3, #22
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fb7d 	bl	8005564 <readu16>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	7d9b      	ldrb	r3, [r3, #22]
 8004e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	7d9b      	ldrb	r3, [r3, #22]
 8004e98:	b25b      	sxtb	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	09db      	lsrs	r3, r3, #7
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	7dda      	ldrb	r2, [r3, #23]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e00d      	b.n	8004ece <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3306      	adds	r3, #6
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	4413      	add	r3, r2
 8004eba:	7c99      	ldrb	r1, [r3, #18]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3317      	adds	r3, #23
 8004ec4:	460a      	mov	r2, r1
 8004ec6:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b09      	cmp	r3, #9
 8004ed2:	ddee      	ble.n	8004eb2 <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	7d9a      	ldrb	r2, [r3, #22]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	3316      	adds	r3, #22
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fb27 	bl	8005564 <readu16>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	3316      	adds	r3, #22
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fb14 	bl	8005564 <readu16>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	461a      	mov	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	3316      	adds	r3, #22
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fb01 	bl	8005564 <readu16>
 8004f62:	4603      	mov	r3, r0
 8004f64:	461a      	mov	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	3316      	adds	r3, #22
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 faee 	bl	8005564 <readu16>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	3316      	adds	r3, #22
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fb1d 	bl	80055ea <read16>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fba:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800505c <decodeArvrStabilizedRV+0xc0>
 8004fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	3318      	adds	r3, #24
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fb0c 	bl	80055ea <read16>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	ee07 3a90 	vmov	s15, r3
 8004fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fdc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800505c <decodeArvrStabilizedRV+0xc0>
 8004fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	331a      	adds	r3, #26
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fafb 	bl	80055ea <read16>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ffe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800505c <decodeArvrStabilizedRV+0xc0>
 8005002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	331c      	adds	r3, #28
 8005010:	4618      	mov	r0, r3
 8005012:	f000 faea 	bl	80055ea <read16>
 8005016:	4603      	mov	r3, r0
 8005018:	ee07 3a90 	vmov	s15, r3
 800501c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005020:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800505c <decodeArvrStabilizedRV+0xc0>
 8005024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	331e      	adds	r3, #30
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fad9 	bl	80055ea <read16>
 8005038:	4603      	mov	r3, r0
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005042:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005060 <decodeArvrStabilizedRV+0xc4>
 8005046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	38800000 	.word	0x38800000
 8005060:	39800000 	.word	0x39800000

08005064 <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	3316      	adds	r3, #22
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fab9 	bl	80055ea <read16>
 8005078:	4603      	mov	r3, r0
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005082:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005100 <decodeArvrStabilizedGRV+0x9c>
 8005086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	3318      	adds	r3, #24
 8005094:	4618      	mov	r0, r3
 8005096:	f000 faa8 	bl	80055ea <read16>
 800509a:	4603      	mov	r3, r0
 800509c:	ee07 3a90 	vmov	s15, r3
 80050a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050a4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005100 <decodeArvrStabilizedGRV+0x9c>
 80050a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	331a      	adds	r3, #26
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fa97 	bl	80055ea <read16>
 80050bc:	4603      	mov	r3, r0
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050c6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005100 <decodeArvrStabilizedGRV+0x9c>
 80050ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	331c      	adds	r3, #28
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fa86 	bl	80055ea <read16>
 80050de:	4603      	mov	r3, r0
 80050e0:	ee07 3a90 	vmov	s15, r3
 80050e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050e8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005100 <decodeArvrStabilizedGRV+0x9c>
 80050ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	38800000 	.word	0x38800000

08005104 <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	3312      	adds	r3, #18
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fa69 	bl	80055ea <read16>
 8005118:	4603      	mov	r3, r0
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005122:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8005208 <decodeGyroIntegratedRV+0x104>
 8005126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fa58 	bl	80055ea <read16>
 800513a:	4603      	mov	r3, r0
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005144:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005208 <decodeGyroIntegratedRV+0x104>
 8005148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	3316      	adds	r3, #22
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fa47 	bl	80055ea <read16>
 800515c:	4603      	mov	r3, r0
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005166:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005208 <decodeGyroIntegratedRV+0x104>
 800516a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	3318      	adds	r3, #24
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fa36 	bl	80055ea <read16>
 800517e:	4603      	mov	r3, r0
 8005180:	ee07 3a90 	vmov	s15, r3
 8005184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005188:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005208 <decodeGyroIntegratedRV+0x104>
 800518c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	331a      	adds	r3, #26
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fa25 	bl	80055ea <read16>
 80051a0:	4603      	mov	r3, r0
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051aa:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800520c <decodeGyroIntegratedRV+0x108>
 80051ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	331c      	adds	r3, #28
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fa14 	bl	80055ea <read16>
 80051c2:	4603      	mov	r3, r0
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800520c <decodeGyroIntegratedRV+0x108>
 80051d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	331e      	adds	r3, #30
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fa03 	bl	80055ea <read16>
 80051e4:	4603      	mov	r3, r0
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ee:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800520c <decodeGyroIntegratedRV+0x108>
 80051f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    return SH2_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	38800000 	.word	0x38800000
 800520c:	3a800000 	.word	0x3a800000

08005210 <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	7d9a      	ldrb	r2, [r3, #22]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	7dda      	ldrb	r2, [r3, #23]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	3316      	adds	r3, #22
 8005246:	4618      	mov	r0, r3
 8005248:	f000 f9cf 	bl	80055ea <read16>
 800524c:	4603      	mov	r3, r0
 800524e:	461a      	mov	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	3318      	adds	r3, #24
 8005258:	4618      	mov	r0, r3
 800525a:	f000 f9c6 	bl	80055ea <read16>
 800525e:	4603      	mov	r3, r0
 8005260:	461a      	mov	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	331a      	adds	r3, #26
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f9bd 	bl	80055ea <read16>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	331c      	adds	r3, #28
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f9a5 	bl	80055cc <read8>
 8005282:	4603      	mov	r3, r0
 8005284:	b2da      	uxtb	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	331d      	adds	r3, #29
 8005290:	4618      	mov	r0, r3
 8005292:	f000 f99b 	bl	80055cc <read8>
 8005296:	4603      	mov	r3, r0
 8005298:	b2da      	uxtb	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	331e      	adds	r3, #30
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 f991 	bl	80055cc <read8>
 80052aa:	4603      	mov	r3, r0
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	331f      	adds	r3, #31
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 f987 	bl	80055cc <read8>
 80052be:	4603      	mov	r3, r0
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	3320      	adds	r3, #32
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f97d 	bl	80055cc <read8>
 80052d2:	4603      	mov	r3, r0
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	3321      	adds	r3, #33	@ 0x21
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f973 	bl	80055cc <read8>
 80052e6:	4603      	mov	r3, r0
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	3322      	adds	r3, #34	@ 0x22
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 f969 	bl	80055cc <read8>
 80052fa:	4603      	mov	r3, r0
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	3324      	adds	r3, #36	@ 0x24
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f96e 	bl	80055ea <read16>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	3326      	adds	r3, #38	@ 0x26
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f97b 	bl	8005616 <read32>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	3316      	adds	r3, #22
 8005342:	4618      	mov	r0, r3
 8005344:	f000 f967 	bl	8005616 <read32>
 8005348:	4603      	mov	r3, r0
 800534a:	461a      	mov	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	331a      	adds	r3, #26
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f95e 	bl	8005616 <read32>
 800535a:	ee07 0a90 	vmov	s15, r0
 800535e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005362:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80054fc <decodeDeadReckoningPose+0x1c8>
 8005366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	331e      	adds	r3, #30
 8005374:	4618      	mov	r0, r3
 8005376:	f000 f94e 	bl	8005616 <read32>
 800537a:	ee07 0a90 	vmov	s15, r0
 800537e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005382:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80054fc <decodeDeadReckoningPose+0x1c8>
 8005386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	3322      	adds	r3, #34	@ 0x22
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f93e 	bl	8005616 <read32>
 800539a:	ee07 0a90 	vmov	s15, r0
 800539e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053a2:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80054fc <decodeDeadReckoningPose+0x1c8>
 80053a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	3326      	adds	r3, #38	@ 0x26
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 f92e 	bl	8005616 <read32>
 80053ba:	ee07 0a90 	vmov	s15, r0
 80053be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053c2:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8005500 <decodeDeadReckoningPose+0x1cc>
 80053c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	332a      	adds	r3, #42	@ 0x2a
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 f91e 	bl	8005616 <read32>
 80053da:	ee07 0a90 	vmov	s15, r0
 80053de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053e2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8005500 <decodeDeadReckoningPose+0x1cc>
 80053e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	332e      	adds	r3, #46	@ 0x2e
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f90e 	bl	8005616 <read32>
 80053fa:	ee07 0a90 	vmov	s15, r0
 80053fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005402:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005500 <decodeDeadReckoningPose+0x1cc>
 8005406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	3332      	adds	r3, #50	@ 0x32
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f8fe 	bl	8005616 <read32>
 800541a:	ee07 0a90 	vmov	s15, r0
 800541e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005422:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8005500 <decodeDeadReckoningPose+0x1cc>
 8005426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	3336      	adds	r3, #54	@ 0x36
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f8ee 	bl	8005616 <read32>
 800543a:	ee07 0a90 	vmov	s15, r0
 800543e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005442:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005504 <decodeDeadReckoningPose+0x1d0>
 8005446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	333a      	adds	r3, #58	@ 0x3a
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f8de 	bl	8005616 <read32>
 800545a:	ee07 0a90 	vmov	s15, r0
 800545e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005462:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005504 <decodeDeadReckoningPose+0x1d0>
 8005466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	333e      	adds	r3, #62	@ 0x3e
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f8ce 	bl	8005616 <read32>
 800547a:	ee07 0a90 	vmov	s15, r0
 800547e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005482:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8005504 <decodeDeadReckoningPose+0x1d0>
 8005486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	3342      	adds	r3, #66	@ 0x42
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f8be 	bl	8005616 <read32>
 800549a:	ee07 0a90 	vmov	s15, r0
 800549e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005504 <decodeDeadReckoningPose+0x1d0>
 80054a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	3346      	adds	r3, #70	@ 0x46
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f8ae 	bl	8005616 <read32>
 80054ba:	ee07 0a90 	vmov	s15, r0
 80054be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005504 <decodeDeadReckoningPose+0x1d0>
 80054c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	334a      	adds	r3, #74	@ 0x4a
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f89e 	bl	8005616 <read32>
 80054da:	ee07 0a90 	vmov	s15, r0
 80054de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054e2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8005504 <decodeDeadReckoningPose+0x1d0>
 80054e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    return SH2_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	37000000 	.word	0x37000000
 8005500:	30800000 	.word	0x30800000
 8005504:	33000000 	.word	0x33000000

08005508 <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	3316      	adds	r3, #22
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f87d 	bl	8005616 <read32>
 800551c:	4603      	mov	r3, r0
 800551e:	461a      	mov	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	331a      	adds	r3, #26
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f84f 	bl	80055cc <read8>
 800552e:	4603      	mov	r3, r0
 8005530:	b2da      	uxtb	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	331b      	adds	r3, #27
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f846 	bl	80055cc <read8>
 8005540:	4603      	mov	r3, r0
 8005542:	b2da      	uxtb	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	331c      	adds	r3, #28
 800554c:	4618      	mov	r0, r3
 800554e:	f000 f84c 	bl	80055ea <read16>
 8005552:	4603      	mov	r3, r0
 8005554:	b29a      	uxth	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	b21a      	sxth	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3301      	adds	r3, #1
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	b21b      	sxth	r3, r3
 800557c:	4313      	orrs	r3, r2
 800557e:	b21b      	sxth	r3, r3
 8005580:	81fb      	strh	r3, [r7, #14]
    return retval;
 8005582:	89fb      	ldrh	r3, [r7, #14]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3301      	adds	r3, #1
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3302      	adds	r3, #2
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3303      	adds	r3, #3
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	061b      	lsls	r3, r3, #24
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
    return retval;
 80055be:	68fb      	ldr	r3, [r7, #12]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	73fb      	strb	r3, [r7, #15]
    return retval;
 80055da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	b21a      	sxth	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3301      	adds	r3, #1
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	b21b      	sxth	r3, r3
 8005602:	4313      	orrs	r3, r2
 8005604:	81fb      	strh	r3, [r7, #14]
    return retval;
 8005606:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3301      	adds	r3, #1
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3302      	adds	r3, #2
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3303      	adds	r3, #3
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	061b      	lsls	r3, r3, #24
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
    return retval;
 8005644:	68fb      	ldr	r3, [r7, #12]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 800565a:	2300      	movs	r3, #0
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	e00b      	b.n	8005678 <shtp_init+0x24>
        instances[n].pHal = 0;
 8005660:	4a0b      	ldr	r2, [pc, #44]	@ (8005690 <shtp_init+0x3c>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f640 1114 	movw	r1, #2324	@ 0x914
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	4413      	add	r3, r2
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3301      	adds	r3, #1
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	ddf0      	ble.n	8005660 <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 800567e:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <shtp_init+0x40>)
 8005680:	2201      	movs	r2, #1
 8005682:	701a      	strb	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	200006e8 	.word	0x200006e8
 8005694:	20000ffc 	.word	0x20000ffc

08005698 <getInstance>:

static shtp_t *getInstance(void)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 800569e:	2300      	movs	r3, #0
 80056a0:	607b      	str	r3, [r7, #4]
 80056a2:	e014      	b.n	80056ce <getInstance+0x36>
        if (instances[n].pHal == 0) {
 80056a4:	4a0f      	ldr	r2, [pc, #60]	@ (80056e4 <getInstance+0x4c>)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f640 1114 	movw	r1, #2324	@ 0x914
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	4413      	add	r3, r2
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d107      	bne.n	80056c8 <getInstance+0x30>
            // This instance is free
            return &instances[n];
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f640 1214 	movw	r2, #2324	@ 0x914
 80056be:	fb02 f303 	mul.w	r3, r2, r3
 80056c2:	4a08      	ldr	r2, [pc, #32]	@ (80056e4 <getInstance+0x4c>)
 80056c4:	4413      	add	r3, r2
 80056c6:	e006      	b.n	80056d6 <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3301      	adds	r3, #1
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	dde7      	ble.n	80056a4 <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	200006e8 	.word	0x200006e8

080056e8 <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	460a      	mov	r2, r1
 80056f2:	80fb      	strh	r3, [r7, #6]
 80056f4:	4613      	mov	r3, r2
 80056f6:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 80056f8:	88fa      	ldrh	r2, [r7, #6]
 80056fa:	88bb      	ldrh	r3, [r7, #4]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d201      	bcs.n	8005704 <min_u16+0x1c>
        return a;
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	e000      	b.n	8005706 <min_u16+0x1e>
    }
    else {
        return b;
 8005704:	88bb      	ldrh	r3, [r7, #4]
    }
}
 8005706:	4618      	mov	r0, r3
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 8005712:	b590      	push	{r4, r7, lr}
 8005714:	b089      	sub	sp, #36	@ 0x24
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	460b      	mov	r3, r1
 8005720:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
    
    bool continuation = false;
 8005726:	2300      	movs	r3, #0
 8005728:	76fb      	strb	r3, [r7, #27]
    uint16_t cursor = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	833b      	strh	r3, [r7, #24]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	833b      	strh	r3, [r7, #24]
    remaining = len;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	82fb      	strh	r3, [r7, #22]
    while (remaining > 0) {
 8005736:	e079      	b.n	800582c <txProcess+0x11a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 8005738:	8afb      	ldrh	r3, [r7, #22]
 800573a:	217c      	movs	r1, #124	@ 0x7c
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff ffd3 	bl	80056e8 <min_u16>
 8005742:	4603      	mov	r3, r0
 8005744:	82bb      	strh	r3, [r7, #20]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 8005746:	8abb      	ldrh	r3, [r7, #20]
 8005748:	3304      	adds	r3, #4
 800574a:	827b      	strh	r3, [r7, #18]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 800574c:	8a7b      	ldrh	r3, [r7, #18]
 800574e:	b2da      	uxtb	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 8005754:	8a7b      	ldrh	r3, [r7, #18]
 8005756:	0a1b      	lsrs	r3, r3, #8
 8005758:	b29b      	uxth	r3, r3
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 8005766:	7efb      	ldrb	r3, [r7, #27]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d006      	beq.n	800577a <txProcess+0x68>
            pShtp->outTransfer[1] |= 0x80;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	7b5b      	ldrb	r3, [r3, #13]
 8005770:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	7afa      	ldrb	r2, [r7, #11]
 800577e:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 8005780:	7afa      	ldrb	r2, [r7, #11]
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	4613      	mov	r3, r2
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 8005792:	7819      	ldrb	r1, [r3, #0]
 8005794:	1c4b      	adds	r3, r1, #1
 8005796:	b2dc      	uxtb	r4, r3
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	4613      	mov	r3, r2
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4403      	add	r3, r0
 80057a4:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 80057a8:	4622      	mov	r2, r4
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	460a      	mov	r2, r1
 80057b0:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	330c      	adds	r3, #12
 80057b6:	1d18      	adds	r0, r3, #4
 80057b8:	8b3b      	ldrh	r3, [r7, #24]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	4413      	add	r3, r2
 80057be:	8aba      	ldrh	r2, [r7, #20]
 80057c0:	4619      	mov	r1, r3
 80057c2:	f008 f906 	bl	800d9d2 <memcpy>
        remaining -= transferLen;
 80057c6:	8afa      	ldrh	r2, [r7, #22]
 80057c8:	8abb      	ldrh	r3, [r7, #20]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	82fb      	strh	r3, [r7, #22]
        cursor += transferLen;
 80057ce:	8b3a      	ldrh	r2, [r7, #24]
 80057d0:	8abb      	ldrh	r3, [r7, #20]
 80057d2:	4413      	add	r3, r2
 80057d4:	833b      	strh	r3, [r7, #24]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	6810      	ldr	r0, [r2, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	f102 010c 	add.w	r1, r2, #12
 80057e6:	8a7a      	ldrh	r2, [r7, #18]
 80057e8:	4798      	blx	r3
 80057ea:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 80057ec:	e00d      	b.n	800580a <txProcess+0xf8>
        {
            shtp_service(pShtp);
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 fa2b 	bl	8005c4a <shtp_service>
            status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	6810      	ldr	r0, [r2, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	f102 010c 	add.w	r1, r2, #12
 8005804:	8a7a      	ldrh	r2, [r7, #18]
 8005806:	4798      	blx	r3
 8005808:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ee      	beq.n	80057ee <txProcess+0xdc>
        }
        
        if (status < 0)
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b00      	cmp	r3, #0
 8005814:	da08      	bge.n	8005828 <txProcess+0x116>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
            return status;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	e005      	b.n	8005834 <txProcess+0x122>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8005828:	2301      	movs	r3, #1
 800582a:	76fb      	strb	r3, [r7, #27]
    while (remaining > 0) {
 800582c:	8afb      	ldrh	r3, [r7, #22]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d182      	bne.n	8005738 <txProcess+0x26>
    }

    return SH2_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3724      	adds	r7, #36	@ 0x24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd90      	pop	{r4, r7, pc}

0800583c <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	4613      	mov	r3, r2
 800584a:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 8005850:	2300      	movs	r3, #0
 8005852:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	2b03      	cmp	r3, #3
 8005858:	d813      	bhi.n	8005882 <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8139 	beq.w	8005ae4 <rxAssemble+0x2a8>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	6892      	ldr	r2, [r2, #8]
 800587a:	2101      	movs	r1, #1
 800587c:	4610      	mov	r0, r2
 800587e:	4798      	blx	r3
        }
        return;
 8005880:	e130      	b.n	8005ae4 <rxAssemble+0x2a8>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	3301      	adds	r3, #1
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	b29b      	uxth	r3, r3
 8005892:	4413      	add	r3, r2
 8005894:	b29b      	uxth	r3, r3
 8005896:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800589a:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	3301      	adds	r3, #1
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	b25b      	sxtb	r3, r3
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	09db      	lsrs	r3, r3, #7
 80058a8:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	789b      	ldrb	r3, [r3, #2]
 80058ae:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	78db      	ldrb	r3, [r3, #3]
 80058b4:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 80058b6:	7dfa      	ldrb	r2, [r7, #23]
 80058b8:	68f9      	ldr	r1, [r7, #12]
 80058ba:	4613      	mov	r3, r2
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	7dba      	ldrb	r2, [r7, #22]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d00a      	beq.n	80058e6 <rxAssemble+0xaa>
        if (pShtp->eventCallback) {
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d006      	beq.n	80058e6 <rxAssemble+0xaa>
            pShtp->eventCallback(pShtp->eventCookie,
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	6892      	ldr	r2, [r2, #8]
 80058e0:	2106      	movs	r1, #6
 80058e2:	4610      	mov	r0, r2
 80058e4:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 80058e6:	8abb      	ldrh	r3, [r7, #20]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d813      	bhi.n	8005914 <rxAssemble+0xd8>
        pShtp->rxShortFragments++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 80f2 	beq.w	8005ae8 <rxAssemble+0x2ac>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	6892      	ldr	r2, [r2, #8]
 800590c:	2101      	movs	r1, #1
 800590e:	4610      	mov	r0, r2
 8005910:	4798      	blx	r3
        }
        return;
 8005912:	e0e9      	b.n	8005ae8 <rxAssemble+0x2ac>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 8005914:	7dfb      	ldrb	r3, [r7, #23]
 8005916:	2b07      	cmp	r3, #7
 8005918:	d913      	bls.n	8005942 <rxAssemble+0x106>
        // Invalid channel id.
        pShtp->rxBadChan++;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

        if (pShtp->eventCallback) {
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 80dd 	beq.w	8005aec <rxAssemble+0x2b0>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	6892      	ldr	r2, [r2, #8]
 800593a:	2103      	movs	r1, #3
 800593c:	4610      	mov	r0, r2
 800593e:	4798      	blx	r3
        }
        return;
 8005940:	e0d4      	b.n	8005aec <rxAssemble+0x2b0>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d040      	beq.n	80059ce <rxAssemble+0x192>
        // Check this against previously received data.
        if (!continuation ||
 800594c:	7cfb      	ldrb	r3, [r7, #19]
 800594e:	f083 0301 	eor.w	r3, r3, #1
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d119      	bne.n	800598c <rxAssemble+0x150>
            (chan != pShtp->inChan) ||
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
        if (!continuation ||
 800595e:	7dfa      	ldrb	r2, [r7, #23]
 8005960:	429a      	cmp	r2, r3
 8005962:	d113      	bne.n	800598c <rxAssemble+0x150>
            (seq != pShtp->chan[chan].nextInSeq) ||
 8005964:	7dfa      	ldrb	r2, [r7, #23]
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	4613      	mov	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 8005976:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8005978:	7dba      	ldrb	r2, [r7, #22]
 800597a:	429a      	cmp	r2, r3
 800597c:	d106      	bne.n	800598c <rxAssemble+0x150>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 800597e:	8abb      	ldrh	r3, [r7, #20]
 8005980:	3b04      	subs	r3, #4
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	f8b2 208c 	ldrh.w	r2, [r2, #140]	@ 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 8005988:	4293      	cmp	r3, r2
 800598a:	d020      	beq.n	80059ce <rxAssemble+0x192>
            
            if (pShtp->eventCallback) {
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d006      	beq.n	80059a2 <rxAssemble+0x166>
                pShtp->eventCallback(pShtp->eventCookie,
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	6892      	ldr	r2, [r2, #8]
 800599c:	2105      	movs	r1, #5
 800599e:	4610      	mov	r0, r2
 80059a0:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

            pShtp->rxInterruptedPayloads++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            if (pShtp->eventCallback) {
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d006      	beq.n	80059ce <rxAssemble+0x192>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	6892      	ldr	r2, [r2, #8]
 80059c8:	2107      	movs	r1, #7
 80059ca:	4610      	mov	r0, r2
 80059cc:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 80059ce:	7dfa      	ldrb	r2, [r7, #23]
 80059d0:	7dbb      	ldrb	r3, [r7, #22]
 80059d2:	3301      	adds	r3, #1
 80059d4:	b2d8      	uxtb	r0, r3
 80059d6:	68f9      	ldr	r1, [r7, #12]
 80059d8:	4613      	mov	r3, r2
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 80059e6:	4602      	mov	r2, r0
 80059e8:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d122      	bne.n	8005a3a <rxAssemble+0x1fe>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 80059f4:	8abb      	ldrh	r3, [r7, #20]
 80059f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059fa:	d912      	bls.n	8005a22 <rxAssemble+0x1e6>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
            
            if (pShtp->eventCallback) {
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d06e      	beq.n	8005af0 <rxAssemble+0x2b4>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	6892      	ldr	r2, [r2, #8]
 8005a1a:	2102      	movs	r1, #2
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4798      	blx	r3
            }

            return;
 8005a20:	e066      	b.n	8005af0 <rxAssemble+0x2b4>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
        pShtp->inChan = chan;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	7dfa      	ldrb	r2, [r7, #23]
 8005a36:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	8abb      	ldrh	r3, [r7, #20]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d901      	bls.n	8005a46 <rxAssemble+0x20a>
        // Only use the valid portion of the transfer
        len = payloadLen;
 8005a42:	8abb      	ldrh	r3, [r7, #20]
 8005a44:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	338f      	adds	r3, #143	@ 0x8f
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	@ 0x490
 8005a50:	1898      	adds	r0, r3, r2
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	1d19      	adds	r1, r3, #4
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	3b04      	subs	r3, #4
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f007 ffb9 	bl	800d9d2 <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	4413      	add	r3, r2
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b04      	subs	r3, #4
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
    pShtp->inRemaining = payloadLen - len;
 8005a76:	8aba      	ldrh	r2, [r7, #20]
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d131      	bne.n	8005af2 <rxAssemble+0x2b6>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 8005a8e:	7dfa      	ldrb	r2, [r7, #23]
 8005a90:	68f9      	ldr	r1, [r7, #12]
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d025      	beq.n	8005af2 <rxAssemble+0x2b6>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8005aa6:	7dfa      	ldrb	r2, [r7, #23]
 8005aa8:	68f9      	ldr	r1, [r7, #12]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8005ab8:	681c      	ldr	r4, [r3, #0]
 8005aba:	7dfa      	ldrb	r2, [r7, #23]
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8005acc:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f103 018f 	add.w	r1, r3, #143	@ 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8005ae0:	47a0      	blx	r4
 8005ae2:	e006      	b.n	8005af2 <rxAssemble+0x2b6>
        return;
 8005ae4:	bf00      	nop
 8005ae6:	e004      	b.n	8005af2 <rxAssemble+0x2b6>
        return;
 8005ae8:	bf00      	nop
 8005aea:	e002      	b.n	8005af2 <rxAssemble+0x2b6>
        return;
 8005aec:	bf00      	nop
 8005aee:	e000      	b.n	8005af2 <rxAssemble+0x2b6>
            return;
 8005af0:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd90      	pop	{r4, r7, pc}

08005af8 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 8005b00:	4b16      	ldr	r3, [pc, #88]	@ (8005b5c <shtp_open+0x64>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f083 0301 	eor.w	r3, r3, #1
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 8005b0e:	f7ff fda1 	bl	8005654 <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <shtp_open+0x24>
        // Error
        return 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e01b      	b.n	8005b54 <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 8005b1c:	f7ff fdbc 	bl	8005698 <getInstance>
 8005b20:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <shtp_open+0x34>
        // No instances available, return error
        return 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e013      	b.n	8005b54 <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 8005b2c:	f640 1214 	movw	r2, #2324	@ 0x914
 8005b30:	2100      	movs	r1, #0
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f007 fee2 	bl	800d8fc <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
 8005b40:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <shtp_open+0x54>
        return 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e003      	b.n	8005b54 <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]

    return pShtp;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000ffc 	.word	0x20000ffc

08005b60 <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	460b      	mov	r3, r1
 8005b96:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 8005b9c:	7afb      	ldrb	r3, [r7, #11]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <shtp_listenChan+0x20>
 8005ba2:	7afb      	ldrb	r3, [r7, #11]
 8005ba4:	2b07      	cmp	r3, #7
 8005ba6:	d902      	bls.n	8005bae <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 8005ba8:	f06f 0301 	mvn.w	r3, #1
 8005bac:	e016      	b.n	8005bdc <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 8005bae:	7afa      	ldrb	r2, [r7, #11]
 8005bb0:	6979      	ldr	r1, [r7, #20]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 8005bc4:	7afa      	ldrb	r2, [r7, #11]
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	72fb      	strb	r3, [r7, #11]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 8005c00:	893b      	ldrh	r3, [r7, #8]
 8005c02:	2b80      	cmp	r3, #128	@ 0x80
 8005c04:	d909      	bls.n	8005c1a <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
        return SH2_ERR_BAD_PARAM;
 8005c14:	f06f 0301 	mvn.w	r3, #1
 8005c18:	e013      	b.n	8005c42 <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 8005c1a:	7afb      	ldrb	r3, [r7, #11]
 8005c1c:	2b07      	cmp	r3, #7
 8005c1e:	d909      	bls.n	8005c34 <shtp_send+0x4c>
        pShtp->badTxChan++;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
        return SH2_ERR_BAD_PARAM;
 8005c2e:	f06f 0301 	mvn.w	r3, #1
 8005c32:	e006      	b.n	8005c42 <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 8005c34:	893b      	ldrh	r3, [r7, #8]
 8005c36:	7af9      	ldrb	r1, [r7, #11]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6978      	ldr	r0, [r7, #20]
 8005c3c:	f7ff fd69 	bl	8005712 <txProcess>
 8005c40:	4603      	mov	r3, r0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 8005c4a:	b590      	push	{r4, r7, lr}
 8005c4c:	b087      	sub	sp, #28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689c      	ldr	r4, [r3, #8]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c72:	47a0      	blx	r4
 8005c74:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	dd08      	ble.n	8005c8e <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6978      	ldr	r0, [r7, #20]
 8005c8a:	f7ff fdd7 	bl	800583c <rxAssemble>
    }
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd90      	pop	{r4, r7, pc}
	...

08005c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005cd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005c9c:	f7fd fd52 	bl	8003744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ca0:	480c      	ldr	r0, [pc, #48]	@ (8005cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005ca2:	490d      	ldr	r1, [pc, #52]	@ (8005cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8005cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ca8:	e002      	b.n	8005cb0 <LoopCopyDataInit>

08005caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cae:	3304      	adds	r3, #4

08005cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005cb4:	d3f9      	bcc.n	8005caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8005ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005cbc:	e001      	b.n	8005cc2 <LoopFillZerobss>

08005cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005cc0:	3204      	adds	r2, #4

08005cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005cc4:	d3fb      	bcc.n	8005cbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005cc6:	f007 fe5d 	bl	800d984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005cca:	f7fc fe5d 	bl	8002988 <main>
  bx  lr    
 8005cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005cd8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005cdc:	0800fea0 	.word	0x0800fea0
  ldr r2, =_sbss
 8005ce0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005ce4:	20001150 	.word	0x20001150

08005ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ce8:	e7fe      	b.n	8005ce8 <ADC_IRQHandler>
	...

08005cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8005d2c <HAL_Init+0x40>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8005d2c <HAL_Init+0x40>)
 8005cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005d2c <HAL_Init+0x40>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a0a      	ldr	r2, [pc, #40]	@ (8005d2c <HAL_Init+0x40>)
 8005d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d08:	4b08      	ldr	r3, [pc, #32]	@ (8005d2c <HAL_Init+0x40>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a07      	ldr	r2, [pc, #28]	@ (8005d2c <HAL_Init+0x40>)
 8005d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d14:	2003      	movs	r0, #3
 8005d16:	f000 fd5f 	bl	80067d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f000 f808 	bl	8005d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d20:	f7fd fa12 	bl	8003148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40023c00 	.word	0x40023c00

08005d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d38:	4b12      	ldr	r3, [pc, #72]	@ (8005d84 <HAL_InitTick+0x54>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4b12      	ldr	r3, [pc, #72]	@ (8005d88 <HAL_InitTick+0x58>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	4619      	mov	r1, r3
 8005d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fd85 	bl	800685e <HAL_SYSTICK_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e00e      	b.n	8005d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b0f      	cmp	r3, #15
 8005d62:	d80a      	bhi.n	8005d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d64:	2200      	movs	r2, #0
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d6c:	f000 fd3f 	bl	80067ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d70:	4a06      	ldr	r2, [pc, #24]	@ (8005d8c <HAL_InitTick+0x5c>)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e000      	b.n	8005d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20000000 	.word	0x20000000
 8005d88:	20000008 	.word	0x20000008
 8005d8c:	20000004 	.word	0x20000004

08005d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d94:	4b06      	ldr	r3, [pc, #24]	@ (8005db0 <HAL_IncTick+0x20>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4b06      	ldr	r3, [pc, #24]	@ (8005db4 <HAL_IncTick+0x24>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4413      	add	r3, r2
 8005da0:	4a04      	ldr	r2, [pc, #16]	@ (8005db4 <HAL_IncTick+0x24>)
 8005da2:	6013      	str	r3, [r2, #0]
}
 8005da4:	bf00      	nop
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	20000008 	.word	0x20000008
 8005db4:	20001000 	.word	0x20001000

08005db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  return uwTick;
 8005dbc:	4b03      	ldr	r3, [pc, #12]	@ (8005dcc <HAL_GetTick+0x14>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20001000 	.word	0x20001000

08005dd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e033      	b.n	8005e4e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fd f9d2 	bl	8003198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d118      	bne.n	8005e40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005e16:	f023 0302 	bic.w	r3, r3, #2
 8005e1a:	f043 0202 	orr.w	r2, r3, #2
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fae8 	bl	80063f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	f043 0201 	orr.w	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8005e3e:	e001      	b.n	8005e44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_ADC_Start+0x1a>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e0b2      	b.n	8005fd8 <HAL_ADC_Start+0x180>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d018      	beq.n	8005eba <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005e98:	4b52      	ldr	r3, [pc, #328]	@ (8005fe4 <HAL_ADC_Start+0x18c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a52      	ldr	r2, [pc, #328]	@ (8005fe8 <HAL_ADC_Start+0x190>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	0c9a      	lsrs	r2, r3, #18
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005eac:	e002      	b.n	8005eb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f9      	bne.n	8005eae <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d17a      	bne.n	8005fbe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ecc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005ef2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f06:	d106      	bne.n	8005f16 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0c:	f023 0206 	bic.w	r2, r3, #6
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f14:	e002      	b.n	8005f1c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f24:	4b31      	ldr	r3, [pc, #196]	@ (8005fec <HAL_ADC_Start+0x194>)
 8005f26:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005f30:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f003 031f 	and.w	r3, r3, #31
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d12a      	bne.n	8005f94 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a2b      	ldr	r2, [pc, #172]	@ (8005ff0 <HAL_ADC_Start+0x198>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d015      	beq.n	8005f74 <HAL_ADC_Start+0x11c>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a29      	ldr	r2, [pc, #164]	@ (8005ff4 <HAL_ADC_Start+0x19c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d105      	bne.n	8005f5e <HAL_ADC_Start+0x106>
 8005f52:	4b26      	ldr	r3, [pc, #152]	@ (8005fec <HAL_ADC_Start+0x194>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f003 031f 	and.w	r3, r3, #31
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a25      	ldr	r2, [pc, #148]	@ (8005ff8 <HAL_ADC_Start+0x1a0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d136      	bne.n	8005fd6 <HAL_ADC_Start+0x17e>
 8005f68:	4b20      	ldr	r3, [pc, #128]	@ (8005fec <HAL_ADC_Start+0x194>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d130      	bne.n	8005fd6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d129      	bne.n	8005fd6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005f90:	609a      	str	r2, [r3, #8]
 8005f92:	e020      	b.n	8005fd6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a15      	ldr	r2, [pc, #84]	@ (8005ff0 <HAL_ADC_Start+0x198>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d11b      	bne.n	8005fd6 <HAL_ADC_Start+0x17e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d114      	bne.n	8005fd6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005fba:	609a      	str	r2, [r3, #8]
 8005fbc:	e00b      	b.n	8005fd6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc2:	f043 0210 	orr.w	r2, r3, #16
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fce:	f043 0201 	orr.w	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	20000000 	.word	0x20000000
 8005fe8:	431bde83 	.word	0x431bde83
 8005fec:	40012300 	.word	0x40012300
 8005ff0:	40012000 	.word	0x40012000
 8005ff4:	40012100 	.word	0x40012100
 8005ff8:	40012200 	.word	0x40012200

08005ffc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <HAL_ADC_Stop+0x16>
 800600e:	2302      	movs	r3, #2
 8006010:	e021      	b.n	8006056 <HAL_ADC_Stop+0x5a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0201 	bic.w	r2, r2, #1
 8006028:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d109      	bne.n	800604c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	f043 0201 	orr.w	r2, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800607a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800607e:	d113      	bne.n	80060a8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800608a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800608e:	d10b      	bne.n	80060a8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006094:	f043 0220 	orr.w	r2, r3, #32
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e063      	b.n	8006170 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80060a8:	f7ff fe86 	bl	8005db8 <HAL_GetTick>
 80060ac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80060ae:	e021      	b.n	80060f4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060b6:	d01d      	beq.n	80060f4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <HAL_ADC_PollForConversion+0x6c>
 80060be:	f7ff fe7b 	bl	8005db8 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d212      	bcs.n	80060f4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d00b      	beq.n	80060f4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e0:	f043 0204 	orr.w	r2, r3, #4
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e03d      	b.n	8006170 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d1d6      	bne.n	80060b0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f06f 0212 	mvn.w	r2, #18
 800610a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d123      	bne.n	800616e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800612a:	2b00      	cmp	r3, #0
 800612c:	d11f      	bne.n	800616e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006138:	2b00      	cmp	r3, #0
 800613a:	d006      	beq.n	800614a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006146:	2b00      	cmp	r3, #0
 8006148:	d111      	bne.n	800616e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d105      	bne.n	800616e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	f043 0201 	orr.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
	...

08006194 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x1c>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e113      	b.n	80063d8 <HAL_ADC_ConfigChannel+0x244>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b09      	cmp	r3, #9
 80061be:	d925      	bls.n	800620c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68d9      	ldr	r1, [r3, #12]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	461a      	mov	r2, r3
 80061ce:	4613      	mov	r3, r2
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	4413      	add	r3, r2
 80061d4:	3b1e      	subs	r3, #30
 80061d6:	2207      	movs	r2, #7
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	43da      	mvns	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	400a      	ands	r2, r1
 80061e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68d9      	ldr	r1, [r3, #12]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	4618      	mov	r0, r3
 80061f8:	4603      	mov	r3, r0
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	4403      	add	r3, r0
 80061fe:	3b1e      	subs	r3, #30
 8006200:	409a      	lsls	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	60da      	str	r2, [r3, #12]
 800620a:	e022      	b.n	8006252 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6919      	ldr	r1, [r3, #16]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	4613      	mov	r3, r2
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	4413      	add	r3, r2
 8006220:	2207      	movs	r2, #7
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	43da      	mvns	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	400a      	ands	r2, r1
 800622e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6919      	ldr	r1, [r3, #16]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	4618      	mov	r0, r3
 8006242:	4603      	mov	r3, r0
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4403      	add	r3, r0
 8006248:	409a      	lsls	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b06      	cmp	r3, #6
 8006258:	d824      	bhi.n	80062a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	3b05      	subs	r3, #5
 800626c:	221f      	movs	r2, #31
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	43da      	mvns	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	400a      	ands	r2, r1
 800627a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	4618      	mov	r0, r3
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	3b05      	subs	r3, #5
 8006296:	fa00 f203 	lsl.w	r2, r0, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80062a2:	e04c      	b.n	800633e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b0c      	cmp	r3, #12
 80062aa:	d824      	bhi.n	80062f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	3b23      	subs	r3, #35	@ 0x23
 80062be:	221f      	movs	r2, #31
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	43da      	mvns	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	400a      	ands	r2, r1
 80062cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	4618      	mov	r0, r3
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	3b23      	subs	r3, #35	@ 0x23
 80062e8:	fa00 f203 	lsl.w	r2, r0, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80062f4:	e023      	b.n	800633e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	3b41      	subs	r3, #65	@ 0x41
 8006308:	221f      	movs	r2, #31
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	43da      	mvns	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	400a      	ands	r2, r1
 8006316:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	4618      	mov	r0, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	3b41      	subs	r3, #65	@ 0x41
 8006332:	fa00 f203 	lsl.w	r2, r0, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800633e:	4b29      	ldr	r3, [pc, #164]	@ (80063e4 <HAL_ADC_ConfigChannel+0x250>)
 8006340:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a28      	ldr	r2, [pc, #160]	@ (80063e8 <HAL_ADC_ConfigChannel+0x254>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d10f      	bne.n	800636c <HAL_ADC_ConfigChannel+0x1d8>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b12      	cmp	r3, #18
 8006352:	d10b      	bne.n	800636c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1d      	ldr	r2, [pc, #116]	@ (80063e8 <HAL_ADC_ConfigChannel+0x254>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d12b      	bne.n	80063ce <HAL_ADC_ConfigChannel+0x23a>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1c      	ldr	r2, [pc, #112]	@ (80063ec <HAL_ADC_ConfigChannel+0x258>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <HAL_ADC_ConfigChannel+0x1f4>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b11      	cmp	r3, #17
 8006386:	d122      	bne.n	80063ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a11      	ldr	r2, [pc, #68]	@ (80063ec <HAL_ADC_ConfigChannel+0x258>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d111      	bne.n	80063ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80063aa:	4b11      	ldr	r3, [pc, #68]	@ (80063f0 <HAL_ADC_ConfigChannel+0x25c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a11      	ldr	r2, [pc, #68]	@ (80063f4 <HAL_ADC_ConfigChannel+0x260>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	0c9a      	lsrs	r2, r3, #18
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80063c0:	e002      	b.n	80063c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f9      	bne.n	80063c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	40012300 	.word	0x40012300
 80063e8:	40012000 	.word	0x40012000
 80063ec:	10000012 	.word	0x10000012
 80063f0:	20000000 	.word	0x20000000
 80063f4:	431bde83 	.word	0x431bde83

080063f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006400:	4b79      	ldr	r3, [pc, #484]	@ (80065e8 <ADC_Init+0x1f0>)
 8006402:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	431a      	orrs	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800642c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6859      	ldr	r1, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	021a      	lsls	r2, r3, #8
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6859      	ldr	r1, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006472:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6899      	ldr	r1, [r3, #8]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648a:	4a58      	ldr	r2, [pc, #352]	@ (80065ec <ADC_Init+0x1f4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d022      	beq.n	80064d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800649e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6899      	ldr	r1, [r3, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80064c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6899      	ldr	r1, [r3, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	e00f      	b.n	80064f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80064e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80064f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0202 	bic.w	r2, r2, #2
 8006504:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6899      	ldr	r1, [r3, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	7e1b      	ldrb	r3, [r3, #24]
 8006510:	005a      	lsls	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01b      	beq.n	800655c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006532:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006542:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6859      	ldr	r1, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	3b01      	subs	r3, #1
 8006550:	035a      	lsls	r2, r3, #13
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
 800655a:	e007      	b.n	800656c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800656a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800657a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	3b01      	subs	r3, #1
 8006588:	051a      	lsls	r2, r3, #20
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80065a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6899      	ldr	r1, [r3, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065ae:	025a      	lsls	r2, r3, #9
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6899      	ldr	r1, [r3, #8]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	029a      	lsls	r2, r3, #10
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	609a      	str	r2, [r3, #8]
}
 80065dc:	bf00      	nop
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40012300 	.word	0x40012300
 80065ec:	0f000001 	.word	0x0f000001

080065f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006600:	4b0c      	ldr	r3, [pc, #48]	@ (8006634 <__NVIC_SetPriorityGrouping+0x44>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800660c:	4013      	ands	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800661c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006622:	4a04      	ldr	r2, [pc, #16]	@ (8006634 <__NVIC_SetPriorityGrouping+0x44>)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	60d3      	str	r3, [r2, #12]
}
 8006628:	bf00      	nop
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	e000ed00 	.word	0xe000ed00

08006638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800663c:	4b04      	ldr	r3, [pc, #16]	@ (8006650 <__NVIC_GetPriorityGrouping+0x18>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	0a1b      	lsrs	r3, r3, #8
 8006642:	f003 0307 	and.w	r3, r3, #7
}
 8006646:	4618      	mov	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	e000ed00 	.word	0xe000ed00

08006654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800665e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006662:	2b00      	cmp	r3, #0
 8006664:	db0b      	blt.n	800667e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	f003 021f 	and.w	r2, r3, #31
 800666c:	4907      	ldr	r1, [pc, #28]	@ (800668c <__NVIC_EnableIRQ+0x38>)
 800666e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	2001      	movs	r0, #1
 8006676:	fa00 f202 	lsl.w	r2, r0, r2
 800667a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	e000e100 	.word	0xe000e100

08006690 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800669a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	db12      	blt.n	80066c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	f003 021f 	and.w	r2, r3, #31
 80066a8:	490a      	ldr	r1, [pc, #40]	@ (80066d4 <__NVIC_DisableIRQ+0x44>)
 80066aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	2001      	movs	r0, #1
 80066b2:	fa00 f202 	lsl.w	r2, r0, r2
 80066b6:	3320      	adds	r3, #32
 80066b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80066bc:	f3bf 8f4f 	dsb	sy
}
 80066c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066c2:	f3bf 8f6f 	isb	sy
}
 80066c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	e000e100 	.word	0xe000e100

080066d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	db0a      	blt.n	8006702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	490c      	ldr	r1, [pc, #48]	@ (8006724 <__NVIC_SetPriority+0x4c>)
 80066f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f6:	0112      	lsls	r2, r2, #4
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	440b      	add	r3, r1
 80066fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006700:	e00a      	b.n	8006718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	b2da      	uxtb	r2, r3
 8006706:	4908      	ldr	r1, [pc, #32]	@ (8006728 <__NVIC_SetPriority+0x50>)
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	3b04      	subs	r3, #4
 8006710:	0112      	lsls	r2, r2, #4
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	440b      	add	r3, r1
 8006716:	761a      	strb	r2, [r3, #24]
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	e000e100 	.word	0xe000e100
 8006728:	e000ed00 	.word	0xe000ed00

0800672c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800672c:	b480      	push	{r7}
 800672e:	b089      	sub	sp, #36	@ 0x24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f1c3 0307 	rsb	r3, r3, #7
 8006746:	2b04      	cmp	r3, #4
 8006748:	bf28      	it	cs
 800674a:	2304      	movcs	r3, #4
 800674c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	3304      	adds	r3, #4
 8006752:	2b06      	cmp	r3, #6
 8006754:	d902      	bls.n	800675c <NVIC_EncodePriority+0x30>
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	3b03      	subs	r3, #3
 800675a:	e000      	b.n	800675e <NVIC_EncodePriority+0x32>
 800675c:	2300      	movs	r3, #0
 800675e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	43da      	mvns	r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	401a      	ands	r2, r3
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006774:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	fa01 f303 	lsl.w	r3, r1, r3
 800677e:	43d9      	mvns	r1, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006784:	4313      	orrs	r3, r2
         );
}
 8006786:	4618      	mov	r0, r3
 8006788:	3724      	adds	r7, #36	@ 0x24
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3b01      	subs	r3, #1
 80067a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067a4:	d301      	bcc.n	80067aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067a6:	2301      	movs	r3, #1
 80067a8:	e00f      	b.n	80067ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067aa:	4a0a      	ldr	r2, [pc, #40]	@ (80067d4 <SysTick_Config+0x40>)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067b2:	210f      	movs	r1, #15
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067b8:	f7ff ff8e 	bl	80066d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067bc:	4b05      	ldr	r3, [pc, #20]	@ (80067d4 <SysTick_Config+0x40>)
 80067be:	2200      	movs	r2, #0
 80067c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067c2:	4b04      	ldr	r3, [pc, #16]	@ (80067d4 <SysTick_Config+0x40>)
 80067c4:	2207      	movs	r2, #7
 80067c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	e000e010 	.word	0xe000e010

080067d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ff05 	bl	80065f0 <__NVIC_SetPriorityGrouping>
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b086      	sub	sp, #24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	4603      	mov	r3, r0
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006800:	f7ff ff1a 	bl	8006638 <__NVIC_GetPriorityGrouping>
 8006804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	6978      	ldr	r0, [r7, #20]
 800680c:	f7ff ff8e 	bl	800672c <NVIC_EncodePriority>
 8006810:	4602      	mov	r2, r0
 8006812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006816:	4611      	mov	r1, r2
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff ff5d 	bl	80066d8 <__NVIC_SetPriority>
}
 800681e:	bf00      	nop
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	4603      	mov	r3, r0
 800682e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff ff0d 	bl	8006654 <__NVIC_EnableIRQ>
}
 800683a:	bf00      	nop
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	4603      	mov	r3, r0
 800684a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800684c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff ff1d 	bl	8006690 <__NVIC_DisableIRQ>
}
 8006856:	bf00      	nop
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff ff94 	bl	8006794 <SysTick_Config>
 800686c:	4603      	mov	r3, r0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d004      	beq.n	8006894 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2280      	movs	r2, #128	@ 0x80
 800688e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e00c      	b.n	80068ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2205      	movs	r2, #5
 8006898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0201 	bic.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068c8:	b2db      	uxtb	r3, r3
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068d8:	b480      	push	{r7}
 80068da:	b089      	sub	sp, #36	@ 0x24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	e165      	b.n	8006bc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068f4:	2201      	movs	r2, #1
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4013      	ands	r3, r2
 8006906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	429a      	cmp	r2, r3
 800690e:	f040 8154 	bne.w	8006bba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	2b01      	cmp	r3, #1
 800691c:	d005      	beq.n	800692a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006926:	2b02      	cmp	r3, #2
 8006928:	d130      	bne.n	800698c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	2203      	movs	r2, #3
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	43db      	mvns	r3, r3
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	4013      	ands	r3, r2
 8006940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	fa02 f303 	lsl.w	r3, r2, r3
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	4313      	orrs	r3, r2
 8006952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006960:	2201      	movs	r2, #1
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	fa02 f303 	lsl.w	r3, r2, r3
 8006968:	43db      	mvns	r3, r3
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	4013      	ands	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	091b      	lsrs	r3, r3, #4
 8006976:	f003 0201 	and.w	r2, r3, #1
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	fa02 f303 	lsl.w	r3, r2, r3
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	4313      	orrs	r3, r2
 8006984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f003 0303 	and.w	r3, r3, #3
 8006994:	2b03      	cmp	r3, #3
 8006996:	d017      	beq.n	80069c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	2203      	movs	r2, #3
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	43db      	mvns	r3, r3
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	4013      	ands	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	4313      	orrs	r3, r2
 80069c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d123      	bne.n	8006a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	08da      	lsrs	r2, r3, #3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3208      	adds	r2, #8
 80069dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	220f      	movs	r2, #15
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	43db      	mvns	r3, r3
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	4013      	ands	r3, r2
 80069f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	691a      	ldr	r2, [r3, #16]
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	08da      	lsrs	r2, r3, #3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3208      	adds	r2, #8
 8006a16:	69b9      	ldr	r1, [r7, #24]
 8006a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	2203      	movs	r2, #3
 8006a28:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	4013      	ands	r3, r2
 8006a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f003 0203 	and.w	r2, r3, #3
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 80ae 	beq.w	8006bba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	4b5d      	ldr	r3, [pc, #372]	@ (8006bd8 <HAL_GPIO_Init+0x300>)
 8006a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a66:	4a5c      	ldr	r2, [pc, #368]	@ (8006bd8 <HAL_GPIO_Init+0x300>)
 8006a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8006bd8 <HAL_GPIO_Init+0x300>)
 8006a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a7a:	4a58      	ldr	r2, [pc, #352]	@ (8006bdc <HAL_GPIO_Init+0x304>)
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	089b      	lsrs	r3, r3, #2
 8006a80:	3302      	adds	r3, #2
 8006a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	220f      	movs	r2, #15
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43db      	mvns	r3, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a4f      	ldr	r2, [pc, #316]	@ (8006be0 <HAL_GPIO_Init+0x308>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d025      	beq.n	8006af2 <HAL_GPIO_Init+0x21a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a4e      	ldr	r2, [pc, #312]	@ (8006be4 <HAL_GPIO_Init+0x30c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d01f      	beq.n	8006aee <HAL_GPIO_Init+0x216>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a4d      	ldr	r2, [pc, #308]	@ (8006be8 <HAL_GPIO_Init+0x310>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d019      	beq.n	8006aea <HAL_GPIO_Init+0x212>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a4c      	ldr	r2, [pc, #304]	@ (8006bec <HAL_GPIO_Init+0x314>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d013      	beq.n	8006ae6 <HAL_GPIO_Init+0x20e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a4b      	ldr	r2, [pc, #300]	@ (8006bf0 <HAL_GPIO_Init+0x318>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00d      	beq.n	8006ae2 <HAL_GPIO_Init+0x20a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a4a      	ldr	r2, [pc, #296]	@ (8006bf4 <HAL_GPIO_Init+0x31c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d007      	beq.n	8006ade <HAL_GPIO_Init+0x206>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a49      	ldr	r2, [pc, #292]	@ (8006bf8 <HAL_GPIO_Init+0x320>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d101      	bne.n	8006ada <HAL_GPIO_Init+0x202>
 8006ad6:	2306      	movs	r3, #6
 8006ad8:	e00c      	b.n	8006af4 <HAL_GPIO_Init+0x21c>
 8006ada:	2307      	movs	r3, #7
 8006adc:	e00a      	b.n	8006af4 <HAL_GPIO_Init+0x21c>
 8006ade:	2305      	movs	r3, #5
 8006ae0:	e008      	b.n	8006af4 <HAL_GPIO_Init+0x21c>
 8006ae2:	2304      	movs	r3, #4
 8006ae4:	e006      	b.n	8006af4 <HAL_GPIO_Init+0x21c>
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e004      	b.n	8006af4 <HAL_GPIO_Init+0x21c>
 8006aea:	2302      	movs	r3, #2
 8006aec:	e002      	b.n	8006af4 <HAL_GPIO_Init+0x21c>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <HAL_GPIO_Init+0x21c>
 8006af2:	2300      	movs	r3, #0
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	f002 0203 	and.w	r2, r2, #3
 8006afa:	0092      	lsls	r2, r2, #2
 8006afc:	4093      	lsls	r3, r2
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b04:	4935      	ldr	r1, [pc, #212]	@ (8006bdc <HAL_GPIO_Init+0x304>)
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	089b      	lsrs	r3, r3, #2
 8006b0a:	3302      	adds	r3, #2
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b12:	4b3a      	ldr	r3, [pc, #232]	@ (8006bfc <HAL_GPIO_Init+0x324>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b36:	4a31      	ldr	r2, [pc, #196]	@ (8006bfc <HAL_GPIO_Init+0x324>)
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8006bfc <HAL_GPIO_Init+0x324>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	43db      	mvns	r3, r3
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b60:	4a26      	ldr	r2, [pc, #152]	@ (8006bfc <HAL_GPIO_Init+0x324>)
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b66:	4b25      	ldr	r3, [pc, #148]	@ (8006bfc <HAL_GPIO_Init+0x324>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	43db      	mvns	r3, r3
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	4013      	ands	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006bfc <HAL_GPIO_Init+0x324>)
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b90:	4b1a      	ldr	r3, [pc, #104]	@ (8006bfc <HAL_GPIO_Init+0x324>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bb4:	4a11      	ldr	r2, [pc, #68]	@ (8006bfc <HAL_GPIO_Init+0x324>)
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	61fb      	str	r3, [r7, #28]
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	2b0f      	cmp	r3, #15
 8006bc4:	f67f ae96 	bls.w	80068f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	3724      	adds	r7, #36	@ 0x24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	40013800 	.word	0x40013800
 8006be0:	40020000 	.word	0x40020000
 8006be4:	40020400 	.word	0x40020400
 8006be8:	40020800 	.word	0x40020800
 8006bec:	40020c00 	.word	0x40020c00
 8006bf0:	40021000 	.word	0x40021000
 8006bf4:	40021400 	.word	0x40021400
 8006bf8:	40021800 	.word	0x40021800
 8006bfc:	40013c00 	.word	0x40013c00

08006c00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e0c7      	b.n	8006dac <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	fa02 f303 	lsl.w	r3, r2, r3
 8006c24:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	f040 80b7 	bne.w	8006da6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006c38:	4a62      	ldr	r2, [pc, #392]	@ (8006dc4 <HAL_GPIO_DeInit+0x1c4>)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	089b      	lsrs	r3, r3, #2
 8006c3e:	3302      	adds	r3, #2
 8006c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c44:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	220f      	movs	r2, #15
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	4013      	ands	r3, r2
 8006c58:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a5a      	ldr	r2, [pc, #360]	@ (8006dc8 <HAL_GPIO_DeInit+0x1c8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d025      	beq.n	8006cae <HAL_GPIO_DeInit+0xae>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a59      	ldr	r2, [pc, #356]	@ (8006dcc <HAL_GPIO_DeInit+0x1cc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01f      	beq.n	8006caa <HAL_GPIO_DeInit+0xaa>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a58      	ldr	r2, [pc, #352]	@ (8006dd0 <HAL_GPIO_DeInit+0x1d0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d019      	beq.n	8006ca6 <HAL_GPIO_DeInit+0xa6>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a57      	ldr	r2, [pc, #348]	@ (8006dd4 <HAL_GPIO_DeInit+0x1d4>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <HAL_GPIO_DeInit+0xa2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a56      	ldr	r2, [pc, #344]	@ (8006dd8 <HAL_GPIO_DeInit+0x1d8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00d      	beq.n	8006c9e <HAL_GPIO_DeInit+0x9e>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a55      	ldr	r2, [pc, #340]	@ (8006ddc <HAL_GPIO_DeInit+0x1dc>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d007      	beq.n	8006c9a <HAL_GPIO_DeInit+0x9a>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a54      	ldr	r2, [pc, #336]	@ (8006de0 <HAL_GPIO_DeInit+0x1e0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d101      	bne.n	8006c96 <HAL_GPIO_DeInit+0x96>
 8006c92:	2306      	movs	r3, #6
 8006c94:	e00c      	b.n	8006cb0 <HAL_GPIO_DeInit+0xb0>
 8006c96:	2307      	movs	r3, #7
 8006c98:	e00a      	b.n	8006cb0 <HAL_GPIO_DeInit+0xb0>
 8006c9a:	2305      	movs	r3, #5
 8006c9c:	e008      	b.n	8006cb0 <HAL_GPIO_DeInit+0xb0>
 8006c9e:	2304      	movs	r3, #4
 8006ca0:	e006      	b.n	8006cb0 <HAL_GPIO_DeInit+0xb0>
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e004      	b.n	8006cb0 <HAL_GPIO_DeInit+0xb0>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e002      	b.n	8006cb0 <HAL_GPIO_DeInit+0xb0>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e000      	b.n	8006cb0 <HAL_GPIO_DeInit+0xb0>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	f002 0203 	and.w	r2, r2, #3
 8006cb6:	0092      	lsls	r2, r2, #2
 8006cb8:	4093      	lsls	r3, r2
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d132      	bne.n	8006d26 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006cc0:	4b48      	ldr	r3, [pc, #288]	@ (8006de4 <HAL_GPIO_DeInit+0x1e4>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	43db      	mvns	r3, r3
 8006cc8:	4946      	ldr	r1, [pc, #280]	@ (8006de4 <HAL_GPIO_DeInit+0x1e4>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006cce:	4b45      	ldr	r3, [pc, #276]	@ (8006de4 <HAL_GPIO_DeInit+0x1e4>)
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	43db      	mvns	r3, r3
 8006cd6:	4943      	ldr	r1, [pc, #268]	@ (8006de4 <HAL_GPIO_DeInit+0x1e4>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006cdc:	4b41      	ldr	r3, [pc, #260]	@ (8006de4 <HAL_GPIO_DeInit+0x1e4>)
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	493f      	ldr	r1, [pc, #252]	@ (8006de4 <HAL_GPIO_DeInit+0x1e4>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006cea:	4b3e      	ldr	r3, [pc, #248]	@ (8006de4 <HAL_GPIO_DeInit+0x1e4>)
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	493c      	ldr	r1, [pc, #240]	@ (8006de4 <HAL_GPIO_DeInit+0x1e4>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	220f      	movs	r2, #15
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006d08:	4a2e      	ldr	r2, [pc, #184]	@ (8006dc4 <HAL_GPIO_DeInit+0x1c4>)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	089b      	lsrs	r3, r3, #2
 8006d0e:	3302      	adds	r3, #2
 8006d10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	43da      	mvns	r2, r3
 8006d18:	482a      	ldr	r0, [pc, #168]	@ (8006dc4 <HAL_GPIO_DeInit+0x1c4>)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	089b      	lsrs	r3, r3, #2
 8006d1e:	400a      	ands	r2, r1
 8006d20:	3302      	adds	r3, #2
 8006d22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	2103      	movs	r1, #3
 8006d30:	fa01 f303 	lsl.w	r3, r1, r3
 8006d34:	43db      	mvns	r3, r3
 8006d36:	401a      	ands	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	08da      	lsrs	r2, r3, #3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3208      	adds	r2, #8
 8006d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	220f      	movs	r2, #15
 8006d52:	fa02 f303 	lsl.w	r3, r2, r3
 8006d56:	43db      	mvns	r3, r3
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	08d2      	lsrs	r2, r2, #3
 8006d5c:	4019      	ands	r1, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3208      	adds	r2, #8
 8006d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	2103      	movs	r1, #3
 8006d70:	fa01 f303 	lsl.w	r3, r1, r3
 8006d74:	43db      	mvns	r3, r3
 8006d76:	401a      	ands	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	2101      	movs	r1, #1
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	fa01 f303 	lsl.w	r3, r1, r3
 8006d88:	43db      	mvns	r3, r3
 8006d8a:	401a      	ands	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	2103      	movs	r1, #3
 8006d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9e:	43db      	mvns	r3, r3
 8006da0:	401a      	ands	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	3301      	adds	r3, #1
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2b0f      	cmp	r3, #15
 8006db0:	f67f af34 	bls.w	8006c1c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40013800 	.word	0x40013800
 8006dc8:	40020000 	.word	0x40020000
 8006dcc:	40020400 	.word	0x40020400
 8006dd0:	40020800 	.word	0x40020800
 8006dd4:	40020c00 	.word	0x40020c00
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	40021400 	.word	0x40021400
 8006de0:	40021800 	.word	0x40021800
 8006de4:	40013c00 	.word	0x40013c00

08006de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	807b      	strh	r3, [r7, #2]
 8006df4:	4613      	mov	r3, r2
 8006df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006df8:	787b      	ldrb	r3, [r7, #1]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dfe:	887a      	ldrh	r2, [r7, #2]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e04:	e003      	b.n	8006e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e06:	887b      	ldrh	r3, [r7, #2]
 8006e08:	041a      	lsls	r2, r3, #16
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	619a      	str	r2, [r3, #24]
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
	...

08006e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e26:	4b08      	ldr	r3, [pc, #32]	@ (8006e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e28:	695a      	ldr	r2, [r3, #20]
 8006e2a:	88fb      	ldrh	r3, [r7, #6]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d006      	beq.n	8006e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e32:	4a05      	ldr	r2, [pc, #20]	@ (8006e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fa ffa6 	bl	8001d8c <HAL_GPIO_EXTI_Callback>
  }
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	40013c00 	.word	0x40013c00

08006e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e12b      	b.n	80070b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fc f9d4 	bl	8003220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2224      	movs	r2, #36	@ 0x24
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0201 	bic.w	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006eae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006eb0:	f002 f848 	bl	8008f44 <HAL_RCC_GetPCLK1Freq>
 8006eb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4a81      	ldr	r2, [pc, #516]	@ (80070c0 <HAL_I2C_Init+0x274>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d807      	bhi.n	8006ed0 <HAL_I2C_Init+0x84>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a80      	ldr	r2, [pc, #512]	@ (80070c4 <HAL_I2C_Init+0x278>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	bf94      	ite	ls
 8006ec8:	2301      	movls	r3, #1
 8006eca:	2300      	movhi	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	e006      	b.n	8006ede <HAL_I2C_Init+0x92>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a7d      	ldr	r2, [pc, #500]	@ (80070c8 <HAL_I2C_Init+0x27c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	bf94      	ite	ls
 8006ed8:	2301      	movls	r3, #1
 8006eda:	2300      	movhi	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e0e7      	b.n	80070b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4a78      	ldr	r2, [pc, #480]	@ (80070cc <HAL_I2C_Init+0x280>)
 8006eea:	fba2 2303 	umull	r2, r3, r2, r3
 8006eee:	0c9b      	lsrs	r3, r3, #18
 8006ef0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	4a6a      	ldr	r2, [pc, #424]	@ (80070c0 <HAL_I2C_Init+0x274>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d802      	bhi.n	8006f20 <HAL_I2C_Init+0xd4>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	e009      	b.n	8006f34 <HAL_I2C_Init+0xe8>
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
 8006f2a:	4a69      	ldr	r2, [pc, #420]	@ (80070d0 <HAL_I2C_Init+0x284>)
 8006f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f30:	099b      	lsrs	r3, r3, #6
 8006f32:	3301      	adds	r3, #1
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006f46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	495c      	ldr	r1, [pc, #368]	@ (80070c0 <HAL_I2C_Init+0x274>)
 8006f50:	428b      	cmp	r3, r1
 8006f52:	d819      	bhi.n	8006f88 <HAL_I2C_Init+0x13c>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	1e59      	subs	r1, r3, #1
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f62:	1c59      	adds	r1, r3, #1
 8006f64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006f68:	400b      	ands	r3, r1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <HAL_I2C_Init+0x138>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	1e59      	subs	r1, r3, #1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f82:	e051      	b.n	8007028 <HAL_I2C_Init+0x1dc>
 8006f84:	2304      	movs	r3, #4
 8006f86:	e04f      	b.n	8007028 <HAL_I2C_Init+0x1dc>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d111      	bne.n	8006fb4 <HAL_I2C_Init+0x168>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	1e58      	subs	r0, r3, #1
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6859      	ldr	r1, [r3, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	440b      	add	r3, r1
 8006f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	e012      	b.n	8006fda <HAL_I2C_Init+0x18e>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	1e58      	subs	r0, r3, #1
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6859      	ldr	r1, [r3, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	0099      	lsls	r1, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fca:	3301      	adds	r3, #1
 8006fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	bf0c      	ite	eq
 8006fd4:	2301      	moveq	r3, #1
 8006fd6:	2300      	movne	r3, #0
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <HAL_I2C_Init+0x196>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e022      	b.n	8007028 <HAL_I2C_Init+0x1dc>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10e      	bne.n	8007008 <HAL_I2C_Init+0x1bc>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	1e58      	subs	r0, r3, #1
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6859      	ldr	r1, [r3, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	440b      	add	r3, r1
 8006ff8:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007006:	e00f      	b.n	8007028 <HAL_I2C_Init+0x1dc>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	1e58      	subs	r0, r3, #1
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6859      	ldr	r1, [r3, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	0099      	lsls	r1, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	fbb0 f3f3 	udiv	r3, r0, r3
 800701e:	3301      	adds	r3, #1
 8007020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007024:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	6809      	ldr	r1, [r1, #0]
 800702c:	4313      	orrs	r3, r2
 800702e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69da      	ldr	r2, [r3, #28]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007056:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6911      	ldr	r1, [r2, #16]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	68d2      	ldr	r2, [r2, #12]
 8007062:	4311      	orrs	r1, r2
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	430b      	orrs	r3, r1
 800706a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695a      	ldr	r2, [r3, #20]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0201 	orr.w	r2, r2, #1
 8007096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	000186a0 	.word	0x000186a0
 80070c4:	001e847f 	.word	0x001e847f
 80070c8:	003d08ff 	.word	0x003d08ff
 80070cc:	431bde83 	.word	0x431bde83
 80070d0:	10624dd3 	.word	0x10624dd3

080070d4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e021      	b.n	800712a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2224      	movs	r2, #36	@ 0x24
 80070ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0201 	bic.w	r2, r2, #1
 80070fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7fc f8e6 	bl	80032d0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007144:	2b80      	cmp	r3, #128	@ 0x80
 8007146:	d103      	bne.n	8007150 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2200      	movs	r2, #0
 800714e:	611a      	str	r2, [r3, #16]
  }
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	461a      	mov	r2, r3
 8007168:	460b      	mov	r3, r1
 800716a:	817b      	strh	r3, [r7, #10]
 800716c:	4613      	mov	r3, r2
 800716e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b20      	cmp	r3, #32
 800717e:	f040 8081 	bne.w	8007284 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007182:	4b44      	ldr	r3, [pc, #272]	@ (8007294 <HAL_I2C_Master_Transmit_IT+0x138>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	08db      	lsrs	r3, r3, #3
 8007188:	4a43      	ldr	r2, [pc, #268]	@ (8007298 <HAL_I2C_Master_Transmit_IT+0x13c>)
 800718a:	fba2 2303 	umull	r2, r3, r2, r3
 800718e:	0a1a      	lsrs	r2, r3, #8
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	009a      	lsls	r2, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	3b01      	subs	r3, #1
 80071a0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d112      	bne.n	80071ce <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c2:	f043 0220 	orr.w	r2, r3, #32
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80071ca:	2302      	movs	r3, #2
 80071cc:	e05b      	b.n	8007286 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d0df      	beq.n	800719c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d101      	bne.n	80071ea <HAL_I2C_Master_Transmit_IT+0x8e>
 80071e6:	2302      	movs	r3, #2
 80071e8:	e04d      	b.n	8007286 <HAL_I2C_Master_Transmit_IT+0x12a>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d007      	beq.n	8007210 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800721e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2221      	movs	r2, #33	@ 0x21
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2210      	movs	r2, #16
 800722c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	893a      	ldrh	r2, [r7, #8]
 8007240:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007246:	b29a      	uxth	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4a13      	ldr	r2, [pc, #76]	@ (800729c <HAL_I2C_Master_Transmit_IT+0x140>)
 8007250:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8007252:	897a      	ldrh	r2, [r7, #10]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800726e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800727e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	e000      	b.n	8007286 <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007284:	2302      	movs	r3, #2
  }
}
 8007286:	4618      	mov	r0, r3
 8007288:	371c      	adds	r7, #28
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20000000 	.word	0x20000000
 8007298:	14f8b589 	.word	0x14f8b589
 800729c:	ffff0000 	.word	0xffff0000

080072a0 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	607a      	str	r2, [r7, #4]
 80072aa:	461a      	mov	r2, r3
 80072ac:	460b      	mov	r3, r1
 80072ae:	817b      	strh	r3, [r7, #10]
 80072b0:	4613      	mov	r3, r2
 80072b2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	f040 8089 	bne.w	80073d8 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80072c6:	4b48      	ldr	r3, [pc, #288]	@ (80073e8 <HAL_I2C_Master_Receive_IT+0x148>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	08db      	lsrs	r3, r3, #3
 80072cc:	4a47      	ldr	r2, [pc, #284]	@ (80073ec <HAL_I2C_Master_Receive_IT+0x14c>)
 80072ce:	fba2 2303 	umull	r2, r3, r2, r3
 80072d2:	0a1a      	lsrs	r2, r3, #8
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009a      	lsls	r2, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d112      	bne.n	8007312 <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007306:	f043 0220 	orr.w	r2, r3, #32
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800730e:	2302      	movs	r3, #2
 8007310:	e063      	b.n	80073da <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b02      	cmp	r3, #2
 800731e:	d0df      	beq.n	80072e0 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_I2C_Master_Receive_IT+0x8e>
 800732a:	2302      	movs	r3, #2
 800732c:	e055      	b.n	80073da <HAL_I2C_Master_Receive_IT+0x13a>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b01      	cmp	r3, #1
 8007342:	d007      	beq.n	8007354 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2222      	movs	r2, #34	@ 0x22
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2210      	movs	r2, #16
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	893a      	ldrh	r2, [r7, #8]
 8007384:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4a17      	ldr	r2, [pc, #92]	@ (80073f0 <HAL_I2C_Master_Receive_IT+0x150>)
 8007394:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8007396:	897a      	ldrh	r2, [r7, #10]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80073b2:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073c2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073d2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 80073d8:	2302      	movs	r3, #2
  }
}
 80073da:	4618      	mov	r0, r3
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	20000000 	.word	0x20000000
 80073ec:	14f8b589 	.word	0x14f8b589
 80073f0:	ffff0000 	.word	0xffff0000

080073f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007414:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800741c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2b10      	cmp	r3, #16
 8007422:	d003      	beq.n	800742c <HAL_I2C_EV_IRQHandler+0x38>
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b40      	cmp	r3, #64	@ 0x40
 8007428:	f040 80b1 	bne.w	800758e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10d      	bne.n	8007462 <HAL_I2C_EV_IRQHandler+0x6e>
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800744c:	d003      	beq.n	8007456 <HAL_I2C_EV_IRQHandler+0x62>
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007454:	d101      	bne.n	800745a <HAL_I2C_EV_IRQHandler+0x66>
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <HAL_I2C_EV_IRQHandler+0x68>
 800745a:	2300      	movs	r3, #0
 800745c:	2b01      	cmp	r3, #1
 800745e:	f000 8114 	beq.w	800768a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <HAL_I2C_EV_IRQHandler+0x90>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007472:	2b00      	cmp	r3, #0
 8007474:	d006      	beq.n	8007484 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 fc56 	bl	8008d28 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fd5c 	bl	8007f3a <I2C_Master_SB>
 8007482:	e083      	b.n	800758c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f003 0308 	and.w	r3, r3, #8
 800748a:	2b00      	cmp	r3, #0
 800748c:	d008      	beq.n	80074a0 <HAL_I2C_EV_IRQHandler+0xac>
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fdd4 	bl	8008046 <I2C_Master_ADD10>
 800749e:	e075      	b.n	800758c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d008      	beq.n	80074bc <HAL_I2C_EV_IRQHandler+0xc8>
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fdf0 	bl	800809a <I2C_Master_ADDR>
 80074ba:	e067      	b.n	800758c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d036      	beq.n	8007534 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074d4:	f000 80db 	beq.w	800768e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00d      	beq.n	80074fe <HAL_I2C_EV_IRQHandler+0x10a>
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d008      	beq.n	80074fe <HAL_I2C_EV_IRQHandler+0x10a>
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	f003 0304 	and.w	r3, r3, #4
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d103      	bne.n	80074fe <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f9b8 	bl	800786c <I2C_MasterTransmit_TXE>
 80074fc:	e046      	b.n	800758c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 80c2 	beq.w	800768e <HAL_I2C_EV_IRQHandler+0x29a>
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80bc 	beq.w	800768e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	2b21      	cmp	r3, #33	@ 0x21
 800751a:	d103      	bne.n	8007524 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fa41 	bl	80079a4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007522:	e0b4      	b.n	800768e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b40      	cmp	r3, #64	@ 0x40
 8007528:	f040 80b1 	bne.w	800768e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 faaf 	bl	8007a90 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007532:	e0ac      	b.n	800768e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800753e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007542:	f000 80a4 	beq.w	800768e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00d      	beq.n	800756c <HAL_I2C_EV_IRQHandler+0x178>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007556:	2b00      	cmp	r3, #0
 8007558:	d008      	beq.n	800756c <HAL_I2C_EV_IRQHandler+0x178>
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d103      	bne.n	800756c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fb2b 	bl	8007bc0 <I2C_MasterReceive_RXNE>
 800756a:	e00f      	b.n	800758c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 808b 	beq.w	800768e <HAL_I2C_EV_IRQHandler+0x29a>
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 8085 	beq.w	800768e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fbe3 	bl	8007d50 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800758a:	e080      	b.n	800768e <HAL_I2C_EV_IRQHandler+0x29a>
 800758c:	e07f      	b.n	800768e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d004      	beq.n	80075a0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	e007      	b.n	80075b0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d011      	beq.n	80075de <HAL_I2C_EV_IRQHandler+0x1ea>
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00c      	beq.n	80075de <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80075d4:	69b9      	ldr	r1, [r7, #24]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 ffae 	bl	8008538 <I2C_Slave_ADDR>
 80075dc:	e05a      	b.n	8007694 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	f003 0310 	and.w	r3, r3, #16
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <HAL_I2C_EV_IRQHandler+0x206>
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 ffe8 	bl	80085c8 <I2C_Slave_STOPF>
 80075f8:	e04c      	b.n	8007694 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	2b21      	cmp	r3, #33	@ 0x21
 80075fe:	d002      	beq.n	8007606 <HAL_I2C_EV_IRQHandler+0x212>
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	2b29      	cmp	r3, #41	@ 0x29
 8007604:	d120      	bne.n	8007648 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00d      	beq.n	800762c <HAL_I2C_EV_IRQHandler+0x238>
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007616:	2b00      	cmp	r3, #0
 8007618:	d008      	beq.n	800762c <HAL_I2C_EV_IRQHandler+0x238>
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d103      	bne.n	800762c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fec9 	bl	80083bc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800762a:	e032      	b.n	8007692 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b00      	cmp	r3, #0
 8007634:	d02d      	beq.n	8007692 <HAL_I2C_EV_IRQHandler+0x29e>
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800763c:	2b00      	cmp	r3, #0
 800763e:	d028      	beq.n	8007692 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fef8 	bl	8008436 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007646:	e024      	b.n	8007692 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00d      	beq.n	800766e <HAL_I2C_EV_IRQHandler+0x27a>
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007658:	2b00      	cmp	r3, #0
 800765a:	d008      	beq.n	800766e <HAL_I2C_EV_IRQHandler+0x27a>
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b00      	cmp	r3, #0
 8007664:	d103      	bne.n	800766e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 ff06 	bl	8008478 <I2C_SlaveReceive_RXNE>
 800766c:	e012      	b.n	8007694 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00d      	beq.n	8007694 <HAL_I2C_EV_IRQHandler+0x2a0>
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800767e:	2b00      	cmp	r3, #0
 8007680:	d008      	beq.n	8007694 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 ff36 	bl	80084f4 <I2C_SlaveReceive_BTF>
 8007688:	e004      	b.n	8007694 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800768a:	bf00      	nop
 800768c:	e002      	b.n	8007694 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800768e:	bf00      	nop
 8007690:	e000      	b.n	8007694 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007692:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007694:	3720      	adds	r7, #32
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b08a      	sub	sp, #40	@ 0x28
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80076b2:	2300      	movs	r3, #0
 80076b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076bc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00d      	beq.n	80076e4 <HAL_I2C_ER_IRQHandler+0x4a>
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d008      	beq.n	80076e4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	f043 0301 	orr.w	r3, r3, #1
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80076e2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00d      	beq.n	800770a <HAL_I2C_ER_IRQHandler+0x70>
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	f043 0302 	orr.w	r3, r3, #2
 80076fe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007708:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007710:	2b00      	cmp	r3, #0
 8007712:	d03e      	beq.n	8007792 <HAL_I2C_ER_IRQHandler+0xf8>
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800771a:	2b00      	cmp	r3, #0
 800771c:	d039      	beq.n	8007792 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800771e:	7efb      	ldrb	r3, [r7, #27]
 8007720:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007726:	b29b      	uxth	r3, r3
 8007728:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007730:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007736:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007738:	7ebb      	ldrb	r3, [r7, #26]
 800773a:	2b20      	cmp	r3, #32
 800773c:	d112      	bne.n	8007764 <HAL_I2C_ER_IRQHandler+0xca>
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10f      	bne.n	8007764 <HAL_I2C_ER_IRQHandler+0xca>
 8007744:	7cfb      	ldrb	r3, [r7, #19]
 8007746:	2b21      	cmp	r3, #33	@ 0x21
 8007748:	d008      	beq.n	800775c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800774a:	7cfb      	ldrb	r3, [r7, #19]
 800774c:	2b29      	cmp	r3, #41	@ 0x29
 800774e:	d005      	beq.n	800775c <HAL_I2C_ER_IRQHandler+0xc2>
 8007750:	7cfb      	ldrb	r3, [r7, #19]
 8007752:	2b28      	cmp	r3, #40	@ 0x28
 8007754:	d106      	bne.n	8007764 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b21      	cmp	r3, #33	@ 0x21
 800775a:	d103      	bne.n	8007764 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 f863 	bl	8008828 <I2C_Slave_AF>
 8007762:	e016      	b.n	8007792 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800776c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	f043 0304 	orr.w	r3, r3, #4
 8007774:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007776:	7efb      	ldrb	r3, [r7, #27]
 8007778:	2b10      	cmp	r3, #16
 800777a:	d002      	beq.n	8007782 <HAL_I2C_ER_IRQHandler+0xe8>
 800777c:	7efb      	ldrb	r3, [r7, #27]
 800777e:	2b40      	cmp	r3, #64	@ 0x40
 8007780:	d107      	bne.n	8007792 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007790:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00d      	beq.n	80077b8 <HAL_I2C_ER_IRQHandler+0x11e>
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d008      	beq.n	80077b8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	f043 0308 	orr.w	r3, r3, #8
 80077ac:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80077b6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d008      	beq.n	80077d0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 f8a0 	bl	8008910 <I2C_ITError>
  }
}
 80077d0:	bf00      	nop
 80077d2:	3728      	adds	r7, #40	@ 0x28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
 800780c:	4613      	mov	r3, r2
 800780e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800787a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007882:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800788e:	2b00      	cmp	r3, #0
 8007890:	d150      	bne.n	8007934 <I2C_MasterTransmit_TXE+0xc8>
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	2b21      	cmp	r3, #33	@ 0x21
 8007896:	d14d      	bne.n	8007934 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b08      	cmp	r3, #8
 800789c:	d01d      	beq.n	80078da <I2C_MasterTransmit_TXE+0x6e>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d01a      	beq.n	80078da <I2C_MasterTransmit_TXE+0x6e>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80078aa:	d016      	beq.n	80078da <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80078ba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2211      	movs	r2, #17
 80078c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7fa fa86 	bl	8001de4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80078d8:	e060      	b.n	800799c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80078e8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078f8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b40      	cmp	r3, #64	@ 0x40
 8007912:	d107      	bne.n	8007924 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff ff87 	bl	8007830 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007922:	e03b      	b.n	800799c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7fa fa59 	bl	8001de4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007932:	e033      	b.n	800799c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	2b21      	cmp	r3, #33	@ 0x21
 8007938:	d005      	beq.n	8007946 <I2C_MasterTransmit_TXE+0xda>
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b40      	cmp	r3, #64	@ 0x40
 800793e:	d12d      	bne.n	800799c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	2b22      	cmp	r3, #34	@ 0x22
 8007944:	d12a      	bne.n	800799c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800794a:	b29b      	uxth	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d108      	bne.n	8007962 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800795e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007960:	e01c      	b.n	800799c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b40      	cmp	r3, #64	@ 0x40
 800796c:	d103      	bne.n	8007976 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f88e 	bl	8007a90 <I2C_MemoryTransmit_TXE_BTF>
}
 8007974:	e012      	b.n	800799c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007990:	b29b      	uxth	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	b29a      	uxth	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800799a:	e7ff      	b.n	800799c <I2C_MasterTransmit_TXE+0x130>
 800799c:	bf00      	nop
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b21      	cmp	r3, #33	@ 0x21
 80079bc:	d164      	bne.n	8007a88 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d012      	beq.n	80079ee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079cc:	781a      	ldrb	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80079ec:	e04c      	b.n	8007a88 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d01d      	beq.n	8007a30 <I2C_MasterTransmit_BTF+0x8c>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	d01a      	beq.n	8007a30 <I2C_MasterTransmit_BTF+0x8c>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a00:	d016      	beq.n	8007a30 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007a10:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2211      	movs	r2, #17
 8007a16:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7fa f9db 	bl	8001de4 <HAL_I2C_MasterTxCpltCallback>
}
 8007a2e:	e02b      	b.n	8007a88 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007a3e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a4e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b40      	cmp	r3, #64	@ 0x40
 8007a68:	d107      	bne.n	8007a7a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff fedc 	bl	8007830 <HAL_I2C_MemTxCpltCallback>
}
 8007a78:	e006      	b.n	8007a88 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7fa f9ae 	bl	8001de4 <HAL_I2C_MasterTxCpltCallback>
}
 8007a88:	bf00      	nop
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d11d      	bne.n	8007ae4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d10b      	bne.n	8007ac8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac0:	1c9a      	adds	r2, r3, #2
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8007ac6:	e077      	b.n	8007bb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	121b      	asrs	r3, r3, #8
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007ae2:	e069      	b.n	8007bb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d10b      	bne.n	8007b04 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007b02:	e059      	b.n	8007bb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d152      	bne.n	8007bb2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	2b22      	cmp	r3, #34	@ 0x22
 8007b10:	d10d      	bne.n	8007b2e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b20:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007b2c:	e044      	b.n	8007bb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d015      	beq.n	8007b64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	2b21      	cmp	r3, #33	@ 0x21
 8007b3c:	d112      	bne.n	8007b64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007b62:	e029      	b.n	8007bb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d124      	bne.n	8007bb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	2b21      	cmp	r3, #33	@ 0x21
 8007b72:	d121      	bne.n	8007bb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007b82:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff fe40 	bl	8007830 <HAL_I2C_MemTxCpltCallback>
}
 8007bb0:	e002      	b.n	8007bb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff fabd 	bl	8007132 <I2C_Flush_DR>
}
 8007bb8:	bf00      	nop
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b22      	cmp	r3, #34	@ 0x22
 8007bd2:	f040 80b9 	bne.w	8007d48 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d921      	bls.n	8007c2e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	f040 8096 	bne.w	8007d48 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c2a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007c2c:	e08c      	b.n	8007d48 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d07f      	beq.n	8007d36 <I2C_MasterReceive_RXNE+0x176>
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d002      	beq.n	8007c42 <I2C_MasterReceive_RXNE+0x82>
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d179      	bne.n	8007d36 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f001 f83e 	bl	8008cc4 <I2C_WaitOnSTOPRequestThroughIT>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d14c      	bne.n	8007ce8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c5c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c78:	b2d2      	uxtb	r2, r2
 8007c7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b40      	cmp	r3, #64	@ 0x40
 8007ca6:	d10a      	bne.n	8007cbe <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff fdc4 	bl	8007844 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007cbc:	e044      	b.n	8007d48 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d002      	beq.n	8007cd2 <I2C_MasterReceive_RXNE+0x112>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b20      	cmp	r3, #32
 8007cd0:	d103      	bne.n	8007cda <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8007cd8:	e002      	b.n	8007ce0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2212      	movs	r2, #18
 8007cde:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7fa f869 	bl	8001db8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007ce6:	e02f      	b.n	8007d48 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007cf6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7fa f86e 	bl	8001e10 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007d34:	e008      	b.n	8007d48 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d44:	605a      	str	r2, [r3, #4]
}
 8007d46:	e7ff      	b.n	8007d48 <I2C_MasterReceive_RXNE+0x188>
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d11b      	bne.n	8007da0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d76:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691a      	ldr	r2, [r3, #16]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007d9e:	e0c8      	b.n	8007f32 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d129      	bne.n	8007dfe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007db8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d00a      	beq.n	8007dd6 <I2C_MasterReceive_BTF+0x86>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d007      	beq.n	8007dd6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dd4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007dfc:	e099      	b.n	8007f32 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	f040 8081 	bne.w	8007f0c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d002      	beq.n	8007e16 <I2C_MasterReceive_BTF+0xc6>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d108      	bne.n	8007e28 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	e019      	b.n	8007e5c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d002      	beq.n	8007e34 <I2C_MasterReceive_BTF+0xe4>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d108      	bne.n	8007e46 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	e00a      	b.n	8007e5c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d007      	beq.n	8007e5c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e66:	b2d2      	uxtb	r2, r2
 8007e68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	691a      	ldr	r2, [r3, #16]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8c:	b2d2      	uxtb	r2, r2
 8007e8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007eb6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b40      	cmp	r3, #64	@ 0x40
 8007eca:	d10a      	bne.n	8007ee2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff fcb2 	bl	8007844 <HAL_I2C_MemRxCpltCallback>
}
 8007ee0:	e027      	b.n	8007f32 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b08      	cmp	r3, #8
 8007eee:	d002      	beq.n	8007ef6 <I2C_MasterReceive_BTF+0x1a6>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b20      	cmp	r3, #32
 8007ef4:	d103      	bne.n	8007efe <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	631a      	str	r2, [r3, #48]	@ 0x30
 8007efc:	e002      	b.n	8007f04 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2212      	movs	r2, #18
 8007f02:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7f9 ff57 	bl	8001db8 <HAL_I2C_MasterRxCpltCallback>
}
 8007f0a:	e012      	b.n	8007f32 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007f32:	bf00      	nop
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b40      	cmp	r3, #64	@ 0x40
 8007f4c:	d117      	bne.n	8007f7e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d109      	bne.n	8007f6a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007f66:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007f68:	e067      	b.n	800803a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f043 0301 	orr.w	r3, r3, #1
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	611a      	str	r2, [r3, #16]
}
 8007f7c:	e05d      	b.n	800803a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f86:	d133      	bne.n	8007ff0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b21      	cmp	r3, #33	@ 0x21
 8007f92:	d109      	bne.n	8007fa8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007fa4:	611a      	str	r2, [r3, #16]
 8007fa6:	e008      	b.n	8007fba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	f043 0301 	orr.w	r3, r3, #1
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <I2C_Master_SB+0x92>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d108      	bne.n	8007fde <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d032      	beq.n	800803a <I2C_Master_SB+0x100>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d02d      	beq.n	800803a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fec:	605a      	str	r2, [r3, #4]
}
 8007fee:	e024      	b.n	800803a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10e      	bne.n	8008016 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	11db      	asrs	r3, r3, #7
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f003 0306 	and.w	r3, r3, #6
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f063 030f 	orn	r3, r3, #15
 800800c:	b2da      	uxtb	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	611a      	str	r2, [r3, #16]
}
 8008014:	e011      	b.n	800803a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800801a:	2b01      	cmp	r3, #1
 800801c:	d10d      	bne.n	800803a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008022:	b29b      	uxth	r3, r3
 8008024:	11db      	asrs	r3, r3, #7
 8008026:	b2db      	uxtb	r3, r3
 8008028:	f003 0306 	and.w	r3, r3, #6
 800802c:	b2db      	uxtb	r3, r3
 800802e:	f063 030e 	orn	r3, r3, #14
 8008032:	b2da      	uxtb	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	611a      	str	r2, [r3, #16]
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008052:	b2da      	uxtb	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <I2C_Master_ADD10+0x26>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d108      	bne.n	800807e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00c      	beq.n	800808e <I2C_Master_ADD10+0x48>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800808c:	605a      	str	r2, [r3, #4]
  }
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800809a:	b480      	push	{r7}
 800809c:	b091      	sub	sp, #68	@ 0x44
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b22      	cmp	r3, #34	@ 0x22
 80080c2:	f040 8169 	bne.w	8008398 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10f      	bne.n	80080ee <I2C_Master_ADDR+0x54>
 80080ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80080d2:	2b40      	cmp	r3, #64	@ 0x40
 80080d4:	d10b      	bne.n	80080ee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080d6:	2300      	movs	r3, #0
 80080d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	e160      	b.n	80083b0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d11d      	bne.n	8008132 <I2C_Master_ADDR+0x98>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80080fe:	d118      	bne.n	8008132 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008100:	2300      	movs	r3, #0
 8008102:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008124:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	651a      	str	r2, [r3, #80]	@ 0x50
 8008130:	e13e      	b.n	80083b0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008136:	b29b      	uxth	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	d113      	bne.n	8008164 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800813c:	2300      	movs	r3, #0
 800813e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	e115      	b.n	8008390 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b01      	cmp	r3, #1
 800816c:	f040 808a 	bne.w	8008284 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008172:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008176:	d137      	bne.n	80081e8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008186:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008196:	d113      	bne.n	80081c0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081a6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081a8:	2300      	movs	r3, #0
 80081aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80081bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081be:	e0e7      	b.n	8008390 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081c0:	2300      	movs	r3, #0
 80081c2:	623b      	str	r3, [r7, #32]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	623b      	str	r3, [r7, #32]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	623b      	str	r3, [r7, #32]
 80081d4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e0d3      	b.n	8008390 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80081e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ea:	2b08      	cmp	r3, #8
 80081ec:	d02e      	beq.n	800824c <I2C_Master_ADDR+0x1b2>
 80081ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	d02b      	beq.n	800824c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80081f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f6:	2b12      	cmp	r3, #18
 80081f8:	d102      	bne.n	8008200 <I2C_Master_ADDR+0x166>
 80081fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d125      	bne.n	800824c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008202:	2b04      	cmp	r3, #4
 8008204:	d00e      	beq.n	8008224 <I2C_Master_ADDR+0x18a>
 8008206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008208:	2b02      	cmp	r3, #2
 800820a:	d00b      	beq.n	8008224 <I2C_Master_ADDR+0x18a>
 800820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820e:	2b10      	cmp	r3, #16
 8008210:	d008      	beq.n	8008224 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	e007      	b.n	8008234 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008232:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008234:	2300      	movs	r3, #0
 8008236:	61fb      	str	r3, [r7, #28]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	61fb      	str	r3, [r7, #28]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	61fb      	str	r3, [r7, #28]
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	e0a1      	b.n	8008390 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800825a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800825c:	2300      	movs	r3, #0
 800825e:	61bb      	str	r3, [r7, #24]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	61bb      	str	r3, [r7, #24]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	61bb      	str	r3, [r7, #24]
 8008270:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	e085      	b.n	8008390 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008288:	b29b      	uxth	r3, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d14d      	bne.n	800832a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008290:	2b04      	cmp	r3, #4
 8008292:	d016      	beq.n	80082c2 <I2C_Master_ADDR+0x228>
 8008294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008296:	2b02      	cmp	r3, #2
 8008298:	d013      	beq.n	80082c2 <I2C_Master_ADDR+0x228>
 800829a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829c:	2b10      	cmp	r3, #16
 800829e:	d010      	beq.n	80082c2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082ae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	e007      	b.n	80082d2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082d0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082e0:	d117      	bne.n	8008312 <I2C_Master_ADDR+0x278>
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80082e8:	d00b      	beq.n	8008302 <I2C_Master_ADDR+0x268>
 80082ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d008      	beq.n	8008302 <I2C_Master_ADDR+0x268>
 80082f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d005      	beq.n	8008302 <I2C_Master_ADDR+0x268>
 80082f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f8:	2b10      	cmp	r3, #16
 80082fa:	d002      	beq.n	8008302 <I2C_Master_ADDR+0x268>
 80082fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fe:	2b20      	cmp	r3, #32
 8008300:	d107      	bne.n	8008312 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008310:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	e032      	b.n	8008390 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008338:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008344:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008348:	d117      	bne.n	800837a <I2C_Master_ADDR+0x2e0>
 800834a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008350:	d00b      	beq.n	800836a <I2C_Master_ADDR+0x2d0>
 8008352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008354:	2b01      	cmp	r3, #1
 8008356:	d008      	beq.n	800836a <I2C_Master_ADDR+0x2d0>
 8008358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835a:	2b08      	cmp	r3, #8
 800835c:	d005      	beq.n	800836a <I2C_Master_ADDR+0x2d0>
 800835e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008360:	2b10      	cmp	r3, #16
 8008362:	d002      	beq.n	800836a <I2C_Master_ADDR+0x2d0>
 8008364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008366:	2b20      	cmp	r3, #32
 8008368:	d107      	bne.n	800837a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008378:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800837a:	2300      	movs	r3, #0
 800837c:	613b      	str	r3, [r7, #16]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	613b      	str	r3, [r7, #16]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	613b      	str	r3, [r7, #16]
 800838e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008396:	e00b      	b.n	80083b0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
}
 80083ae:	e7ff      	b.n	80083b0 <I2C_Master_ADDR+0x316>
 80083b0:	bf00      	nop
 80083b2:	3744      	adds	r7, #68	@ 0x44
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d02b      	beq.n	800842e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083da:	781a      	ldrb	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	3b01      	subs	r3, #1
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083fe:	b29b      	uxth	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d114      	bne.n	800842e <I2C_SlaveTransmit_TXE+0x72>
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	2b29      	cmp	r3, #41	@ 0x29
 8008408:	d111      	bne.n	800842e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008418:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2221      	movs	r2, #33	@ 0x21
 800841e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2228      	movs	r2, #40	@ 0x28
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff f9d5 	bl	80077d8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800842e:	bf00      	nop
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008442:	b29b      	uxth	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d011      	beq.n	800846c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008462:	b29b      	uxth	r3, r3
 8008464:	3b01      	subs	r3, #1
 8008466:	b29a      	uxth	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008486:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d02c      	beq.n	80084ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d114      	bne.n	80084ec <I2C_SlaveReceive_RXNE+0x74>
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80084c6:	d111      	bne.n	80084ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2222      	movs	r2, #34	@ 0x22
 80084dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2228      	movs	r2, #40	@ 0x28
 80084e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff f980 	bl	80077ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80084ec:	bf00      	nop
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008500:	b29b      	uxth	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d012      	beq.n	800852c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	691a      	ldr	r2, [r3, #16]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008510:	b2d2      	uxtb	r2, r2
 8008512:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800854c:	b2db      	uxtb	r3, r3
 800854e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008552:	2b28      	cmp	r3, #40	@ 0x28
 8008554:	d125      	bne.n	80085a2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008564:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008570:	2301      	movs	r3, #1
 8008572:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857a:	2b00      	cmp	r3, #0
 800857c:	d103      	bne.n	8008586 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	81bb      	strh	r3, [r7, #12]
 8008584:	e002      	b.n	800858c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008594:	89ba      	ldrh	r2, [r7, #12]
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff f930 	bl	8007800 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80085a0:	e00e      	b.n	80085c0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085a2:	2300      	movs	r3, #0
 80085a4:	60bb      	str	r3, [r7, #8]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	60bb      	str	r3, [r7, #8]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	60bb      	str	r3, [r7, #8]
 80085b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80085e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80085e8:	2300      	movs	r3, #0
 80085ea:	60bb      	str	r3, [r7, #8]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	60bb      	str	r3, [r7, #8]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0201 	orr.w	r2, r2, #1
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008614:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008624:	d172      	bne.n	800870c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	2b22      	cmp	r3, #34	@ 0x22
 800862a:	d002      	beq.n	8008632 <I2C_Slave_STOPF+0x6a>
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008630:	d135      	bne.n	800869e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	b29a      	uxth	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008644:	b29b      	uxth	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d005      	beq.n	8008656 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864e:	f043 0204 	orr.w	r2, r3, #4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008664:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe f925 	bl	80068ba <HAL_DMA_GetState>
 8008670:	4603      	mov	r3, r0
 8008672:	2b01      	cmp	r3, #1
 8008674:	d049      	beq.n	800870a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867a:	4a69      	ldr	r2, [pc, #420]	@ (8008820 <I2C_Slave_STOPF+0x258>)
 800867c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe f8f7 	bl	8006876 <HAL_DMA_Abort_IT>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d03d      	beq.n	800870a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008698:	4610      	mov	r0, r2
 800869a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800869c:	e035      	b.n	800870a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ba:	f043 0204 	orr.w	r2, r3, #4
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe f8ef 	bl	80068ba <HAL_DMA_GetState>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d014      	beq.n	800870c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086e6:	4a4e      	ldr	r2, [pc, #312]	@ (8008820 <I2C_Slave_STOPF+0x258>)
 80086e8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe f8c1 	bl	8006876 <HAL_DMA_Abort_IT>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d008      	beq.n	800870c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008704:	4610      	mov	r0, r2
 8008706:	4798      	blx	r3
 8008708:	e000      	b.n	800870c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800870a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d03e      	beq.n	8008794 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b04      	cmp	r3, #4
 8008722:	d112      	bne.n	800874a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	691a      	ldr	r2, [r3, #16]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008740:	b29b      	uxth	r3, r3
 8008742:	3b01      	subs	r3, #1
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008754:	2b40      	cmp	r3, #64	@ 0x40
 8008756:	d112      	bne.n	800877e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691a      	ldr	r2, [r3, #16]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008762:	b2d2      	uxtb	r2, r2
 8008764:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008774:	b29b      	uxth	r3, r3
 8008776:	3b01      	subs	r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008782:	b29b      	uxth	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d005      	beq.n	8008794 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878c:	f043 0204 	orr.w	r2, r3, #4
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f8b7 	bl	8008910 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80087a2:	e039      	b.n	8008818 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80087a8:	d109      	bne.n	80087be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2228      	movs	r2, #40	@ 0x28
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff f817 	bl	80077ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b28      	cmp	r3, #40	@ 0x28
 80087c8:	d111      	bne.n	80087ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a15      	ldr	r2, [pc, #84]	@ (8008824 <I2C_Slave_STOPF+0x25c>)
 80087ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff f818 	bl	800781c <HAL_I2C_ListenCpltCallback>
}
 80087ec:	e014      	b.n	8008818 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f2:	2b22      	cmp	r3, #34	@ 0x22
 80087f4:	d002      	beq.n	80087fc <I2C_Slave_STOPF+0x234>
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	2b22      	cmp	r3, #34	@ 0x22
 80087fa:	d10d      	bne.n	8008818 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2220      	movs	r2, #32
 8008806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7fe ffea 	bl	80077ec <HAL_I2C_SlaveRxCpltCallback>
}
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	08008b75 	.word	0x08008b75
 8008824:	ffff0000 	.word	0xffff0000

08008828 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008836:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b08      	cmp	r3, #8
 8008842:	d002      	beq.n	800884a <I2C_Slave_AF+0x22>
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2b20      	cmp	r3, #32
 8008848:	d129      	bne.n	800889e <I2C_Slave_AF+0x76>
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	2b28      	cmp	r3, #40	@ 0x28
 800884e:	d126      	bne.n	800889e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a2e      	ldr	r2, [pc, #184]	@ (800890c <I2C_Slave_AF+0xe4>)
 8008854:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008864:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800886e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800887e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2220      	movs	r2, #32
 800888a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7fe ffc0 	bl	800781c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800889c:	e031      	b.n	8008902 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	2b21      	cmp	r3, #33	@ 0x21
 80088a2:	d129      	bne.n	80088f8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a19      	ldr	r2, [pc, #100]	@ (800890c <I2C_Slave_AF+0xe4>)
 80088a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2221      	movs	r2, #33	@ 0x21
 80088ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80088ce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80088d8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088e8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7fe fc21 	bl	8007132 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7fe ff71 	bl	80077d8 <HAL_I2C_SlaveTxCpltCallback>
}
 80088f6:	e004      	b.n	8008902 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008900:	615a      	str	r2, [r3, #20]
}
 8008902:	bf00      	nop
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	ffff0000 	.word	0xffff0000

08008910 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800891e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008926:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	2b10      	cmp	r3, #16
 800892c:	d002      	beq.n	8008934 <I2C_ITError+0x24>
 800892e:	7bbb      	ldrb	r3, [r7, #14]
 8008930:	2b40      	cmp	r3, #64	@ 0x40
 8008932:	d10a      	bne.n	800894a <I2C_ITError+0x3a>
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	2b22      	cmp	r3, #34	@ 0x22
 8008938:	d107      	bne.n	800894a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008948:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008950:	2b28      	cmp	r3, #40	@ 0x28
 8008952:	d107      	bne.n	8008964 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2228      	movs	r2, #40	@ 0x28
 800895e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008962:	e015      	b.n	8008990 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800896e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008972:	d00a      	beq.n	800898a <I2C_ITError+0x7a>
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	2b60      	cmp	r3, #96	@ 0x60
 8008978:	d007      	beq.n	800898a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800899a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800899e:	d162      	bne.n	8008a66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80089ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d020      	beq.n	8008a00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c2:	4a6a      	ldr	r2, [pc, #424]	@ (8008b6c <I2C_ITError+0x25c>)
 80089c4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fd ff53 	bl	8006876 <HAL_DMA_Abort_IT>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 8089 	beq.w	8008aea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 0201 	bic.w	r2, r2, #1
 80089e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2220      	movs	r2, #32
 80089ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80089fa:	4610      	mov	r0, r2
 80089fc:	4798      	blx	r3
 80089fe:	e074      	b.n	8008aea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a04:	4a59      	ldr	r2, [pc, #356]	@ (8008b6c <I2C_ITError+0x25c>)
 8008a06:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fd ff32 	bl	8006876 <HAL_DMA_Abort_IT>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d068      	beq.n	8008aea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a22:	2b40      	cmp	r3, #64	@ 0x40
 8008a24:	d10b      	bne.n	8008a3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 0201 	bic.w	r2, r2, #1
 8008a4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	e041      	b.n	8008aea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b60      	cmp	r3, #96	@ 0x60
 8008a70:	d125      	bne.n	8008abe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a8a:	2b40      	cmp	r3, #64	@ 0x40
 8008a8c:	d10b      	bne.n	8008aa6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a98:	b2d2      	uxtb	r2, r2
 8008a9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f022 0201 	bic.w	r2, r2, #1
 8008ab4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7fe fece 	bl	8007858 <HAL_I2C_AbortCpltCallback>
 8008abc:	e015      	b.n	8008aea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ac8:	2b40      	cmp	r3, #64	@ 0x40
 8008aca:	d10b      	bne.n	8008ae4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	691a      	ldr	r2, [r3, #16]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7f9 f993 	bl	8001e10 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10e      	bne.n	8008b18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d109      	bne.n	8008b18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d104      	bne.n	8008b18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d007      	beq.n	8008b28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008b26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b04      	cmp	r3, #4
 8008b3a:	d113      	bne.n	8008b64 <I2C_ITError+0x254>
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	2b28      	cmp	r3, #40	@ 0x28
 8008b40:	d110      	bne.n	8008b64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a0a      	ldr	r2, [pc, #40]	@ (8008b70 <I2C_ITError+0x260>)
 8008b46:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7fe fe5c 	bl	800781c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008b64:	bf00      	nop
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	08008b75 	.word	0x08008b75
 8008b70:	ffff0000 	.word	0xffff0000

08008b74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b84:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b8c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8008cbc <I2C_DMAAbort+0x148>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	08db      	lsrs	r3, r3, #3
 8008b94:	4a4a      	ldr	r2, [pc, #296]	@ (8008cc0 <I2C_DMAAbort+0x14c>)
 8008b96:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9a:	0a1a      	lsrs	r2, r3, #8
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	00da      	lsls	r2, r3, #3
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d106      	bne.n	8008bbc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb2:	f043 0220 	orr.w	r2, r3, #32
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008bba:	e00a      	b.n	8008bd2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bd0:	d0ea      	beq.n	8008ba8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bde:	2200      	movs	r2, #0
 8008be0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bee:	2200      	movs	r2, #0
 8008bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c00:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2200      	movs	r2, #0
 8008c06:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c14:	2200      	movs	r2, #0
 8008c16:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c24:	2200      	movs	r2, #0
 8008c26:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0201 	bic.w	r2, r2, #1
 8008c36:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b60      	cmp	r3, #96	@ 0x60
 8008c42:	d10e      	bne.n	8008c62 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2200      	movs	r2, #0
 8008c58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008c5a:	6978      	ldr	r0, [r7, #20]
 8008c5c:	f7fe fdfc 	bl	8007858 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008c60:	e027      	b.n	8008cb2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c62:	7cfb      	ldrb	r3, [r7, #19]
 8008c64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008c68:	2b28      	cmp	r3, #40	@ 0x28
 8008c6a:	d117      	bne.n	8008c9c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f042 0201 	orr.w	r2, r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2228      	movs	r2, #40	@ 0x28
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008c9a:	e007      	b.n	8008cac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008cac:	6978      	ldr	r0, [r7, #20]
 8008cae:	f7f9 f8af 	bl	8001e10 <HAL_I2C_ErrorCallback>
}
 8008cb2:	bf00      	nop
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000000 	.word	0x20000000
 8008cc0:	14f8b589 	.word	0x14f8b589

08008cc4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008cd0:	4b13      	ldr	r3, [pc, #76]	@ (8008d20 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	08db      	lsrs	r3, r3, #3
 8008cd6:	4a13      	ldr	r2, [pc, #76]	@ (8008d24 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cdc:	0a1a      	lsrs	r2, r3, #8
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d107      	bne.n	8008d02 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf6:	f043 0220 	orr.w	r2, r3, #32
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e008      	b.n	8008d14 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d10:	d0e9      	beq.n	8008ce6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	20000000 	.word	0x20000000
 8008d24:	14f8b589 	.word	0x14f8b589

08008d28 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d34:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008d38:	d103      	bne.n	8008d42 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008d40:	e007      	b.n	8008d52 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d46:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008d4a:	d102      	bne.n	8008d52 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2208      	movs	r2, #8
 8008d50:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
	...

08008d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e0cc      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d74:	4b68      	ldr	r3, [pc, #416]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 030f 	and.w	r3, r3, #15
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d90c      	bls.n	8008d9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d82:	4b65      	ldr	r3, [pc, #404]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	b2d2      	uxtb	r2, r2
 8008d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d8a:	4b63      	ldr	r3, [pc, #396]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 030f 	and.w	r3, r3, #15
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d001      	beq.n	8008d9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e0b8      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d020      	beq.n	8008dea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d005      	beq.n	8008dc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008db4:	4b59      	ldr	r3, [pc, #356]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	4a58      	ldr	r2, [pc, #352]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008dba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008dbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0308 	and.w	r3, r3, #8
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d005      	beq.n	8008dd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008dcc:	4b53      	ldr	r3, [pc, #332]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	4a52      	ldr	r2, [pc, #328]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008dd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008dd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dd8:	4b50      	ldr	r3, [pc, #320]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	494d      	ldr	r1, [pc, #308]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d044      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d107      	bne.n	8008e0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dfe:	4b47      	ldr	r3, [pc, #284]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d119      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e07f      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d003      	beq.n	8008e1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d107      	bne.n	8008e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e06f      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e067      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e3e:	4b37      	ldr	r3, [pc, #220]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f023 0203 	bic.w	r2, r3, #3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	4934      	ldr	r1, [pc, #208]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e50:	f7fc ffb2 	bl	8005db8 <HAL_GetTick>
 8008e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e56:	e00a      	b.n	8008e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e58:	f7fc ffae 	bl	8005db8 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e04f      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 020c 	and.w	r2, r3, #12
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d1eb      	bne.n	8008e58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e80:	4b25      	ldr	r3, [pc, #148]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 030f 	and.w	r3, r3, #15
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d20c      	bcs.n	8008ea8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e8e:	4b22      	ldr	r3, [pc, #136]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	b2d2      	uxtb	r2, r2
 8008e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e96:	4b20      	ldr	r3, [pc, #128]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 030f 	and.w	r3, r3, #15
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d001      	beq.n	8008ea8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e032      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d008      	beq.n	8008ec6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008eb4:	4b19      	ldr	r3, [pc, #100]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	4916      	ldr	r1, [pc, #88]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0308 	and.w	r3, r3, #8
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d009      	beq.n	8008ee6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ed2:	4b12      	ldr	r3, [pc, #72]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	490e      	ldr	r1, [pc, #56]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008ee6:	f000 f855 	bl	8008f94 <HAL_RCC_GetSysClockFreq>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b0b      	ldr	r3, [pc, #44]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	091b      	lsrs	r3, r3, #4
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	490a      	ldr	r1, [pc, #40]	@ (8008f20 <HAL_RCC_ClockConfig+0x1c0>)
 8008ef8:	5ccb      	ldrb	r3, [r1, r3]
 8008efa:	fa22 f303 	lsr.w	r3, r2, r3
 8008efe:	4a09      	ldr	r2, [pc, #36]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c4>)
 8008f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f02:	4b09      	ldr	r3, [pc, #36]	@ (8008f28 <HAL_RCC_ClockConfig+0x1c8>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fc ff12 	bl	8005d30 <HAL_InitTick>

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	40023c00 	.word	0x40023c00
 8008f1c:	40023800 	.word	0x40023800
 8008f20:	0800f850 	.word	0x0800f850
 8008f24:	20000000 	.word	0x20000000
 8008f28:	20000004 	.word	0x20000004

08008f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f30:	4b03      	ldr	r3, [pc, #12]	@ (8008f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f32:	681b      	ldr	r3, [r3, #0]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20000000 	.word	0x20000000

08008f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f48:	f7ff fff0 	bl	8008f2c <HAL_RCC_GetHCLKFreq>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	4b05      	ldr	r3, [pc, #20]	@ (8008f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	0a9b      	lsrs	r3, r3, #10
 8008f54:	f003 0307 	and.w	r3, r3, #7
 8008f58:	4903      	ldr	r1, [pc, #12]	@ (8008f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f5a:	5ccb      	ldrb	r3, [r1, r3]
 8008f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	40023800 	.word	0x40023800
 8008f68:	0800f860 	.word	0x0800f860

08008f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f70:	f7ff ffdc 	bl	8008f2c <HAL_RCC_GetHCLKFreq>
 8008f74:	4602      	mov	r2, r0
 8008f76:	4b05      	ldr	r3, [pc, #20]	@ (8008f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	0b5b      	lsrs	r3, r3, #13
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	4903      	ldr	r1, [pc, #12]	@ (8008f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f82:	5ccb      	ldrb	r3, [r1, r3]
 8008f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40023800 	.word	0x40023800
 8008f90:	0800f860 	.word	0x0800f860

08008f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f98:	b0ae      	sub	sp, #184	@ 0xb8
 8008f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fba:	4bcb      	ldr	r3, [pc, #812]	@ (80092e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f003 030c 	and.w	r3, r3, #12
 8008fc2:	2b0c      	cmp	r3, #12
 8008fc4:	f200 8206 	bhi.w	80093d4 <HAL_RCC_GetSysClockFreq+0x440>
 8008fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08009005 	.word	0x08009005
 8008fd4:	080093d5 	.word	0x080093d5
 8008fd8:	080093d5 	.word	0x080093d5
 8008fdc:	080093d5 	.word	0x080093d5
 8008fe0:	0800900d 	.word	0x0800900d
 8008fe4:	080093d5 	.word	0x080093d5
 8008fe8:	080093d5 	.word	0x080093d5
 8008fec:	080093d5 	.word	0x080093d5
 8008ff0:	08009015 	.word	0x08009015
 8008ff4:	080093d5 	.word	0x080093d5
 8008ff8:	080093d5 	.word	0x080093d5
 8008ffc:	080093d5 	.word	0x080093d5
 8009000:	08009205 	.word	0x08009205
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009004:	4bb9      	ldr	r3, [pc, #740]	@ (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 8009006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800900a:	e1e7      	b.n	80093dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800900c:	4bb8      	ldr	r3, [pc, #736]	@ (80092f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800900e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009012:	e1e3      	b.n	80093dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009014:	4bb4      	ldr	r3, [pc, #720]	@ (80092e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800901c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009020:	4bb1      	ldr	r3, [pc, #708]	@ (80092e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d071      	beq.n	8009110 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800902c:	4bae      	ldr	r3, [pc, #696]	@ (80092e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	099b      	lsrs	r3, r3, #6
 8009032:	2200      	movs	r2, #0
 8009034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009038:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800903c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009044:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009048:	2300      	movs	r3, #0
 800904a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800904e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009052:	4622      	mov	r2, r4
 8009054:	462b      	mov	r3, r5
 8009056:	f04f 0000 	mov.w	r0, #0
 800905a:	f04f 0100 	mov.w	r1, #0
 800905e:	0159      	lsls	r1, r3, #5
 8009060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009064:	0150      	lsls	r0, r2, #5
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4621      	mov	r1, r4
 800906c:	1a51      	subs	r1, r2, r1
 800906e:	6439      	str	r1, [r7, #64]	@ 0x40
 8009070:	4629      	mov	r1, r5
 8009072:	eb63 0301 	sbc.w	r3, r3, r1
 8009076:	647b      	str	r3, [r7, #68]	@ 0x44
 8009078:	f04f 0200 	mov.w	r2, #0
 800907c:	f04f 0300 	mov.w	r3, #0
 8009080:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8009084:	4649      	mov	r1, r9
 8009086:	018b      	lsls	r3, r1, #6
 8009088:	4641      	mov	r1, r8
 800908a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800908e:	4641      	mov	r1, r8
 8009090:	018a      	lsls	r2, r1, #6
 8009092:	4641      	mov	r1, r8
 8009094:	1a51      	subs	r1, r2, r1
 8009096:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009098:	4649      	mov	r1, r9
 800909a:	eb63 0301 	sbc.w	r3, r3, r1
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090a0:	f04f 0200 	mov.w	r2, #0
 80090a4:	f04f 0300 	mov.w	r3, #0
 80090a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80090ac:	4649      	mov	r1, r9
 80090ae:	00cb      	lsls	r3, r1, #3
 80090b0:	4641      	mov	r1, r8
 80090b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090b6:	4641      	mov	r1, r8
 80090b8:	00ca      	lsls	r2, r1, #3
 80090ba:	4610      	mov	r0, r2
 80090bc:	4619      	mov	r1, r3
 80090be:	4603      	mov	r3, r0
 80090c0:	4622      	mov	r2, r4
 80090c2:	189b      	adds	r3, r3, r2
 80090c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80090c6:	462b      	mov	r3, r5
 80090c8:	460a      	mov	r2, r1
 80090ca:	eb42 0303 	adc.w	r3, r2, r3
 80090ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d0:	f04f 0200 	mov.w	r2, #0
 80090d4:	f04f 0300 	mov.w	r3, #0
 80090d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80090dc:	4629      	mov	r1, r5
 80090de:	024b      	lsls	r3, r1, #9
 80090e0:	4621      	mov	r1, r4
 80090e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80090e6:	4621      	mov	r1, r4
 80090e8:	024a      	lsls	r2, r1, #9
 80090ea:	4610      	mov	r0, r2
 80090ec:	4619      	mov	r1, r3
 80090ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090f2:	2200      	movs	r2, #0
 80090f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80090fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009100:	f7f7 fdc2 	bl	8000c88 <__aeabi_uldivmod>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4613      	mov	r3, r2
 800910a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800910e:	e067      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009110:	4b75      	ldr	r3, [pc, #468]	@ (80092e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	099b      	lsrs	r3, r3, #6
 8009116:	2200      	movs	r2, #0
 8009118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800911c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009120:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009128:	67bb      	str	r3, [r7, #120]	@ 0x78
 800912a:	2300      	movs	r3, #0
 800912c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800912e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009132:	4622      	mov	r2, r4
 8009134:	462b      	mov	r3, r5
 8009136:	f04f 0000 	mov.w	r0, #0
 800913a:	f04f 0100 	mov.w	r1, #0
 800913e:	0159      	lsls	r1, r3, #5
 8009140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009144:	0150      	lsls	r0, r2, #5
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4621      	mov	r1, r4
 800914c:	1a51      	subs	r1, r2, r1
 800914e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009150:	4629      	mov	r1, r5
 8009152:	eb63 0301 	sbc.w	r3, r3, r1
 8009156:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009158:	f04f 0200 	mov.w	r2, #0
 800915c:	f04f 0300 	mov.w	r3, #0
 8009160:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8009164:	4649      	mov	r1, r9
 8009166:	018b      	lsls	r3, r1, #6
 8009168:	4641      	mov	r1, r8
 800916a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800916e:	4641      	mov	r1, r8
 8009170:	018a      	lsls	r2, r1, #6
 8009172:	4641      	mov	r1, r8
 8009174:	ebb2 0a01 	subs.w	sl, r2, r1
 8009178:	4649      	mov	r1, r9
 800917a:	eb63 0b01 	sbc.w	fp, r3, r1
 800917e:	f04f 0200 	mov.w	r2, #0
 8009182:	f04f 0300 	mov.w	r3, #0
 8009186:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800918a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800918e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009192:	4692      	mov	sl, r2
 8009194:	469b      	mov	fp, r3
 8009196:	4623      	mov	r3, r4
 8009198:	eb1a 0303 	adds.w	r3, sl, r3
 800919c:	623b      	str	r3, [r7, #32]
 800919e:	462b      	mov	r3, r5
 80091a0:	eb4b 0303 	adc.w	r3, fp, r3
 80091a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	f04f 0300 	mov.w	r3, #0
 80091ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80091b2:	4629      	mov	r1, r5
 80091b4:	028b      	lsls	r3, r1, #10
 80091b6:	4621      	mov	r1, r4
 80091b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80091bc:	4621      	mov	r1, r4
 80091be:	028a      	lsls	r2, r1, #10
 80091c0:	4610      	mov	r0, r2
 80091c2:	4619      	mov	r1, r3
 80091c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091c8:	2200      	movs	r2, #0
 80091ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80091cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80091ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80091d2:	f7f7 fd59 	bl	8000c88 <__aeabi_uldivmod>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4613      	mov	r3, r2
 80091dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80091e0:	4b41      	ldr	r3, [pc, #260]	@ (80092e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	0c1b      	lsrs	r3, r3, #16
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	3301      	adds	r3, #1
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80091f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80091f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009202:	e0eb      	b.n	80093dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009204:	4b38      	ldr	r3, [pc, #224]	@ (80092e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800920c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009210:	4b35      	ldr	r3, [pc, #212]	@ (80092e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d06b      	beq.n	80092f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800921c:	4b32      	ldr	r3, [pc, #200]	@ (80092e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	099b      	lsrs	r3, r3, #6
 8009222:	2200      	movs	r2, #0
 8009224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009226:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800922a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800922e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009230:	2300      	movs	r3, #0
 8009232:	667b      	str	r3, [r7, #100]	@ 0x64
 8009234:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009238:	4622      	mov	r2, r4
 800923a:	462b      	mov	r3, r5
 800923c:	f04f 0000 	mov.w	r0, #0
 8009240:	f04f 0100 	mov.w	r1, #0
 8009244:	0159      	lsls	r1, r3, #5
 8009246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800924a:	0150      	lsls	r0, r2, #5
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4621      	mov	r1, r4
 8009252:	1a51      	subs	r1, r2, r1
 8009254:	61b9      	str	r1, [r7, #24]
 8009256:	4629      	mov	r1, r5
 8009258:	eb63 0301 	sbc.w	r3, r3, r1
 800925c:	61fb      	str	r3, [r7, #28]
 800925e:	f04f 0200 	mov.w	r2, #0
 8009262:	f04f 0300 	mov.w	r3, #0
 8009266:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800926a:	4659      	mov	r1, fp
 800926c:	018b      	lsls	r3, r1, #6
 800926e:	4651      	mov	r1, sl
 8009270:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009274:	4651      	mov	r1, sl
 8009276:	018a      	lsls	r2, r1, #6
 8009278:	4651      	mov	r1, sl
 800927a:	ebb2 0801 	subs.w	r8, r2, r1
 800927e:	4659      	mov	r1, fp
 8009280:	eb63 0901 	sbc.w	r9, r3, r1
 8009284:	f04f 0200 	mov.w	r2, #0
 8009288:	f04f 0300 	mov.w	r3, #0
 800928c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009290:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009294:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009298:	4690      	mov	r8, r2
 800929a:	4699      	mov	r9, r3
 800929c:	4623      	mov	r3, r4
 800929e:	eb18 0303 	adds.w	r3, r8, r3
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	462b      	mov	r3, r5
 80092a6:	eb49 0303 	adc.w	r3, r9, r3
 80092aa:	617b      	str	r3, [r7, #20]
 80092ac:	f04f 0200 	mov.w	r2, #0
 80092b0:	f04f 0300 	mov.w	r3, #0
 80092b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80092b8:	4629      	mov	r1, r5
 80092ba:	024b      	lsls	r3, r1, #9
 80092bc:	4621      	mov	r1, r4
 80092be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80092c2:	4621      	mov	r1, r4
 80092c4:	024a      	lsls	r2, r1, #9
 80092c6:	4610      	mov	r0, r2
 80092c8:	4619      	mov	r1, r3
 80092ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ce:	2200      	movs	r2, #0
 80092d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80092d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80092d8:	f7f7 fcd6 	bl	8000c88 <__aeabi_uldivmod>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	4613      	mov	r3, r2
 80092e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092e6:	e065      	b.n	80093b4 <HAL_RCC_GetSysClockFreq+0x420>
 80092e8:	40023800 	.word	0x40023800
 80092ec:	00f42400 	.word	0x00f42400
 80092f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092f4:	4b3d      	ldr	r3, [pc, #244]	@ (80093ec <HAL_RCC_GetSysClockFreq+0x458>)
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	099b      	lsrs	r3, r3, #6
 80092fa:	2200      	movs	r2, #0
 80092fc:	4618      	mov	r0, r3
 80092fe:	4611      	mov	r1, r2
 8009300:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009304:	653b      	str	r3, [r7, #80]	@ 0x50
 8009306:	2300      	movs	r3, #0
 8009308:	657b      	str	r3, [r7, #84]	@ 0x54
 800930a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800930e:	4642      	mov	r2, r8
 8009310:	464b      	mov	r3, r9
 8009312:	f04f 0000 	mov.w	r0, #0
 8009316:	f04f 0100 	mov.w	r1, #0
 800931a:	0159      	lsls	r1, r3, #5
 800931c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009320:	0150      	lsls	r0, r2, #5
 8009322:	4602      	mov	r2, r0
 8009324:	460b      	mov	r3, r1
 8009326:	4641      	mov	r1, r8
 8009328:	1a51      	subs	r1, r2, r1
 800932a:	60b9      	str	r1, [r7, #8]
 800932c:	4649      	mov	r1, r9
 800932e:	eb63 0301 	sbc.w	r3, r3, r1
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	f04f 0200 	mov.w	r2, #0
 8009338:	f04f 0300 	mov.w	r3, #0
 800933c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009340:	4659      	mov	r1, fp
 8009342:	018b      	lsls	r3, r1, #6
 8009344:	4651      	mov	r1, sl
 8009346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800934a:	4651      	mov	r1, sl
 800934c:	018a      	lsls	r2, r1, #6
 800934e:	4651      	mov	r1, sl
 8009350:	1a54      	subs	r4, r2, r1
 8009352:	4659      	mov	r1, fp
 8009354:	eb63 0501 	sbc.w	r5, r3, r1
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	f04f 0300 	mov.w	r3, #0
 8009360:	00eb      	lsls	r3, r5, #3
 8009362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009366:	00e2      	lsls	r2, r4, #3
 8009368:	4614      	mov	r4, r2
 800936a:	461d      	mov	r5, r3
 800936c:	4643      	mov	r3, r8
 800936e:	18e3      	adds	r3, r4, r3
 8009370:	603b      	str	r3, [r7, #0]
 8009372:	464b      	mov	r3, r9
 8009374:	eb45 0303 	adc.w	r3, r5, r3
 8009378:	607b      	str	r3, [r7, #4]
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	f04f 0300 	mov.w	r3, #0
 8009382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009386:	4629      	mov	r1, r5
 8009388:	028b      	lsls	r3, r1, #10
 800938a:	4621      	mov	r1, r4
 800938c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009390:	4621      	mov	r1, r4
 8009392:	028a      	lsls	r2, r1, #10
 8009394:	4610      	mov	r0, r2
 8009396:	4619      	mov	r1, r3
 8009398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800939c:	2200      	movs	r2, #0
 800939e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80093a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80093a6:	f7f7 fc6f 	bl	8000c88 <__aeabi_uldivmod>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4613      	mov	r3, r2
 80093b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80093b4:	4b0d      	ldr	r3, [pc, #52]	@ (80093ec <HAL_RCC_GetSysClockFreq+0x458>)
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	0f1b      	lsrs	r3, r3, #28
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80093c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80093c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80093ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80093d2:	e003      	b.n	80093dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80093d4:	4b06      	ldr	r3, [pc, #24]	@ (80093f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80093d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80093da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	37b8      	adds	r7, #184	@ 0xb8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093ea:	bf00      	nop
 80093ec:	40023800 	.word	0x40023800
 80093f0:	00f42400 	.word	0x00f42400

080093f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e28d      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 8083 	beq.w	800951a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009414:	4b94      	ldr	r3, [pc, #592]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f003 030c 	and.w	r3, r3, #12
 800941c:	2b04      	cmp	r3, #4
 800941e:	d019      	beq.n	8009454 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009420:	4b91      	ldr	r3, [pc, #580]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009428:	2b08      	cmp	r3, #8
 800942a:	d106      	bne.n	800943a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800942c:	4b8e      	ldr	r3, [pc, #568]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009438:	d00c      	beq.n	8009454 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800943a:	4b8b      	ldr	r3, [pc, #556]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009442:	2b0c      	cmp	r3, #12
 8009444:	d112      	bne.n	800946c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009446:	4b88      	ldr	r3, [pc, #544]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800944e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009452:	d10b      	bne.n	800946c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009454:	4b84      	ldr	r3, [pc, #528]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d05b      	beq.n	8009518 <HAL_RCC_OscConfig+0x124>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d157      	bne.n	8009518 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e25a      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009474:	d106      	bne.n	8009484 <HAL_RCC_OscConfig+0x90>
 8009476:	4b7c      	ldr	r3, [pc, #496]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a7b      	ldr	r2, [pc, #492]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 800947c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009480:	6013      	str	r3, [r2, #0]
 8009482:	e01d      	b.n	80094c0 <HAL_RCC_OscConfig+0xcc>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800948c:	d10c      	bne.n	80094a8 <HAL_RCC_OscConfig+0xb4>
 800948e:	4b76      	ldr	r3, [pc, #472]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a75      	ldr	r2, [pc, #468]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	4b73      	ldr	r3, [pc, #460]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a72      	ldr	r2, [pc, #456]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 80094a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	e00b      	b.n	80094c0 <HAL_RCC_OscConfig+0xcc>
 80094a8:	4b6f      	ldr	r3, [pc, #444]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a6e      	ldr	r2, [pc, #440]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 80094ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	4b6c      	ldr	r3, [pc, #432]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a6b      	ldr	r2, [pc, #428]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 80094ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d013      	beq.n	80094f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c8:	f7fc fc76 	bl	8005db8 <HAL_GetTick>
 80094cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094ce:	e008      	b.n	80094e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094d0:	f7fc fc72 	bl	8005db8 <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b64      	cmp	r3, #100	@ 0x64
 80094dc:	d901      	bls.n	80094e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e21f      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094e2:	4b61      	ldr	r3, [pc, #388]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0f0      	beq.n	80094d0 <HAL_RCC_OscConfig+0xdc>
 80094ee:	e014      	b.n	800951a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f0:	f7fc fc62 	bl	8005db8 <HAL_GetTick>
 80094f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094f6:	e008      	b.n	800950a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094f8:	f7fc fc5e 	bl	8005db8 <HAL_GetTick>
 80094fc:	4602      	mov	r2, r0
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	2b64      	cmp	r3, #100	@ 0x64
 8009504:	d901      	bls.n	800950a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e20b      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800950a:	4b57      	ldr	r3, [pc, #348]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1f0      	bne.n	80094f8 <HAL_RCC_OscConfig+0x104>
 8009516:	e000      	b.n	800951a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0302 	and.w	r3, r3, #2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d06f      	beq.n	8009606 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009526:	4b50      	ldr	r3, [pc, #320]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f003 030c 	and.w	r3, r3, #12
 800952e:	2b00      	cmp	r3, #0
 8009530:	d017      	beq.n	8009562 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009532:	4b4d      	ldr	r3, [pc, #308]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800953a:	2b08      	cmp	r3, #8
 800953c:	d105      	bne.n	800954a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800953e:	4b4a      	ldr	r3, [pc, #296]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00b      	beq.n	8009562 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800954a:	4b47      	ldr	r3, [pc, #284]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009552:	2b0c      	cmp	r3, #12
 8009554:	d11c      	bne.n	8009590 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009556:	4b44      	ldr	r3, [pc, #272]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d116      	bne.n	8009590 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009562:	4b41      	ldr	r3, [pc, #260]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0302 	and.w	r3, r3, #2
 800956a:	2b00      	cmp	r3, #0
 800956c:	d005      	beq.n	800957a <HAL_RCC_OscConfig+0x186>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d001      	beq.n	800957a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e1d3      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800957a:	4b3b      	ldr	r3, [pc, #236]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	4937      	ldr	r1, [pc, #220]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 800958a:	4313      	orrs	r3, r2
 800958c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800958e:	e03a      	b.n	8009606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d020      	beq.n	80095da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009598:	4b34      	ldr	r3, [pc, #208]	@ (800966c <HAL_RCC_OscConfig+0x278>)
 800959a:	2201      	movs	r2, #1
 800959c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800959e:	f7fc fc0b 	bl	8005db8 <HAL_GetTick>
 80095a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095a4:	e008      	b.n	80095b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095a6:	f7fc fc07 	bl	8005db8 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d901      	bls.n	80095b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e1b4      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095b8:	4b2b      	ldr	r3, [pc, #172]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0302 	and.w	r3, r3, #2
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0f0      	beq.n	80095a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095c4:	4b28      	ldr	r3, [pc, #160]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	00db      	lsls	r3, r3, #3
 80095d2:	4925      	ldr	r1, [pc, #148]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	600b      	str	r3, [r1, #0]
 80095d8:	e015      	b.n	8009606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095da:	4b24      	ldr	r3, [pc, #144]	@ (800966c <HAL_RCC_OscConfig+0x278>)
 80095dc:	2200      	movs	r2, #0
 80095de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e0:	f7fc fbea 	bl	8005db8 <HAL_GetTick>
 80095e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095e6:	e008      	b.n	80095fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095e8:	f7fc fbe6 	bl	8005db8 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d901      	bls.n	80095fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e193      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095fa:	4b1b      	ldr	r3, [pc, #108]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0302 	and.w	r3, r3, #2
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1f0      	bne.n	80095e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0308 	and.w	r3, r3, #8
 800960e:	2b00      	cmp	r3, #0
 8009610:	d036      	beq.n	8009680 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d016      	beq.n	8009648 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800961a:	4b15      	ldr	r3, [pc, #84]	@ (8009670 <HAL_RCC_OscConfig+0x27c>)
 800961c:	2201      	movs	r2, #1
 800961e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009620:	f7fc fbca 	bl	8005db8 <HAL_GetTick>
 8009624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009626:	e008      	b.n	800963a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009628:	f7fc fbc6 	bl	8005db8 <HAL_GetTick>
 800962c:	4602      	mov	r2, r0
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	2b02      	cmp	r3, #2
 8009634:	d901      	bls.n	800963a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e173      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800963a:	4b0b      	ldr	r3, [pc, #44]	@ (8009668 <HAL_RCC_OscConfig+0x274>)
 800963c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800963e:	f003 0302 	and.w	r3, r3, #2
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0f0      	beq.n	8009628 <HAL_RCC_OscConfig+0x234>
 8009646:	e01b      	b.n	8009680 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009648:	4b09      	ldr	r3, [pc, #36]	@ (8009670 <HAL_RCC_OscConfig+0x27c>)
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800964e:	f7fc fbb3 	bl	8005db8 <HAL_GetTick>
 8009652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009654:	e00e      	b.n	8009674 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009656:	f7fc fbaf 	bl	8005db8 <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	2b02      	cmp	r3, #2
 8009662:	d907      	bls.n	8009674 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e15c      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
 8009668:	40023800 	.word	0x40023800
 800966c:	42470000 	.word	0x42470000
 8009670:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009674:	4b8a      	ldr	r3, [pc, #552]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 8009676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1ea      	bne.n	8009656 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0304 	and.w	r3, r3, #4
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 8097 	beq.w	80097bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800968e:	2300      	movs	r3, #0
 8009690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009692:	4b83      	ldr	r3, [pc, #524]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 8009694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10f      	bne.n	80096be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800969e:	2300      	movs	r3, #0
 80096a0:	60bb      	str	r3, [r7, #8]
 80096a2:	4b7f      	ldr	r3, [pc, #508]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 80096a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a6:	4a7e      	ldr	r2, [pc, #504]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 80096a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80096ae:	4b7c      	ldr	r3, [pc, #496]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 80096b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096b6:	60bb      	str	r3, [r7, #8]
 80096b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096ba:	2301      	movs	r3, #1
 80096bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096be:	4b79      	ldr	r3, [pc, #484]	@ (80098a4 <HAL_RCC_OscConfig+0x4b0>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d118      	bne.n	80096fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80096ca:	4b76      	ldr	r3, [pc, #472]	@ (80098a4 <HAL_RCC_OscConfig+0x4b0>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a75      	ldr	r2, [pc, #468]	@ (80098a4 <HAL_RCC_OscConfig+0x4b0>)
 80096d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096d6:	f7fc fb6f 	bl	8005db8 <HAL_GetTick>
 80096da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096dc:	e008      	b.n	80096f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096de:	f7fc fb6b 	bl	8005db8 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d901      	bls.n	80096f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e118      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096f0:	4b6c      	ldr	r3, [pc, #432]	@ (80098a4 <HAL_RCC_OscConfig+0x4b0>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0f0      	beq.n	80096de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d106      	bne.n	8009712 <HAL_RCC_OscConfig+0x31e>
 8009704:	4b66      	ldr	r3, [pc, #408]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 8009706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009708:	4a65      	ldr	r2, [pc, #404]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 800970a:	f043 0301 	orr.w	r3, r3, #1
 800970e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009710:	e01c      	b.n	800974c <HAL_RCC_OscConfig+0x358>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	2b05      	cmp	r3, #5
 8009718:	d10c      	bne.n	8009734 <HAL_RCC_OscConfig+0x340>
 800971a:	4b61      	ldr	r3, [pc, #388]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 800971c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800971e:	4a60      	ldr	r2, [pc, #384]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 8009720:	f043 0304 	orr.w	r3, r3, #4
 8009724:	6713      	str	r3, [r2, #112]	@ 0x70
 8009726:	4b5e      	ldr	r3, [pc, #376]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 8009728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800972a:	4a5d      	ldr	r2, [pc, #372]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 800972c:	f043 0301 	orr.w	r3, r3, #1
 8009730:	6713      	str	r3, [r2, #112]	@ 0x70
 8009732:	e00b      	b.n	800974c <HAL_RCC_OscConfig+0x358>
 8009734:	4b5a      	ldr	r3, [pc, #360]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 8009736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009738:	4a59      	ldr	r2, [pc, #356]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 800973a:	f023 0301 	bic.w	r3, r3, #1
 800973e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009740:	4b57      	ldr	r3, [pc, #348]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 8009742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009744:	4a56      	ldr	r2, [pc, #344]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 8009746:	f023 0304 	bic.w	r3, r3, #4
 800974a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d015      	beq.n	8009780 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009754:	f7fc fb30 	bl	8005db8 <HAL_GetTick>
 8009758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800975a:	e00a      	b.n	8009772 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800975c:	f7fc fb2c 	bl	8005db8 <HAL_GetTick>
 8009760:	4602      	mov	r2, r0
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800976a:	4293      	cmp	r3, r2
 800976c:	d901      	bls.n	8009772 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e0d7      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009772:	4b4b      	ldr	r3, [pc, #300]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 8009774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0ee      	beq.n	800975c <HAL_RCC_OscConfig+0x368>
 800977e:	e014      	b.n	80097aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009780:	f7fc fb1a 	bl	8005db8 <HAL_GetTick>
 8009784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009786:	e00a      	b.n	800979e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009788:	f7fc fb16 	bl	8005db8 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009796:	4293      	cmp	r3, r2
 8009798:	d901      	bls.n	800979e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e0c1      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800979e:	4b40      	ldr	r3, [pc, #256]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 80097a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1ee      	bne.n	8009788 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d105      	bne.n	80097bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097b0:	4b3b      	ldr	r3, [pc, #236]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 80097b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b4:	4a3a      	ldr	r2, [pc, #232]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 80097b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 80ad 	beq.w	8009920 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80097c6:	4b36      	ldr	r3, [pc, #216]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f003 030c 	and.w	r3, r3, #12
 80097ce:	2b08      	cmp	r3, #8
 80097d0:	d060      	beq.n	8009894 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d145      	bne.n	8009866 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097da:	4b33      	ldr	r3, [pc, #204]	@ (80098a8 <HAL_RCC_OscConfig+0x4b4>)
 80097dc:	2200      	movs	r2, #0
 80097de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097e0:	f7fc faea 	bl	8005db8 <HAL_GetTick>
 80097e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097e6:	e008      	b.n	80097fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097e8:	f7fc fae6 	bl	8005db8 <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d901      	bls.n	80097fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e093      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097fa:	4b29      	ldr	r3, [pc, #164]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1f0      	bne.n	80097e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	69da      	ldr	r2, [r3, #28]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	431a      	orrs	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009814:	019b      	lsls	r3, r3, #6
 8009816:	431a      	orrs	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981c:	085b      	lsrs	r3, r3, #1
 800981e:	3b01      	subs	r3, #1
 8009820:	041b      	lsls	r3, r3, #16
 8009822:	431a      	orrs	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009828:	061b      	lsls	r3, r3, #24
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009830:	071b      	lsls	r3, r3, #28
 8009832:	491b      	ldr	r1, [pc, #108]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 8009834:	4313      	orrs	r3, r2
 8009836:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009838:	4b1b      	ldr	r3, [pc, #108]	@ (80098a8 <HAL_RCC_OscConfig+0x4b4>)
 800983a:	2201      	movs	r2, #1
 800983c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800983e:	f7fc fabb 	bl	8005db8 <HAL_GetTick>
 8009842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009844:	e008      	b.n	8009858 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009846:	f7fc fab7 	bl	8005db8 <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	2b02      	cmp	r3, #2
 8009852:	d901      	bls.n	8009858 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e064      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009858:	4b11      	ldr	r3, [pc, #68]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d0f0      	beq.n	8009846 <HAL_RCC_OscConfig+0x452>
 8009864:	e05c      	b.n	8009920 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009866:	4b10      	ldr	r3, [pc, #64]	@ (80098a8 <HAL_RCC_OscConfig+0x4b4>)
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800986c:	f7fc faa4 	bl	8005db8 <HAL_GetTick>
 8009870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009872:	e008      	b.n	8009886 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009874:	f7fc faa0 	bl	8005db8 <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	2b02      	cmp	r3, #2
 8009880:	d901      	bls.n	8009886 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e04d      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009886:	4b06      	ldr	r3, [pc, #24]	@ (80098a0 <HAL_RCC_OscConfig+0x4ac>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1f0      	bne.n	8009874 <HAL_RCC_OscConfig+0x480>
 8009892:	e045      	b.n	8009920 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d107      	bne.n	80098ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e040      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
 80098a0:	40023800 	.word	0x40023800
 80098a4:	40007000 	.word	0x40007000
 80098a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80098ac:	4b1f      	ldr	r3, [pc, #124]	@ (800992c <HAL_RCC_OscConfig+0x538>)
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d030      	beq.n	800991c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d129      	bne.n	800991c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d122      	bne.n	800991c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80098dc:	4013      	ands	r3, r2
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80098e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d119      	bne.n	800991c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f2:	085b      	lsrs	r3, r3, #1
 80098f4:	3b01      	subs	r3, #1
 80098f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d10f      	bne.n	800991c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009908:	429a      	cmp	r2, r3
 800990a:	d107      	bne.n	800991c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009916:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009918:	429a      	cmp	r2, r3
 800991a:	d001      	beq.n	8009920 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e000      	b.n	8009922 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3718      	adds	r7, #24
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	40023800 	.word	0x40023800

08009930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e041      	b.n	80099c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d106      	bne.n	800995c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f839 	bl	80099ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3304      	adds	r3, #4
 800996c:	4619      	mov	r1, r3
 800996e:	4610      	mov	r0, r2
 8009970:	f000 fb24 	bl	8009fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
	...

080099e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d001      	beq.n	80099fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e046      	b.n	8009a8a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2202      	movs	r2, #2
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a23      	ldr	r2, [pc, #140]	@ (8009a98 <HAL_TIM_Base_Start+0xb4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d022      	beq.n	8009a54 <HAL_TIM_Base_Start+0x70>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a16:	d01d      	beq.n	8009a54 <HAL_TIM_Base_Start+0x70>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8009a9c <HAL_TIM_Base_Start+0xb8>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d018      	beq.n	8009a54 <HAL_TIM_Base_Start+0x70>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a1e      	ldr	r2, [pc, #120]	@ (8009aa0 <HAL_TIM_Base_Start+0xbc>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d013      	beq.n	8009a54 <HAL_TIM_Base_Start+0x70>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a1c      	ldr	r2, [pc, #112]	@ (8009aa4 <HAL_TIM_Base_Start+0xc0>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d00e      	beq.n	8009a54 <HAL_TIM_Base_Start+0x70>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8009aa8 <HAL_TIM_Base_Start+0xc4>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d009      	beq.n	8009a54 <HAL_TIM_Base_Start+0x70>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a19      	ldr	r2, [pc, #100]	@ (8009aac <HAL_TIM_Base_Start+0xc8>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d004      	beq.n	8009a54 <HAL_TIM_Base_Start+0x70>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a18      	ldr	r2, [pc, #96]	@ (8009ab0 <HAL_TIM_Base_Start+0xcc>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d111      	bne.n	8009a78 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f003 0307 	and.w	r3, r3, #7
 8009a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2b06      	cmp	r3, #6
 8009a64:	d010      	beq.n	8009a88 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f042 0201 	orr.w	r2, r2, #1
 8009a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a76:	e007      	b.n	8009a88 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f042 0201 	orr.w	r2, r2, #1
 8009a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	40010000 	.word	0x40010000
 8009a9c:	40000400 	.word	0x40000400
 8009aa0:	40000800 	.word	0x40000800
 8009aa4:	40000c00 	.word	0x40000c00
 8009aa8:	40010400 	.word	0x40010400
 8009aac:	40014000 	.word	0x40014000
 8009ab0:	40001800 	.word	0x40001800

08009ab4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e041      	b.n	8009b4a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7f9 fc58 	bl	8003390 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4619      	mov	r1, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	f000 fa62 	bl	8009fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e041      	b.n	8009be8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d106      	bne.n	8009b7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7f9 fbd3 	bl	8003324 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2202      	movs	r2, #2
 8009b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4610      	mov	r0, r2
 8009b92:	f000 fa13 	bl	8009fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d109      	bne.n	8009c14 <HAL_TIM_PWM_Start+0x24>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	bf14      	ite	ne
 8009c0c:	2301      	movne	r3, #1
 8009c0e:	2300      	moveq	r3, #0
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	e022      	b.n	8009c5a <HAL_TIM_PWM_Start+0x6a>
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	2b04      	cmp	r3, #4
 8009c18:	d109      	bne.n	8009c2e <HAL_TIM_PWM_Start+0x3e>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	bf14      	ite	ne
 8009c26:	2301      	movne	r3, #1
 8009c28:	2300      	moveq	r3, #0
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	e015      	b.n	8009c5a <HAL_TIM_PWM_Start+0x6a>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d109      	bne.n	8009c48 <HAL_TIM_PWM_Start+0x58>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	bf14      	ite	ne
 8009c40:	2301      	movne	r3, #1
 8009c42:	2300      	moveq	r3, #0
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	e008      	b.n	8009c5a <HAL_TIM_PWM_Start+0x6a>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	bf14      	ite	ne
 8009c54:	2301      	movne	r3, #1
 8009c56:	2300      	moveq	r3, #0
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e07c      	b.n	8009d5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d104      	bne.n	8009c72 <HAL_TIM_PWM_Start+0x82>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c70:	e013      	b.n	8009c9a <HAL_TIM_PWM_Start+0xaa>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b04      	cmp	r3, #4
 8009c76:	d104      	bne.n	8009c82 <HAL_TIM_PWM_Start+0x92>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c80:	e00b      	b.n	8009c9a <HAL_TIM_PWM_Start+0xaa>
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b08      	cmp	r3, #8
 8009c86:	d104      	bne.n	8009c92 <HAL_TIM_PWM_Start+0xa2>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c90:	e003      	b.n	8009c9a <HAL_TIM_PWM_Start+0xaa>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2202      	movs	r2, #2
 8009c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 fbe6 	bl	800a474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a2d      	ldr	r2, [pc, #180]	@ (8009d64 <HAL_TIM_PWM_Start+0x174>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d004      	beq.n	8009cbc <HAL_TIM_PWM_Start+0xcc>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8009d68 <HAL_TIM_PWM_Start+0x178>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d101      	bne.n	8009cc0 <HAL_TIM_PWM_Start+0xd0>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e000      	b.n	8009cc2 <HAL_TIM_PWM_Start+0xd2>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d007      	beq.n	8009cd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a22      	ldr	r2, [pc, #136]	@ (8009d64 <HAL_TIM_PWM_Start+0x174>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d022      	beq.n	8009d26 <HAL_TIM_PWM_Start+0x136>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ce8:	d01d      	beq.n	8009d26 <HAL_TIM_PWM_Start+0x136>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a1f      	ldr	r2, [pc, #124]	@ (8009d6c <HAL_TIM_PWM_Start+0x17c>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d018      	beq.n	8009d26 <HAL_TIM_PWM_Start+0x136>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d70 <HAL_TIM_PWM_Start+0x180>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d013      	beq.n	8009d26 <HAL_TIM_PWM_Start+0x136>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a1c      	ldr	r2, [pc, #112]	@ (8009d74 <HAL_TIM_PWM_Start+0x184>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00e      	beq.n	8009d26 <HAL_TIM_PWM_Start+0x136>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a16      	ldr	r2, [pc, #88]	@ (8009d68 <HAL_TIM_PWM_Start+0x178>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d009      	beq.n	8009d26 <HAL_TIM_PWM_Start+0x136>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a18      	ldr	r2, [pc, #96]	@ (8009d78 <HAL_TIM_PWM_Start+0x188>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d004      	beq.n	8009d26 <HAL_TIM_PWM_Start+0x136>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a16      	ldr	r2, [pc, #88]	@ (8009d7c <HAL_TIM_PWM_Start+0x18c>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d111      	bne.n	8009d4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	f003 0307 	and.w	r3, r3, #7
 8009d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b06      	cmp	r3, #6
 8009d36:	d010      	beq.n	8009d5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f042 0201 	orr.w	r2, r2, #1
 8009d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d48:	e007      	b.n	8009d5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f042 0201 	orr.w	r2, r2, #1
 8009d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	40010000 	.word	0x40010000
 8009d68:	40010400 	.word	0x40010400
 8009d6c:	40000400 	.word	0x40000400
 8009d70:	40000800 	.word	0x40000800
 8009d74:	40000c00 	.word	0x40000c00
 8009d78:	40014000 	.word	0x40014000
 8009d7c:	40001800 	.word	0x40001800

08009d80 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d101      	bne.n	8009d9e <HAL_TIM_OC_ConfigChannel+0x1e>
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	e048      	b.n	8009e30 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b0c      	cmp	r3, #12
 8009daa:	d839      	bhi.n	8009e20 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009dac:	a201      	add	r2, pc, #4	@ (adr r2, 8009db4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db2:	bf00      	nop
 8009db4:	08009de9 	.word	0x08009de9
 8009db8:	08009e21 	.word	0x08009e21
 8009dbc:	08009e21 	.word	0x08009e21
 8009dc0:	08009e21 	.word	0x08009e21
 8009dc4:	08009df7 	.word	0x08009df7
 8009dc8:	08009e21 	.word	0x08009e21
 8009dcc:	08009e21 	.word	0x08009e21
 8009dd0:	08009e21 	.word	0x08009e21
 8009dd4:	08009e05 	.word	0x08009e05
 8009dd8:	08009e21 	.word	0x08009e21
 8009ddc:	08009e21 	.word	0x08009e21
 8009de0:	08009e21 	.word	0x08009e21
 8009de4:	08009e13 	.word	0x08009e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68b9      	ldr	r1, [r7, #8]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 f990 	bl	800a114 <TIM_OC1_SetConfig>
      break;
 8009df4:	e017      	b.n	8009e26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68b9      	ldr	r1, [r7, #8]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 f9f9 	bl	800a1f4 <TIM_OC2_SetConfig>
      break;
 8009e02:	e010      	b.n	8009e26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 fa68 	bl	800a2e0 <TIM_OC3_SetConfig>
      break;
 8009e10:	e009      	b.n	8009e26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fad5 	bl	800a3c8 <TIM_OC4_SetConfig>
      break;
 8009e1e:	e002      	b.n	8009e26 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	75fb      	strb	r3, [r7, #23]
      break;
 8009e24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3718      	adds	r7, #24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d101      	bne.n	8009e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e52:	2302      	movs	r3, #2
 8009e54:	e0ae      	b.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b0c      	cmp	r3, #12
 8009e62:	f200 809f 	bhi.w	8009fa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009e66:	a201      	add	r2, pc, #4	@ (adr r2, 8009e6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009ea1 	.word	0x08009ea1
 8009e70:	08009fa5 	.word	0x08009fa5
 8009e74:	08009fa5 	.word	0x08009fa5
 8009e78:	08009fa5 	.word	0x08009fa5
 8009e7c:	08009ee1 	.word	0x08009ee1
 8009e80:	08009fa5 	.word	0x08009fa5
 8009e84:	08009fa5 	.word	0x08009fa5
 8009e88:	08009fa5 	.word	0x08009fa5
 8009e8c:	08009f23 	.word	0x08009f23
 8009e90:	08009fa5 	.word	0x08009fa5
 8009e94:	08009fa5 	.word	0x08009fa5
 8009e98:	08009fa5 	.word	0x08009fa5
 8009e9c:	08009f63 	.word	0x08009f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68b9      	ldr	r1, [r7, #8]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 f934 	bl	800a114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	699a      	ldr	r2, [r3, #24]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0208 	orr.w	r2, r2, #8
 8009eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	699a      	ldr	r2, [r3, #24]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f022 0204 	bic.w	r2, r2, #4
 8009eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6999      	ldr	r1, [r3, #24]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	691a      	ldr	r2, [r3, #16]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	619a      	str	r2, [r3, #24]
      break;
 8009ede:	e064      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68b9      	ldr	r1, [r7, #8]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 f984 	bl	800a1f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	699a      	ldr	r2, [r3, #24]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	699a      	ldr	r2, [r3, #24]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6999      	ldr	r1, [r3, #24]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	021a      	lsls	r2, r3, #8
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	619a      	str	r2, [r3, #24]
      break;
 8009f20:	e043      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68b9      	ldr	r1, [r7, #8]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 f9d9 	bl	800a2e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69da      	ldr	r2, [r3, #28]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f042 0208 	orr.w	r2, r2, #8
 8009f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	69da      	ldr	r2, [r3, #28]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f022 0204 	bic.w	r2, r2, #4
 8009f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	69d9      	ldr	r1, [r3, #28]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	691a      	ldr	r2, [r3, #16]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	61da      	str	r2, [r3, #28]
      break;
 8009f60:	e023      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68b9      	ldr	r1, [r7, #8]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 fa2d 	bl	800a3c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	69da      	ldr	r2, [r3, #28]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	69da      	ldr	r2, [r3, #28]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69d9      	ldr	r1, [r3, #28]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	021a      	lsls	r2, r3, #8
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	61da      	str	r2, [r3, #28]
      break;
 8009fa2:	e002      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a46      	ldr	r2, [pc, #280]	@ (800a0e8 <TIM_Base_SetConfig+0x12c>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d013      	beq.n	8009ffc <TIM_Base_SetConfig+0x40>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fda:	d00f      	beq.n	8009ffc <TIM_Base_SetConfig+0x40>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a43      	ldr	r2, [pc, #268]	@ (800a0ec <TIM_Base_SetConfig+0x130>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d00b      	beq.n	8009ffc <TIM_Base_SetConfig+0x40>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a42      	ldr	r2, [pc, #264]	@ (800a0f0 <TIM_Base_SetConfig+0x134>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d007      	beq.n	8009ffc <TIM_Base_SetConfig+0x40>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a41      	ldr	r2, [pc, #260]	@ (800a0f4 <TIM_Base_SetConfig+0x138>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d003      	beq.n	8009ffc <TIM_Base_SetConfig+0x40>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a40      	ldr	r2, [pc, #256]	@ (800a0f8 <TIM_Base_SetConfig+0x13c>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d108      	bne.n	800a00e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a35      	ldr	r2, [pc, #212]	@ (800a0e8 <TIM_Base_SetConfig+0x12c>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d02b      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a01c:	d027      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a32      	ldr	r2, [pc, #200]	@ (800a0ec <TIM_Base_SetConfig+0x130>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d023      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a31      	ldr	r2, [pc, #196]	@ (800a0f0 <TIM_Base_SetConfig+0x134>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d01f      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a30      	ldr	r2, [pc, #192]	@ (800a0f4 <TIM_Base_SetConfig+0x138>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d01b      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a2f      	ldr	r2, [pc, #188]	@ (800a0f8 <TIM_Base_SetConfig+0x13c>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d017      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a2e      	ldr	r2, [pc, #184]	@ (800a0fc <TIM_Base_SetConfig+0x140>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d013      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a2d      	ldr	r2, [pc, #180]	@ (800a100 <TIM_Base_SetConfig+0x144>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d00f      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a2c      	ldr	r2, [pc, #176]	@ (800a104 <TIM_Base_SetConfig+0x148>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d00b      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a2b      	ldr	r2, [pc, #172]	@ (800a108 <TIM_Base_SetConfig+0x14c>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d007      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a2a      	ldr	r2, [pc, #168]	@ (800a10c <TIM_Base_SetConfig+0x150>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d003      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a29      	ldr	r2, [pc, #164]	@ (800a110 <TIM_Base_SetConfig+0x154>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d108      	bne.n	800a080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a10      	ldr	r2, [pc, #64]	@ (800a0e8 <TIM_Base_SetConfig+0x12c>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d003      	beq.n	800a0b4 <TIM_Base_SetConfig+0xf8>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a12      	ldr	r2, [pc, #72]	@ (800a0f8 <TIM_Base_SetConfig+0x13c>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d103      	bne.n	800a0bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	691a      	ldr	r2, [r3, #16]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d105      	bne.n	800a0da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	f023 0201 	bic.w	r2, r3, #1
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	611a      	str	r2, [r3, #16]
  }
}
 800a0da:	bf00      	nop
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	40010000 	.word	0x40010000
 800a0ec:	40000400 	.word	0x40000400
 800a0f0:	40000800 	.word	0x40000800
 800a0f4:	40000c00 	.word	0x40000c00
 800a0f8:	40010400 	.word	0x40010400
 800a0fc:	40014000 	.word	0x40014000
 800a100:	40014400 	.word	0x40014400
 800a104:	40014800 	.word	0x40014800
 800a108:	40001800 	.word	0x40001800
 800a10c:	40001c00 	.word	0x40001c00
 800a110:	40002000 	.word	0x40002000

0800a114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	f023 0201 	bic.w	r2, r3, #1
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f023 0303 	bic.w	r3, r3, #3
 800a14a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f023 0302 	bic.w	r3, r3, #2
 800a15c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	4313      	orrs	r3, r2
 800a166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a20      	ldr	r2, [pc, #128]	@ (800a1ec <TIM_OC1_SetConfig+0xd8>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d003      	beq.n	800a178 <TIM_OC1_SetConfig+0x64>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a1f      	ldr	r2, [pc, #124]	@ (800a1f0 <TIM_OC1_SetConfig+0xdc>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d10c      	bne.n	800a192 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	f023 0308 	bic.w	r3, r3, #8
 800a17e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	4313      	orrs	r3, r2
 800a188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f023 0304 	bic.w	r3, r3, #4
 800a190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a15      	ldr	r2, [pc, #84]	@ (800a1ec <TIM_OC1_SetConfig+0xd8>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d003      	beq.n	800a1a2 <TIM_OC1_SetConfig+0x8e>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a14      	ldr	r2, [pc, #80]	@ (800a1f0 <TIM_OC1_SetConfig+0xdc>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d111      	bne.n	800a1c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	695b      	ldr	r3, [r3, #20]
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	621a      	str	r2, [r3, #32]
}
 800a1e0:	bf00      	nop
 800a1e2:	371c      	adds	r7, #28
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	40010000 	.word	0x40010000
 800a1f0:	40010400 	.word	0x40010400

0800a1f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	f023 0210 	bic.w	r2, r3, #16
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	021b      	lsls	r3, r3, #8
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	4313      	orrs	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	f023 0320 	bic.w	r3, r3, #32
 800a23e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	011b      	lsls	r3, r3, #4
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	4313      	orrs	r3, r2
 800a24a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a22      	ldr	r2, [pc, #136]	@ (800a2d8 <TIM_OC2_SetConfig+0xe4>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d003      	beq.n	800a25c <TIM_OC2_SetConfig+0x68>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a21      	ldr	r2, [pc, #132]	@ (800a2dc <TIM_OC2_SetConfig+0xe8>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d10d      	bne.n	800a278 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	011b      	lsls	r3, r3, #4
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a17      	ldr	r2, [pc, #92]	@ (800a2d8 <TIM_OC2_SetConfig+0xe4>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d003      	beq.n	800a288 <TIM_OC2_SetConfig+0x94>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a16      	ldr	r2, [pc, #88]	@ (800a2dc <TIM_OC2_SetConfig+0xe8>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d113      	bne.n	800a2b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a28e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	695b      	ldr	r3, [r3, #20]
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	621a      	str	r2, [r3, #32]
}
 800a2ca:	bf00      	nop
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	40010000 	.word	0x40010000
 800a2dc:	40010400 	.word	0x40010400

0800a2e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a30e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f023 0303 	bic.w	r3, r3, #3
 800a316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	4313      	orrs	r3, r2
 800a320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	021b      	lsls	r3, r3, #8
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	4313      	orrs	r3, r2
 800a334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a21      	ldr	r2, [pc, #132]	@ (800a3c0 <TIM_OC3_SetConfig+0xe0>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d003      	beq.n	800a346 <TIM_OC3_SetConfig+0x66>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a20      	ldr	r2, [pc, #128]	@ (800a3c4 <TIM_OC3_SetConfig+0xe4>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d10d      	bne.n	800a362 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a34c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	021b      	lsls	r3, r3, #8
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	4313      	orrs	r3, r2
 800a358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a16      	ldr	r2, [pc, #88]	@ (800a3c0 <TIM_OC3_SetConfig+0xe0>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d003      	beq.n	800a372 <TIM_OC3_SetConfig+0x92>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a15      	ldr	r2, [pc, #84]	@ (800a3c4 <TIM_OC3_SetConfig+0xe4>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d113      	bne.n	800a39a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	011b      	lsls	r3, r3, #4
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	011b      	lsls	r3, r3, #4
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	4313      	orrs	r3, r2
 800a398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	685a      	ldr	r2, [r3, #4]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	621a      	str	r2, [r3, #32]
}
 800a3b4:	bf00      	nop
 800a3b6:	371c      	adds	r7, #28
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	40010000 	.word	0x40010000
 800a3c4:	40010400 	.word	0x40010400

0800a3c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	021b      	lsls	r3, r3, #8
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	4313      	orrs	r3, r2
 800a40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	031b      	lsls	r3, r3, #12
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a12      	ldr	r2, [pc, #72]	@ (800a46c <TIM_OC4_SetConfig+0xa4>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d003      	beq.n	800a430 <TIM_OC4_SetConfig+0x68>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a11      	ldr	r2, [pc, #68]	@ (800a470 <TIM_OC4_SetConfig+0xa8>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d109      	bne.n	800a444 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	019b      	lsls	r3, r3, #6
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	4313      	orrs	r3, r2
 800a442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	621a      	str	r2, [r3, #32]
}
 800a45e:	bf00      	nop
 800a460:	371c      	adds	r7, #28
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	40010000 	.word	0x40010000
 800a470:	40010400 	.word	0x40010400

0800a474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a474:	b480      	push	{r7}
 800a476:	b087      	sub	sp, #28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	f003 031f 	and.w	r3, r3, #31
 800a486:	2201      	movs	r2, #1
 800a488:	fa02 f303 	lsl.w	r3, r2, r3
 800a48c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6a1a      	ldr	r2, [r3, #32]
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	43db      	mvns	r3, r3
 800a496:	401a      	ands	r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6a1a      	ldr	r2, [r3, #32]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f003 031f 	and.w	r3, r3, #31
 800a4a6:	6879      	ldr	r1, [r7, #4]
 800a4a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ac:	431a      	orrs	r2, r3
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	621a      	str	r2, [r3, #32]
}
 800a4b2:	bf00      	nop
 800a4b4:	371c      	adds	r7, #28
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
	...

0800a4c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d101      	bne.n	800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	e05a      	b.n	800a58e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	4313      	orrs	r3, r2
 800a508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a21      	ldr	r2, [pc, #132]	@ (800a59c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d022      	beq.n	800a562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a524:	d01d      	beq.n	800a562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a1d      	ldr	r2, [pc, #116]	@ (800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d018      	beq.n	800a562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d013      	beq.n	800a562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a1a      	ldr	r2, [pc, #104]	@ (800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d00e      	beq.n	800a562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a18      	ldr	r2, [pc, #96]	@ (800a5ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d009      	beq.n	800a562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a17      	ldr	r2, [pc, #92]	@ (800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d004      	beq.n	800a562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a15      	ldr	r2, [pc, #84]	@ (800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d10c      	bne.n	800a57c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	4313      	orrs	r3, r2
 800a572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	40010000 	.word	0x40010000
 800a5a0:	40000400 	.word	0x40000400
 800a5a4:	40000800 	.word	0x40000800
 800a5a8:	40000c00 	.word	0x40000c00
 800a5ac:	40010400 	.word	0x40010400
 800a5b0:	40014000 	.word	0x40014000
 800a5b4:	40001800 	.word	0x40001800

0800a5b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e042      	b.n	800a650 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d106      	bne.n	800a5e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7f8 ff7a 	bl	80034d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2224      	movs	r2, #36	@ 0x24
 800a5e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a5fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f973 	bl	800a8e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	691a      	ldr	r2, [r3, #16]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	695a      	ldr	r2, [r3, #20]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68da      	ldr	r2, [r3, #12]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2220      	movs	r2, #32
 800a63c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2220      	movs	r2, #32
 800a644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08a      	sub	sp, #40	@ 0x28
 800a65c:	af02      	add	r7, sp, #8
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	603b      	str	r3, [r7, #0]
 800a664:	4613      	mov	r3, r2
 800a666:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b20      	cmp	r3, #32
 800a676:	d175      	bne.n	800a764 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d002      	beq.n	800a684 <HAL_UART_Transmit+0x2c>
 800a67e:	88fb      	ldrh	r3, [r7, #6]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d101      	bne.n	800a688 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e06e      	b.n	800a766 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2221      	movs	r2, #33	@ 0x21
 800a692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a696:	f7fb fb8f 	bl	8005db8 <HAL_GetTick>
 800a69a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	88fa      	ldrh	r2, [r7, #6]
 800a6a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	88fa      	ldrh	r2, [r7, #6]
 800a6a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6b0:	d108      	bne.n	800a6c4 <HAL_UART_Transmit+0x6c>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d104      	bne.n	800a6c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	61bb      	str	r3, [r7, #24]
 800a6c2:	e003      	b.n	800a6cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a6cc:	e02e      	b.n	800a72c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2180      	movs	r1, #128	@ 0x80
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 f848 	bl	800a76e <UART_WaitOnFlagUntilTimeout>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d005      	beq.n	800a6f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e03a      	b.n	800a766 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10b      	bne.n	800a70e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a704:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	3302      	adds	r3, #2
 800a70a:	61bb      	str	r3, [r7, #24]
 800a70c:	e007      	b.n	800a71e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	781a      	ldrb	r2, [r3, #0]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	3301      	adds	r3, #1
 800a71c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a722:	b29b      	uxth	r3, r3
 800a724:	3b01      	subs	r3, #1
 800a726:	b29a      	uxth	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a730:	b29b      	uxth	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1cb      	bne.n	800a6ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	2200      	movs	r2, #0
 800a73e:	2140      	movs	r1, #64	@ 0x40
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 f814 	bl	800a76e <UART_WaitOnFlagUntilTimeout>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d005      	beq.n	800a758 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2220      	movs	r2, #32
 800a750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a754:	2303      	movs	r3, #3
 800a756:	e006      	b.n	800a766 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2220      	movs	r2, #32
 800a75c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a760:	2300      	movs	r3, #0
 800a762:	e000      	b.n	800a766 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a764:	2302      	movs	r3, #2
  }
}
 800a766:	4618      	mov	r0, r3
 800a768:	3720      	adds	r7, #32
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b086      	sub	sp, #24
 800a772:	af00      	add	r7, sp, #0
 800a774:	60f8      	str	r0, [r7, #12]
 800a776:	60b9      	str	r1, [r7, #8]
 800a778:	603b      	str	r3, [r7, #0]
 800a77a:	4613      	mov	r3, r2
 800a77c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a77e:	e03b      	b.n	800a7f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a786:	d037      	beq.n	800a7f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a788:	f7fb fb16 	bl	8005db8 <HAL_GetTick>
 800a78c:	4602      	mov	r2, r0
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	6a3a      	ldr	r2, [r7, #32]
 800a794:	429a      	cmp	r2, r3
 800a796:	d302      	bcc.n	800a79e <UART_WaitOnFlagUntilTimeout+0x30>
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e03a      	b.n	800a818 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f003 0304 	and.w	r3, r3, #4
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d023      	beq.n	800a7f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	2b80      	cmp	r3, #128	@ 0x80
 800a7b4:	d020      	beq.n	800a7f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b40      	cmp	r3, #64	@ 0x40
 800a7ba:	d01d      	beq.n	800a7f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0308 	and.w	r3, r3, #8
 800a7c6:	2b08      	cmp	r3, #8
 800a7c8:	d116      	bne.n	800a7f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	617b      	str	r3, [r7, #20]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	617b      	str	r3, [r7, #20]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	617b      	str	r3, [r7, #20]
 800a7de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 f81d 	bl	800a820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2208      	movs	r2, #8
 800a7ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e00f      	b.n	800a818 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	4013      	ands	r3, r2
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	429a      	cmp	r2, r3
 800a806:	bf0c      	ite	eq
 800a808:	2301      	moveq	r3, #1
 800a80a:	2300      	movne	r3, #0
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	461a      	mov	r2, r3
 800a810:	79fb      	ldrb	r3, [r7, #7]
 800a812:	429a      	cmp	r2, r3
 800a814:	d0b4      	beq.n	800a780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a820:	b480      	push	{r7}
 800a822:	b095      	sub	sp, #84	@ 0x54
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	330c      	adds	r3, #12
 800a82e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a832:	e853 3f00 	ldrex	r3, [r3]
 800a836:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a83e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	330c      	adds	r3, #12
 800a846:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a848:	643a      	str	r2, [r7, #64]	@ 0x40
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a84e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a850:	e841 2300 	strex	r3, r2, [r1]
 800a854:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1e5      	bne.n	800a828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	3314      	adds	r3, #20
 800a862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	e853 3f00 	ldrex	r3, [r3]
 800a86a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	f023 0301 	bic.w	r3, r3, #1
 800a872:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3314      	adds	r3, #20
 800a87a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a87c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a87e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a884:	e841 2300 	strex	r3, r2, [r1]
 800a888:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e5      	bne.n	800a85c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a894:	2b01      	cmp	r3, #1
 800a896:	d119      	bne.n	800a8cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	330c      	adds	r3, #12
 800a89e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	e853 3f00 	ldrex	r3, [r3]
 800a8a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f023 0310 	bic.w	r3, r3, #16
 800a8ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	330c      	adds	r3, #12
 800a8b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8b8:	61ba      	str	r2, [r7, #24]
 800a8ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	6979      	ldr	r1, [r7, #20]
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	e841 2300 	strex	r3, r2, [r1]
 800a8c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1e5      	bne.n	800a898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a8da:	bf00      	nop
 800a8dc:	3754      	adds	r7, #84	@ 0x54
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
	...

0800a8e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8ec:	b0c0      	sub	sp, #256	@ 0x100
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a904:	68d9      	ldr	r1, [r3, #12]
 800a906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	ea40 0301 	orr.w	r3, r0, r1
 800a910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	431a      	orrs	r2, r3
 800a920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	431a      	orrs	r2, r3
 800a928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	4313      	orrs	r3, r2
 800a930:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a940:	f021 010c 	bic.w	r1, r1, #12
 800a944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a94e:	430b      	orrs	r3, r1
 800a950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a95e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a962:	6999      	ldr	r1, [r3, #24]
 800a964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	ea40 0301 	orr.w	r3, r0, r1
 800a96e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	4b8f      	ldr	r3, [pc, #572]	@ (800abb4 <UART_SetConfig+0x2cc>)
 800a978:	429a      	cmp	r2, r3
 800a97a:	d005      	beq.n	800a988 <UART_SetConfig+0xa0>
 800a97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	4b8d      	ldr	r3, [pc, #564]	@ (800abb8 <UART_SetConfig+0x2d0>)
 800a984:	429a      	cmp	r2, r3
 800a986:	d104      	bne.n	800a992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a988:	f7fe faf0 	bl	8008f6c <HAL_RCC_GetPCLK2Freq>
 800a98c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a990:	e003      	b.n	800a99a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a992:	f7fe fad7 	bl	8008f44 <HAL_RCC_GetPCLK1Freq>
 800a996:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a99a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a99e:	69db      	ldr	r3, [r3, #28]
 800a9a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9a4:	f040 810c 	bne.w	800abc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a9a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a9b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a9b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a9ba:	4622      	mov	r2, r4
 800a9bc:	462b      	mov	r3, r5
 800a9be:	1891      	adds	r1, r2, r2
 800a9c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a9c2:	415b      	adcs	r3, r3
 800a9c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	eb12 0801 	adds.w	r8, r2, r1
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	eb43 0901 	adc.w	r9, r3, r1
 800a9d6:	f04f 0200 	mov.w	r2, #0
 800a9da:	f04f 0300 	mov.w	r3, #0
 800a9de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9ea:	4690      	mov	r8, r2
 800a9ec:	4699      	mov	r9, r3
 800a9ee:	4623      	mov	r3, r4
 800a9f0:	eb18 0303 	adds.w	r3, r8, r3
 800a9f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9f8:	462b      	mov	r3, r5
 800a9fa:	eb49 0303 	adc.w	r3, r9, r3
 800a9fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800aa12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aa16:	460b      	mov	r3, r1
 800aa18:	18db      	adds	r3, r3, r3
 800aa1a:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	eb42 0303 	adc.w	r3, r2, r3
 800aa22:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800aa28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800aa2c:	f7f6 f92c 	bl	8000c88 <__aeabi_uldivmod>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4b61      	ldr	r3, [pc, #388]	@ (800abbc <UART_SetConfig+0x2d4>)
 800aa36:	fba3 2302 	umull	r2, r3, r3, r2
 800aa3a:	095b      	lsrs	r3, r3, #5
 800aa3c:	011c      	lsls	r4, r3, #4
 800aa3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa42:	2200      	movs	r2, #0
 800aa44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aa48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800aa4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800aa50:	4642      	mov	r2, r8
 800aa52:	464b      	mov	r3, r9
 800aa54:	1891      	adds	r1, r2, r2
 800aa56:	64b9      	str	r1, [r7, #72]	@ 0x48
 800aa58:	415b      	adcs	r3, r3
 800aa5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800aa60:	4641      	mov	r1, r8
 800aa62:	eb12 0a01 	adds.w	sl, r2, r1
 800aa66:	4649      	mov	r1, r9
 800aa68:	eb43 0b01 	adc.w	fp, r3, r1
 800aa6c:	f04f 0200 	mov.w	r2, #0
 800aa70:	f04f 0300 	mov.w	r3, #0
 800aa74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa80:	4692      	mov	sl, r2
 800aa82:	469b      	mov	fp, r3
 800aa84:	4643      	mov	r3, r8
 800aa86:	eb1a 0303 	adds.w	r3, sl, r3
 800aa8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa8e:	464b      	mov	r3, r9
 800aa90:	eb4b 0303 	adc.w	r3, fp, r3
 800aa94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aa98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aaa4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800aaa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aaac:	460b      	mov	r3, r1
 800aaae:	18db      	adds	r3, r3, r3
 800aab0:	643b      	str	r3, [r7, #64]	@ 0x40
 800aab2:	4613      	mov	r3, r2
 800aab4:	eb42 0303 	adc.w	r3, r2, r3
 800aab8:	647b      	str	r3, [r7, #68]	@ 0x44
 800aaba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aabe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800aac2:	f7f6 f8e1 	bl	8000c88 <__aeabi_uldivmod>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4611      	mov	r1, r2
 800aacc:	4b3b      	ldr	r3, [pc, #236]	@ (800abbc <UART_SetConfig+0x2d4>)
 800aace:	fba3 2301 	umull	r2, r3, r3, r1
 800aad2:	095b      	lsrs	r3, r3, #5
 800aad4:	2264      	movs	r2, #100	@ 0x64
 800aad6:	fb02 f303 	mul.w	r3, r2, r3
 800aada:	1acb      	subs	r3, r1, r3
 800aadc:	00db      	lsls	r3, r3, #3
 800aade:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800aae2:	4b36      	ldr	r3, [pc, #216]	@ (800abbc <UART_SetConfig+0x2d4>)
 800aae4:	fba3 2302 	umull	r2, r3, r3, r2
 800aae8:	095b      	lsrs	r3, r3, #5
 800aaea:	005b      	lsls	r3, r3, #1
 800aaec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800aaf0:	441c      	add	r4, r3
 800aaf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aafc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ab00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ab04:	4642      	mov	r2, r8
 800ab06:	464b      	mov	r3, r9
 800ab08:	1891      	adds	r1, r2, r2
 800ab0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ab0c:	415b      	adcs	r3, r3
 800ab0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ab14:	4641      	mov	r1, r8
 800ab16:	1851      	adds	r1, r2, r1
 800ab18:	6339      	str	r1, [r7, #48]	@ 0x30
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	414b      	adcs	r3, r1
 800ab1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab20:	f04f 0200 	mov.w	r2, #0
 800ab24:	f04f 0300 	mov.w	r3, #0
 800ab28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ab2c:	4659      	mov	r1, fp
 800ab2e:	00cb      	lsls	r3, r1, #3
 800ab30:	4651      	mov	r1, sl
 800ab32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab36:	4651      	mov	r1, sl
 800ab38:	00ca      	lsls	r2, r1, #3
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4603      	mov	r3, r0
 800ab40:	4642      	mov	r2, r8
 800ab42:	189b      	adds	r3, r3, r2
 800ab44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab48:	464b      	mov	r3, r9
 800ab4a:	460a      	mov	r2, r1
 800ab4c:	eb42 0303 	adc.w	r3, r2, r3
 800ab50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ab60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ab64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ab68:	460b      	mov	r3, r1
 800ab6a:	18db      	adds	r3, r3, r3
 800ab6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab6e:	4613      	mov	r3, r2
 800ab70:	eb42 0303 	adc.w	r3, r2, r3
 800ab74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ab7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ab7e:	f7f6 f883 	bl	8000c88 <__aeabi_uldivmod>
 800ab82:	4602      	mov	r2, r0
 800ab84:	460b      	mov	r3, r1
 800ab86:	4b0d      	ldr	r3, [pc, #52]	@ (800abbc <UART_SetConfig+0x2d4>)
 800ab88:	fba3 1302 	umull	r1, r3, r3, r2
 800ab8c:	095b      	lsrs	r3, r3, #5
 800ab8e:	2164      	movs	r1, #100	@ 0x64
 800ab90:	fb01 f303 	mul.w	r3, r1, r3
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	3332      	adds	r3, #50	@ 0x32
 800ab9a:	4a08      	ldr	r2, [pc, #32]	@ (800abbc <UART_SetConfig+0x2d4>)
 800ab9c:	fba2 2303 	umull	r2, r3, r2, r3
 800aba0:	095b      	lsrs	r3, r3, #5
 800aba2:	f003 0207 	and.w	r2, r3, #7
 800aba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4422      	add	r2, r4
 800abae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800abb0:	e106      	b.n	800adc0 <UART_SetConfig+0x4d8>
 800abb2:	bf00      	nop
 800abb4:	40011000 	.word	0x40011000
 800abb8:	40011400 	.word	0x40011400
 800abbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800abc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abc4:	2200      	movs	r2, #0
 800abc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800abca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800abce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800abd2:	4642      	mov	r2, r8
 800abd4:	464b      	mov	r3, r9
 800abd6:	1891      	adds	r1, r2, r2
 800abd8:	6239      	str	r1, [r7, #32]
 800abda:	415b      	adcs	r3, r3
 800abdc:	627b      	str	r3, [r7, #36]	@ 0x24
 800abde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800abe2:	4641      	mov	r1, r8
 800abe4:	1854      	adds	r4, r2, r1
 800abe6:	4649      	mov	r1, r9
 800abe8:	eb43 0501 	adc.w	r5, r3, r1
 800abec:	f04f 0200 	mov.w	r2, #0
 800abf0:	f04f 0300 	mov.w	r3, #0
 800abf4:	00eb      	lsls	r3, r5, #3
 800abf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abfa:	00e2      	lsls	r2, r4, #3
 800abfc:	4614      	mov	r4, r2
 800abfe:	461d      	mov	r5, r3
 800ac00:	4643      	mov	r3, r8
 800ac02:	18e3      	adds	r3, r4, r3
 800ac04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac08:	464b      	mov	r3, r9
 800ac0a:	eb45 0303 	adc.w	r3, r5, r3
 800ac0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ac12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ac22:	f04f 0200 	mov.w	r2, #0
 800ac26:	f04f 0300 	mov.w	r3, #0
 800ac2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ac2e:	4629      	mov	r1, r5
 800ac30:	008b      	lsls	r3, r1, #2
 800ac32:	4621      	mov	r1, r4
 800ac34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac38:	4621      	mov	r1, r4
 800ac3a:	008a      	lsls	r2, r1, #2
 800ac3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ac40:	f7f6 f822 	bl	8000c88 <__aeabi_uldivmod>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4b60      	ldr	r3, [pc, #384]	@ (800adcc <UART_SetConfig+0x4e4>)
 800ac4a:	fba3 2302 	umull	r2, r3, r3, r2
 800ac4e:	095b      	lsrs	r3, r3, #5
 800ac50:	011c      	lsls	r4, r3, #4
 800ac52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac56:	2200      	movs	r2, #0
 800ac58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ac60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ac64:	4642      	mov	r2, r8
 800ac66:	464b      	mov	r3, r9
 800ac68:	1891      	adds	r1, r2, r2
 800ac6a:	61b9      	str	r1, [r7, #24]
 800ac6c:	415b      	adcs	r3, r3
 800ac6e:	61fb      	str	r3, [r7, #28]
 800ac70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac74:	4641      	mov	r1, r8
 800ac76:	1851      	adds	r1, r2, r1
 800ac78:	6139      	str	r1, [r7, #16]
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	414b      	adcs	r3, r1
 800ac7e:	617b      	str	r3, [r7, #20]
 800ac80:	f04f 0200 	mov.w	r2, #0
 800ac84:	f04f 0300 	mov.w	r3, #0
 800ac88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac8c:	4659      	mov	r1, fp
 800ac8e:	00cb      	lsls	r3, r1, #3
 800ac90:	4651      	mov	r1, sl
 800ac92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac96:	4651      	mov	r1, sl
 800ac98:	00ca      	lsls	r2, r1, #3
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4603      	mov	r3, r0
 800aca0:	4642      	mov	r2, r8
 800aca2:	189b      	adds	r3, r3, r2
 800aca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aca8:	464b      	mov	r3, r9
 800acaa:	460a      	mov	r2, r1
 800acac:	eb42 0303 	adc.w	r3, r2, r3
 800acb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800acb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800acbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800acc0:	f04f 0200 	mov.w	r2, #0
 800acc4:	f04f 0300 	mov.w	r3, #0
 800acc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800accc:	4649      	mov	r1, r9
 800acce:	008b      	lsls	r3, r1, #2
 800acd0:	4641      	mov	r1, r8
 800acd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acd6:	4641      	mov	r1, r8
 800acd8:	008a      	lsls	r2, r1, #2
 800acda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800acde:	f7f5 ffd3 	bl	8000c88 <__aeabi_uldivmod>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4611      	mov	r1, r2
 800ace8:	4b38      	ldr	r3, [pc, #224]	@ (800adcc <UART_SetConfig+0x4e4>)
 800acea:	fba3 2301 	umull	r2, r3, r3, r1
 800acee:	095b      	lsrs	r3, r3, #5
 800acf0:	2264      	movs	r2, #100	@ 0x64
 800acf2:	fb02 f303 	mul.w	r3, r2, r3
 800acf6:	1acb      	subs	r3, r1, r3
 800acf8:	011b      	lsls	r3, r3, #4
 800acfa:	3332      	adds	r3, #50	@ 0x32
 800acfc:	4a33      	ldr	r2, [pc, #204]	@ (800adcc <UART_SetConfig+0x4e4>)
 800acfe:	fba2 2303 	umull	r2, r3, r2, r3
 800ad02:	095b      	lsrs	r3, r3, #5
 800ad04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad08:	441c      	add	r4, r3
 800ad0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad0e:	2200      	movs	r2, #0
 800ad10:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad12:	677a      	str	r2, [r7, #116]	@ 0x74
 800ad14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ad18:	4642      	mov	r2, r8
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	1891      	adds	r1, r2, r2
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	415b      	adcs	r3, r3
 800ad22:	60fb      	str	r3, [r7, #12]
 800ad24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad28:	4641      	mov	r1, r8
 800ad2a:	1851      	adds	r1, r2, r1
 800ad2c:	6039      	str	r1, [r7, #0]
 800ad2e:	4649      	mov	r1, r9
 800ad30:	414b      	adcs	r3, r1
 800ad32:	607b      	str	r3, [r7, #4]
 800ad34:	f04f 0200 	mov.w	r2, #0
 800ad38:	f04f 0300 	mov.w	r3, #0
 800ad3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ad40:	4659      	mov	r1, fp
 800ad42:	00cb      	lsls	r3, r1, #3
 800ad44:	4651      	mov	r1, sl
 800ad46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad4a:	4651      	mov	r1, sl
 800ad4c:	00ca      	lsls	r2, r1, #3
 800ad4e:	4610      	mov	r0, r2
 800ad50:	4619      	mov	r1, r3
 800ad52:	4603      	mov	r3, r0
 800ad54:	4642      	mov	r2, r8
 800ad56:	189b      	adds	r3, r3, r2
 800ad58:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad5a:	464b      	mov	r3, r9
 800ad5c:	460a      	mov	r2, r1
 800ad5e:	eb42 0303 	adc.w	r3, r2, r3
 800ad62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad6e:	667a      	str	r2, [r7, #100]	@ 0x64
 800ad70:	f04f 0200 	mov.w	r2, #0
 800ad74:	f04f 0300 	mov.w	r3, #0
 800ad78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ad7c:	4649      	mov	r1, r9
 800ad7e:	008b      	lsls	r3, r1, #2
 800ad80:	4641      	mov	r1, r8
 800ad82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad86:	4641      	mov	r1, r8
 800ad88:	008a      	lsls	r2, r1, #2
 800ad8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ad8e:	f7f5 ff7b 	bl	8000c88 <__aeabi_uldivmod>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4b0d      	ldr	r3, [pc, #52]	@ (800adcc <UART_SetConfig+0x4e4>)
 800ad98:	fba3 1302 	umull	r1, r3, r3, r2
 800ad9c:	095b      	lsrs	r3, r3, #5
 800ad9e:	2164      	movs	r1, #100	@ 0x64
 800ada0:	fb01 f303 	mul.w	r3, r1, r3
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	011b      	lsls	r3, r3, #4
 800ada8:	3332      	adds	r3, #50	@ 0x32
 800adaa:	4a08      	ldr	r2, [pc, #32]	@ (800adcc <UART_SetConfig+0x4e4>)
 800adac:	fba2 2303 	umull	r2, r3, r2, r3
 800adb0:	095b      	lsrs	r3, r3, #5
 800adb2:	f003 020f 	and.w	r2, r3, #15
 800adb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4422      	add	r2, r4
 800adbe:	609a      	str	r2, [r3, #8]
}
 800adc0:	bf00      	nop
 800adc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800adc6:	46bd      	mov	sp, r7
 800adc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adcc:	51eb851f 	.word	0x51eb851f

0800add0 <asin>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	ed2d 8b02 	vpush	{d8}
 800add6:	ec55 4b10 	vmov	r4, r5, d0
 800adda:	f000 f831 	bl	800ae40 <__ieee754_asin>
 800adde:	4622      	mov	r2, r4
 800ade0:	462b      	mov	r3, r5
 800ade2:	4620      	mov	r0, r4
 800ade4:	4629      	mov	r1, r5
 800ade6:	eeb0 8a40 	vmov.f32	s16, s0
 800adea:	eef0 8a60 	vmov.f32	s17, s1
 800adee:	f7f5 febd 	bl	8000b6c <__aeabi_dcmpun>
 800adf2:	b9a8      	cbnz	r0, 800ae20 <asin+0x50>
 800adf4:	ec45 4b10 	vmov	d0, r4, r5
 800adf8:	f000 fd06 	bl	800b808 <fabs>
 800adfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ae30 <asin+0x60>)
 800adfe:	ec51 0b10 	vmov	r0, r1, d0
 800ae02:	2200      	movs	r2, #0
 800ae04:	f7f5 fea8 	bl	8000b58 <__aeabi_dcmpgt>
 800ae08:	b150      	cbz	r0, 800ae20 <asin+0x50>
 800ae0a:	f002 fdb5 	bl	800d978 <__errno>
 800ae0e:	ecbd 8b02 	vpop	{d8}
 800ae12:	2321      	movs	r3, #33	@ 0x21
 800ae14:	6003      	str	r3, [r0, #0]
 800ae16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae1a:	4806      	ldr	r0, [pc, #24]	@ (800ae34 <asin+0x64>)
 800ae1c:	f000 be2c 	b.w	800ba78 <nan>
 800ae20:	eeb0 0a48 	vmov.f32	s0, s16
 800ae24:	eef0 0a68 	vmov.f32	s1, s17
 800ae28:	ecbd 8b02 	vpop	{d8}
 800ae2c:	bd38      	pop	{r3, r4, r5, pc}
 800ae2e:	bf00      	nop
 800ae30:	3ff00000 	.word	0x3ff00000
 800ae34:	0800fe8e 	.word	0x0800fe8e

0800ae38 <atan2>:
 800ae38:	f000 ba06 	b.w	800b248 <__ieee754_atan2>
 800ae3c:	0000      	movs	r0, r0
	...

0800ae40 <__ieee754_asin>:
 800ae40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae44:	ec55 4b10 	vmov	r4, r5, d0
 800ae48:	4bc7      	ldr	r3, [pc, #796]	@ (800b168 <__ieee754_asin+0x328>)
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ae50:	429e      	cmp	r6, r3
 800ae52:	9501      	str	r5, [sp, #4]
 800ae54:	d92d      	bls.n	800aeb2 <__ieee754_asin+0x72>
 800ae56:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800ae5a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800ae5e:	4326      	orrs	r6, r4
 800ae60:	d116      	bne.n	800ae90 <__ieee754_asin+0x50>
 800ae62:	a3a7      	add	r3, pc, #668	@ (adr r3, 800b100 <__ieee754_asin+0x2c0>)
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	4620      	mov	r0, r4
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	f7f5 fbe4 	bl	8000638 <__aeabi_dmul>
 800ae70:	a3a5      	add	r3, pc, #660	@ (adr r3, 800b108 <__ieee754_asin+0x2c8>)
 800ae72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae76:	4606      	mov	r6, r0
 800ae78:	460f      	mov	r7, r1
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	f7f5 fbdb 	bl	8000638 <__aeabi_dmul>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	4630      	mov	r0, r6
 800ae88:	4639      	mov	r1, r7
 800ae8a:	f7f5 fa1f 	bl	80002cc <__adddf3>
 800ae8e:	e009      	b.n	800aea4 <__ieee754_asin+0x64>
 800ae90:	4622      	mov	r2, r4
 800ae92:	462b      	mov	r3, r5
 800ae94:	4620      	mov	r0, r4
 800ae96:	4629      	mov	r1, r5
 800ae98:	f7f5 fa16 	bl	80002c8 <__aeabi_dsub>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	f7f5 fcf4 	bl	800088c <__aeabi_ddiv>
 800aea4:	4604      	mov	r4, r0
 800aea6:	460d      	mov	r5, r1
 800aea8:	ec45 4b10 	vmov	d0, r4, r5
 800aeac:	b007      	add	sp, #28
 800aeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb2:	4bae      	ldr	r3, [pc, #696]	@ (800b16c <__ieee754_asin+0x32c>)
 800aeb4:	429e      	cmp	r6, r3
 800aeb6:	d810      	bhi.n	800aeda <__ieee754_asin+0x9a>
 800aeb8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800aebc:	f080 80ad 	bcs.w	800b01a <__ieee754_asin+0x1da>
 800aec0:	a393      	add	r3, pc, #588	@ (adr r3, 800b110 <__ieee754_asin+0x2d0>)
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	4620      	mov	r0, r4
 800aec8:	4629      	mov	r1, r5
 800aeca:	f7f5 f9ff 	bl	80002cc <__adddf3>
 800aece:	4ba8      	ldr	r3, [pc, #672]	@ (800b170 <__ieee754_asin+0x330>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	f7f5 fe41 	bl	8000b58 <__aeabi_dcmpgt>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d1e6      	bne.n	800aea8 <__ieee754_asin+0x68>
 800aeda:	ec45 4b10 	vmov	d0, r4, r5
 800aede:	f000 fc93 	bl	800b808 <fabs>
 800aee2:	49a3      	ldr	r1, [pc, #652]	@ (800b170 <__ieee754_asin+0x330>)
 800aee4:	ec53 2b10 	vmov	r2, r3, d0
 800aee8:	2000      	movs	r0, #0
 800aeea:	f7f5 f9ed 	bl	80002c8 <__aeabi_dsub>
 800aeee:	4ba1      	ldr	r3, [pc, #644]	@ (800b174 <__ieee754_asin+0x334>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	f7f5 fba1 	bl	8000638 <__aeabi_dmul>
 800aef6:	a388      	add	r3, pc, #544	@ (adr r3, 800b118 <__ieee754_asin+0x2d8>)
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	4604      	mov	r4, r0
 800aefe:	460d      	mov	r5, r1
 800af00:	f7f5 fb9a 	bl	8000638 <__aeabi_dmul>
 800af04:	a386      	add	r3, pc, #536	@ (adr r3, 800b120 <__ieee754_asin+0x2e0>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	f7f5 f9df 	bl	80002cc <__adddf3>
 800af0e:	4622      	mov	r2, r4
 800af10:	462b      	mov	r3, r5
 800af12:	f7f5 fb91 	bl	8000638 <__aeabi_dmul>
 800af16:	a384      	add	r3, pc, #528	@ (adr r3, 800b128 <__ieee754_asin+0x2e8>)
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	f7f5 f9d4 	bl	80002c8 <__aeabi_dsub>
 800af20:	4622      	mov	r2, r4
 800af22:	462b      	mov	r3, r5
 800af24:	f7f5 fb88 	bl	8000638 <__aeabi_dmul>
 800af28:	a381      	add	r3, pc, #516	@ (adr r3, 800b130 <__ieee754_asin+0x2f0>)
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	f7f5 f9cd 	bl	80002cc <__adddf3>
 800af32:	4622      	mov	r2, r4
 800af34:	462b      	mov	r3, r5
 800af36:	f7f5 fb7f 	bl	8000638 <__aeabi_dmul>
 800af3a:	a37f      	add	r3, pc, #508	@ (adr r3, 800b138 <__ieee754_asin+0x2f8>)
 800af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af40:	f7f5 f9c2 	bl	80002c8 <__aeabi_dsub>
 800af44:	4622      	mov	r2, r4
 800af46:	462b      	mov	r3, r5
 800af48:	f7f5 fb76 	bl	8000638 <__aeabi_dmul>
 800af4c:	a37c      	add	r3, pc, #496	@ (adr r3, 800b140 <__ieee754_asin+0x300>)
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	f7f5 f9bb 	bl	80002cc <__adddf3>
 800af56:	4622      	mov	r2, r4
 800af58:	462b      	mov	r3, r5
 800af5a:	f7f5 fb6d 	bl	8000638 <__aeabi_dmul>
 800af5e:	a37a      	add	r3, pc, #488	@ (adr r3, 800b148 <__ieee754_asin+0x308>)
 800af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af68:	4620      	mov	r0, r4
 800af6a:	4629      	mov	r1, r5
 800af6c:	f7f5 fb64 	bl	8000638 <__aeabi_dmul>
 800af70:	a377      	add	r3, pc, #476	@ (adr r3, 800b150 <__ieee754_asin+0x310>)
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	f7f5 f9a7 	bl	80002c8 <__aeabi_dsub>
 800af7a:	4622      	mov	r2, r4
 800af7c:	462b      	mov	r3, r5
 800af7e:	f7f5 fb5b 	bl	8000638 <__aeabi_dmul>
 800af82:	a375      	add	r3, pc, #468	@ (adr r3, 800b158 <__ieee754_asin+0x318>)
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f7f5 f9a0 	bl	80002cc <__adddf3>
 800af8c:	4622      	mov	r2, r4
 800af8e:	462b      	mov	r3, r5
 800af90:	f7f5 fb52 	bl	8000638 <__aeabi_dmul>
 800af94:	a372      	add	r3, pc, #456	@ (adr r3, 800b160 <__ieee754_asin+0x320>)
 800af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9a:	f7f5 f995 	bl	80002c8 <__aeabi_dsub>
 800af9e:	4622      	mov	r2, r4
 800afa0:	462b      	mov	r3, r5
 800afa2:	f7f5 fb49 	bl	8000638 <__aeabi_dmul>
 800afa6:	4b72      	ldr	r3, [pc, #456]	@ (800b170 <__ieee754_asin+0x330>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	f7f5 f98f 	bl	80002cc <__adddf3>
 800afae:	ec45 4b10 	vmov	d0, r4, r5
 800afb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afb6:	f000 fc83 	bl	800b8c0 <__ieee754_sqrt>
 800afba:	4b6f      	ldr	r3, [pc, #444]	@ (800b178 <__ieee754_asin+0x338>)
 800afbc:	429e      	cmp	r6, r3
 800afbe:	ec5b ab10 	vmov	sl, fp, d0
 800afc2:	f240 80db 	bls.w	800b17c <__ieee754_asin+0x33c>
 800afc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afce:	f7f5 fc5d 	bl	800088c <__aeabi_ddiv>
 800afd2:	4652      	mov	r2, sl
 800afd4:	465b      	mov	r3, fp
 800afd6:	f7f5 fb2f 	bl	8000638 <__aeabi_dmul>
 800afda:	4652      	mov	r2, sl
 800afdc:	465b      	mov	r3, fp
 800afde:	f7f5 f975 	bl	80002cc <__adddf3>
 800afe2:	4602      	mov	r2, r0
 800afe4:	460b      	mov	r3, r1
 800afe6:	f7f5 f971 	bl	80002cc <__adddf3>
 800afea:	a347      	add	r3, pc, #284	@ (adr r3, 800b108 <__ieee754_asin+0x2c8>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	f7f5 f96a 	bl	80002c8 <__aeabi_dsub>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	a141      	add	r1, pc, #260	@ (adr r1, 800b100 <__ieee754_asin+0x2c0>)
 800affa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800affe:	f7f5 f963 	bl	80002c8 <__aeabi_dsub>
 800b002:	9b01      	ldr	r3, [sp, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	bfdc      	itt	le
 800b008:	4602      	movle	r2, r0
 800b00a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800b00e:	4604      	mov	r4, r0
 800b010:	460d      	mov	r5, r1
 800b012:	bfdc      	itt	le
 800b014:	4614      	movle	r4, r2
 800b016:	461d      	movle	r5, r3
 800b018:	e746      	b.n	800aea8 <__ieee754_asin+0x68>
 800b01a:	4622      	mov	r2, r4
 800b01c:	462b      	mov	r3, r5
 800b01e:	4620      	mov	r0, r4
 800b020:	4629      	mov	r1, r5
 800b022:	f7f5 fb09 	bl	8000638 <__aeabi_dmul>
 800b026:	a33c      	add	r3, pc, #240	@ (adr r3, 800b118 <__ieee754_asin+0x2d8>)
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	4606      	mov	r6, r0
 800b02e:	460f      	mov	r7, r1
 800b030:	f7f5 fb02 	bl	8000638 <__aeabi_dmul>
 800b034:	a33a      	add	r3, pc, #232	@ (adr r3, 800b120 <__ieee754_asin+0x2e0>)
 800b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03a:	f7f5 f947 	bl	80002cc <__adddf3>
 800b03e:	4632      	mov	r2, r6
 800b040:	463b      	mov	r3, r7
 800b042:	f7f5 faf9 	bl	8000638 <__aeabi_dmul>
 800b046:	a338      	add	r3, pc, #224	@ (adr r3, 800b128 <__ieee754_asin+0x2e8>)
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f7f5 f93c 	bl	80002c8 <__aeabi_dsub>
 800b050:	4632      	mov	r2, r6
 800b052:	463b      	mov	r3, r7
 800b054:	f7f5 faf0 	bl	8000638 <__aeabi_dmul>
 800b058:	a335      	add	r3, pc, #212	@ (adr r3, 800b130 <__ieee754_asin+0x2f0>)
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f7f5 f935 	bl	80002cc <__adddf3>
 800b062:	4632      	mov	r2, r6
 800b064:	463b      	mov	r3, r7
 800b066:	f7f5 fae7 	bl	8000638 <__aeabi_dmul>
 800b06a:	a333      	add	r3, pc, #204	@ (adr r3, 800b138 <__ieee754_asin+0x2f8>)
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	f7f5 f92a 	bl	80002c8 <__aeabi_dsub>
 800b074:	4632      	mov	r2, r6
 800b076:	463b      	mov	r3, r7
 800b078:	f7f5 fade 	bl	8000638 <__aeabi_dmul>
 800b07c:	a330      	add	r3, pc, #192	@ (adr r3, 800b140 <__ieee754_asin+0x300>)
 800b07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b082:	f7f5 f923 	bl	80002cc <__adddf3>
 800b086:	4632      	mov	r2, r6
 800b088:	463b      	mov	r3, r7
 800b08a:	f7f5 fad5 	bl	8000638 <__aeabi_dmul>
 800b08e:	a32e      	add	r3, pc, #184	@ (adr r3, 800b148 <__ieee754_asin+0x308>)
 800b090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b094:	4680      	mov	r8, r0
 800b096:	4689      	mov	r9, r1
 800b098:	4630      	mov	r0, r6
 800b09a:	4639      	mov	r1, r7
 800b09c:	f7f5 facc 	bl	8000638 <__aeabi_dmul>
 800b0a0:	a32b      	add	r3, pc, #172	@ (adr r3, 800b150 <__ieee754_asin+0x310>)
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	f7f5 f90f 	bl	80002c8 <__aeabi_dsub>
 800b0aa:	4632      	mov	r2, r6
 800b0ac:	463b      	mov	r3, r7
 800b0ae:	f7f5 fac3 	bl	8000638 <__aeabi_dmul>
 800b0b2:	a329      	add	r3, pc, #164	@ (adr r3, 800b158 <__ieee754_asin+0x318>)
 800b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b8:	f7f5 f908 	bl	80002cc <__adddf3>
 800b0bc:	4632      	mov	r2, r6
 800b0be:	463b      	mov	r3, r7
 800b0c0:	f7f5 faba 	bl	8000638 <__aeabi_dmul>
 800b0c4:	a326      	add	r3, pc, #152	@ (adr r3, 800b160 <__ieee754_asin+0x320>)
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	f7f5 f8fd 	bl	80002c8 <__aeabi_dsub>
 800b0ce:	4632      	mov	r2, r6
 800b0d0:	463b      	mov	r3, r7
 800b0d2:	f7f5 fab1 	bl	8000638 <__aeabi_dmul>
 800b0d6:	4b26      	ldr	r3, [pc, #152]	@ (800b170 <__ieee754_asin+0x330>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f7f5 f8f7 	bl	80002cc <__adddf3>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	f7f5 fbd1 	bl	800088c <__aeabi_ddiv>
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	f7f5 faa3 	bl	8000638 <__aeabi_dmul>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	e6c6      	b.n	800ae8a <__ieee754_asin+0x4a>
 800b0fc:	f3af 8000 	nop.w
 800b100:	54442d18 	.word	0x54442d18
 800b104:	3ff921fb 	.word	0x3ff921fb
 800b108:	33145c07 	.word	0x33145c07
 800b10c:	3c91a626 	.word	0x3c91a626
 800b110:	8800759c 	.word	0x8800759c
 800b114:	7e37e43c 	.word	0x7e37e43c
 800b118:	0dfdf709 	.word	0x0dfdf709
 800b11c:	3f023de1 	.word	0x3f023de1
 800b120:	7501b288 	.word	0x7501b288
 800b124:	3f49efe0 	.word	0x3f49efe0
 800b128:	b5688f3b 	.word	0xb5688f3b
 800b12c:	3fa48228 	.word	0x3fa48228
 800b130:	0e884455 	.word	0x0e884455
 800b134:	3fc9c155 	.word	0x3fc9c155
 800b138:	03eb6f7d 	.word	0x03eb6f7d
 800b13c:	3fd4d612 	.word	0x3fd4d612
 800b140:	55555555 	.word	0x55555555
 800b144:	3fc55555 	.word	0x3fc55555
 800b148:	b12e9282 	.word	0xb12e9282
 800b14c:	3fb3b8c5 	.word	0x3fb3b8c5
 800b150:	1b8d0159 	.word	0x1b8d0159
 800b154:	3fe6066c 	.word	0x3fe6066c
 800b158:	9c598ac8 	.word	0x9c598ac8
 800b15c:	40002ae5 	.word	0x40002ae5
 800b160:	1c8a2d4b 	.word	0x1c8a2d4b
 800b164:	40033a27 	.word	0x40033a27
 800b168:	3fefffff 	.word	0x3fefffff
 800b16c:	3fdfffff 	.word	0x3fdfffff
 800b170:	3ff00000 	.word	0x3ff00000
 800b174:	3fe00000 	.word	0x3fe00000
 800b178:	3fef3332 	.word	0x3fef3332
 800b17c:	4652      	mov	r2, sl
 800b17e:	465b      	mov	r3, fp
 800b180:	4650      	mov	r0, sl
 800b182:	4659      	mov	r1, fp
 800b184:	f7f5 f8a2 	bl	80002cc <__adddf3>
 800b188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b18c:	4606      	mov	r6, r0
 800b18e:	460f      	mov	r7, r1
 800b190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b194:	f7f5 fb7a 	bl	800088c <__aeabi_ddiv>
 800b198:	4602      	mov	r2, r0
 800b19a:	460b      	mov	r3, r1
 800b19c:	4630      	mov	r0, r6
 800b19e:	4639      	mov	r1, r7
 800b1a0:	f7f5 fa4a 	bl	8000638 <__aeabi_dmul>
 800b1a4:	f04f 0800 	mov.w	r8, #0
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	460f      	mov	r7, r1
 800b1ac:	4642      	mov	r2, r8
 800b1ae:	465b      	mov	r3, fp
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	4659      	mov	r1, fp
 800b1b4:	f7f5 fa40 	bl	8000638 <__aeabi_dmul>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4620      	mov	r0, r4
 800b1be:	4629      	mov	r1, r5
 800b1c0:	f7f5 f882 	bl	80002c8 <__aeabi_dsub>
 800b1c4:	4642      	mov	r2, r8
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	460d      	mov	r5, r1
 800b1ca:	465b      	mov	r3, fp
 800b1cc:	4650      	mov	r0, sl
 800b1ce:	4659      	mov	r1, fp
 800b1d0:	f7f5 f87c 	bl	80002cc <__adddf3>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4620      	mov	r0, r4
 800b1da:	4629      	mov	r1, r5
 800b1dc:	f7f5 fb56 	bl	800088c <__aeabi_ddiv>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	f7f5 f872 	bl	80002cc <__adddf3>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	a112      	add	r1, pc, #72	@ (adr r1, 800b238 <__ieee754_asin+0x3f8>)
 800b1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1f2:	f7f5 f869 	bl	80002c8 <__aeabi_dsub>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	f7f5 f863 	bl	80002c8 <__aeabi_dsub>
 800b202:	4642      	mov	r2, r8
 800b204:	4604      	mov	r4, r0
 800b206:	460d      	mov	r5, r1
 800b208:	465b      	mov	r3, fp
 800b20a:	4640      	mov	r0, r8
 800b20c:	4659      	mov	r1, fp
 800b20e:	f7f5 f85d 	bl	80002cc <__adddf3>
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	a10a      	add	r1, pc, #40	@ (adr r1, 800b240 <__ieee754_asin+0x400>)
 800b218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b21c:	f7f5 f854 	bl	80002c8 <__aeabi_dsub>
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	4620      	mov	r0, r4
 800b226:	4629      	mov	r1, r5
 800b228:	f7f5 f84e 	bl	80002c8 <__aeabi_dsub>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	a103      	add	r1, pc, #12	@ (adr r1, 800b240 <__ieee754_asin+0x400>)
 800b232:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b236:	e6e2      	b.n	800affe <__ieee754_asin+0x1be>
 800b238:	33145c07 	.word	0x33145c07
 800b23c:	3c91a626 	.word	0x3c91a626
 800b240:	54442d18 	.word	0x54442d18
 800b244:	3fe921fb 	.word	0x3fe921fb

0800b248 <__ieee754_atan2>:
 800b248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b24c:	ec57 6b11 	vmov	r6, r7, d1
 800b250:	4273      	negs	r3, r6
 800b252:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800b3d0 <__ieee754_atan2+0x188>
 800b256:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800b25a:	4333      	orrs	r3, r6
 800b25c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b260:	4543      	cmp	r3, r8
 800b262:	ec51 0b10 	vmov	r0, r1, d0
 800b266:	4635      	mov	r5, r6
 800b268:	d809      	bhi.n	800b27e <__ieee754_atan2+0x36>
 800b26a:	4244      	negs	r4, r0
 800b26c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b270:	4304      	orrs	r4, r0
 800b272:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b276:	4544      	cmp	r4, r8
 800b278:	468e      	mov	lr, r1
 800b27a:	4681      	mov	r9, r0
 800b27c:	d907      	bls.n	800b28e <__ieee754_atan2+0x46>
 800b27e:	4632      	mov	r2, r6
 800b280:	463b      	mov	r3, r7
 800b282:	f7f5 f823 	bl	80002cc <__adddf3>
 800b286:	ec41 0b10 	vmov	d0, r0, r1
 800b28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b28e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800b292:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800b296:	4334      	orrs	r4, r6
 800b298:	d103      	bne.n	800b2a2 <__ieee754_atan2+0x5a>
 800b29a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b29e:	f000 b8c7 	b.w	800b430 <atan>
 800b2a2:	17bc      	asrs	r4, r7, #30
 800b2a4:	f004 0402 	and.w	r4, r4, #2
 800b2a8:	ea53 0909 	orrs.w	r9, r3, r9
 800b2ac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b2b0:	d107      	bne.n	800b2c2 <__ieee754_atan2+0x7a>
 800b2b2:	2c02      	cmp	r4, #2
 800b2b4:	d05f      	beq.n	800b376 <__ieee754_atan2+0x12e>
 800b2b6:	2c03      	cmp	r4, #3
 800b2b8:	d1e5      	bne.n	800b286 <__ieee754_atan2+0x3e>
 800b2ba:	a141      	add	r1, pc, #260	@ (adr r1, 800b3c0 <__ieee754_atan2+0x178>)
 800b2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2c0:	e7e1      	b.n	800b286 <__ieee754_atan2+0x3e>
 800b2c2:	4315      	orrs	r5, r2
 800b2c4:	d106      	bne.n	800b2d4 <__ieee754_atan2+0x8c>
 800b2c6:	f1be 0f00 	cmp.w	lr, #0
 800b2ca:	da5f      	bge.n	800b38c <__ieee754_atan2+0x144>
 800b2cc:	a13e      	add	r1, pc, #248	@ (adr r1, 800b3c8 <__ieee754_atan2+0x180>)
 800b2ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2d2:	e7d8      	b.n	800b286 <__ieee754_atan2+0x3e>
 800b2d4:	4542      	cmp	r2, r8
 800b2d6:	d10f      	bne.n	800b2f8 <__ieee754_atan2+0xb0>
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800b2de:	d107      	bne.n	800b2f0 <__ieee754_atan2+0xa8>
 800b2e0:	2c02      	cmp	r4, #2
 800b2e2:	d84c      	bhi.n	800b37e <__ieee754_atan2+0x136>
 800b2e4:	4b34      	ldr	r3, [pc, #208]	@ (800b3b8 <__ieee754_atan2+0x170>)
 800b2e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b2ee:	e7ca      	b.n	800b286 <__ieee754_atan2+0x3e>
 800b2f0:	2c02      	cmp	r4, #2
 800b2f2:	d848      	bhi.n	800b386 <__ieee754_atan2+0x13e>
 800b2f4:	4b31      	ldr	r3, [pc, #196]	@ (800b3bc <__ieee754_atan2+0x174>)
 800b2f6:	e7f6      	b.n	800b2e6 <__ieee754_atan2+0x9e>
 800b2f8:	4543      	cmp	r3, r8
 800b2fa:	d0e4      	beq.n	800b2c6 <__ieee754_atan2+0x7e>
 800b2fc:	1a9b      	subs	r3, r3, r2
 800b2fe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b302:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b306:	da1e      	bge.n	800b346 <__ieee754_atan2+0xfe>
 800b308:	2f00      	cmp	r7, #0
 800b30a:	da01      	bge.n	800b310 <__ieee754_atan2+0xc8>
 800b30c:	323c      	adds	r2, #60	@ 0x3c
 800b30e:	db1e      	blt.n	800b34e <__ieee754_atan2+0x106>
 800b310:	4632      	mov	r2, r6
 800b312:	463b      	mov	r3, r7
 800b314:	f7f5 faba 	bl	800088c <__aeabi_ddiv>
 800b318:	ec41 0b10 	vmov	d0, r0, r1
 800b31c:	f000 fa74 	bl	800b808 <fabs>
 800b320:	f000 f886 	bl	800b430 <atan>
 800b324:	ec51 0b10 	vmov	r0, r1, d0
 800b328:	2c01      	cmp	r4, #1
 800b32a:	d013      	beq.n	800b354 <__ieee754_atan2+0x10c>
 800b32c:	2c02      	cmp	r4, #2
 800b32e:	d015      	beq.n	800b35c <__ieee754_atan2+0x114>
 800b330:	2c00      	cmp	r4, #0
 800b332:	d0a8      	beq.n	800b286 <__ieee754_atan2+0x3e>
 800b334:	a318      	add	r3, pc, #96	@ (adr r3, 800b398 <__ieee754_atan2+0x150>)
 800b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33a:	f7f4 ffc5 	bl	80002c8 <__aeabi_dsub>
 800b33e:	a318      	add	r3, pc, #96	@ (adr r3, 800b3a0 <__ieee754_atan2+0x158>)
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	e014      	b.n	800b370 <__ieee754_atan2+0x128>
 800b346:	a118      	add	r1, pc, #96	@ (adr r1, 800b3a8 <__ieee754_atan2+0x160>)
 800b348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b34c:	e7ec      	b.n	800b328 <__ieee754_atan2+0xe0>
 800b34e:	2000      	movs	r0, #0
 800b350:	2100      	movs	r1, #0
 800b352:	e7e9      	b.n	800b328 <__ieee754_atan2+0xe0>
 800b354:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b358:	4619      	mov	r1, r3
 800b35a:	e794      	b.n	800b286 <__ieee754_atan2+0x3e>
 800b35c:	a30e      	add	r3, pc, #56	@ (adr r3, 800b398 <__ieee754_atan2+0x150>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7f4 ffb1 	bl	80002c8 <__aeabi_dsub>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	a10d      	add	r1, pc, #52	@ (adr r1, 800b3a0 <__ieee754_atan2+0x158>)
 800b36c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b370:	f7f4 ffaa 	bl	80002c8 <__aeabi_dsub>
 800b374:	e787      	b.n	800b286 <__ieee754_atan2+0x3e>
 800b376:	a10a      	add	r1, pc, #40	@ (adr r1, 800b3a0 <__ieee754_atan2+0x158>)
 800b378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b37c:	e783      	b.n	800b286 <__ieee754_atan2+0x3e>
 800b37e:	a10c      	add	r1, pc, #48	@ (adr r1, 800b3b0 <__ieee754_atan2+0x168>)
 800b380:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b384:	e77f      	b.n	800b286 <__ieee754_atan2+0x3e>
 800b386:	2000      	movs	r0, #0
 800b388:	2100      	movs	r1, #0
 800b38a:	e77c      	b.n	800b286 <__ieee754_atan2+0x3e>
 800b38c:	a106      	add	r1, pc, #24	@ (adr r1, 800b3a8 <__ieee754_atan2+0x160>)
 800b38e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b392:	e778      	b.n	800b286 <__ieee754_atan2+0x3e>
 800b394:	f3af 8000 	nop.w
 800b398:	33145c07 	.word	0x33145c07
 800b39c:	3ca1a626 	.word	0x3ca1a626
 800b3a0:	54442d18 	.word	0x54442d18
 800b3a4:	400921fb 	.word	0x400921fb
 800b3a8:	54442d18 	.word	0x54442d18
 800b3ac:	3ff921fb 	.word	0x3ff921fb
 800b3b0:	54442d18 	.word	0x54442d18
 800b3b4:	3fe921fb 	.word	0x3fe921fb
 800b3b8:	0800f8f0 	.word	0x0800f8f0
 800b3bc:	0800f8d8 	.word	0x0800f8d8
 800b3c0:	54442d18 	.word	0x54442d18
 800b3c4:	c00921fb 	.word	0xc00921fb
 800b3c8:	54442d18 	.word	0x54442d18
 800b3cc:	bff921fb 	.word	0xbff921fb
 800b3d0:	7ff00000 	.word	0x7ff00000

0800b3d4 <sqrt>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	ed2d 8b02 	vpush	{d8}
 800b3da:	ec55 4b10 	vmov	r4, r5, d0
 800b3de:	f000 fa6f 	bl	800b8c0 <__ieee754_sqrt>
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	462b      	mov	r3, r5
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	eeb0 8a40 	vmov.f32	s16, s0
 800b3ee:	eef0 8a60 	vmov.f32	s17, s1
 800b3f2:	f7f5 fbbb 	bl	8000b6c <__aeabi_dcmpun>
 800b3f6:	b990      	cbnz	r0, 800b41e <sqrt+0x4a>
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4629      	mov	r1, r5
 800b400:	f7f5 fb8c 	bl	8000b1c <__aeabi_dcmplt>
 800b404:	b158      	cbz	r0, 800b41e <sqrt+0x4a>
 800b406:	f002 fab7 	bl	800d978 <__errno>
 800b40a:	2321      	movs	r3, #33	@ 0x21
 800b40c:	6003      	str	r3, [r0, #0]
 800b40e:	2200      	movs	r2, #0
 800b410:	2300      	movs	r3, #0
 800b412:	4610      	mov	r0, r2
 800b414:	4619      	mov	r1, r3
 800b416:	f7f5 fa39 	bl	800088c <__aeabi_ddiv>
 800b41a:	ec41 0b18 	vmov	d8, r0, r1
 800b41e:	eeb0 0a48 	vmov.f32	s0, s16
 800b422:	eef0 0a68 	vmov.f32	s1, s17
 800b426:	ecbd 8b02 	vpop	{d8}
 800b42a:	bd38      	pop	{r3, r4, r5, pc}
 800b42c:	0000      	movs	r0, r0
	...

0800b430 <atan>:
 800b430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	ec55 4b10 	vmov	r4, r5, d0
 800b438:	4bbf      	ldr	r3, [pc, #764]	@ (800b738 <atan+0x308>)
 800b43a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b43e:	429e      	cmp	r6, r3
 800b440:	46ab      	mov	fp, r5
 800b442:	d918      	bls.n	800b476 <atan+0x46>
 800b444:	4bbd      	ldr	r3, [pc, #756]	@ (800b73c <atan+0x30c>)
 800b446:	429e      	cmp	r6, r3
 800b448:	d801      	bhi.n	800b44e <atan+0x1e>
 800b44a:	d109      	bne.n	800b460 <atan+0x30>
 800b44c:	b144      	cbz	r4, 800b460 <atan+0x30>
 800b44e:	4622      	mov	r2, r4
 800b450:	462b      	mov	r3, r5
 800b452:	4620      	mov	r0, r4
 800b454:	4629      	mov	r1, r5
 800b456:	f7f4 ff39 	bl	80002cc <__adddf3>
 800b45a:	4604      	mov	r4, r0
 800b45c:	460d      	mov	r5, r1
 800b45e:	e006      	b.n	800b46e <atan+0x3e>
 800b460:	f1bb 0f00 	cmp.w	fp, #0
 800b464:	f340 812b 	ble.w	800b6be <atan+0x28e>
 800b468:	a597      	add	r5, pc, #604	@ (adr r5, 800b6c8 <atan+0x298>)
 800b46a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b46e:	ec45 4b10 	vmov	d0, r4, r5
 800b472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b476:	4bb2      	ldr	r3, [pc, #712]	@ (800b740 <atan+0x310>)
 800b478:	429e      	cmp	r6, r3
 800b47a:	d813      	bhi.n	800b4a4 <atan+0x74>
 800b47c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b480:	429e      	cmp	r6, r3
 800b482:	d80c      	bhi.n	800b49e <atan+0x6e>
 800b484:	a392      	add	r3, pc, #584	@ (adr r3, 800b6d0 <atan+0x2a0>)
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	4620      	mov	r0, r4
 800b48c:	4629      	mov	r1, r5
 800b48e:	f7f4 ff1d 	bl	80002cc <__adddf3>
 800b492:	4bac      	ldr	r3, [pc, #688]	@ (800b744 <atan+0x314>)
 800b494:	2200      	movs	r2, #0
 800b496:	f7f5 fb5f 	bl	8000b58 <__aeabi_dcmpgt>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d1e7      	bne.n	800b46e <atan+0x3e>
 800b49e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b4a2:	e029      	b.n	800b4f8 <atan+0xc8>
 800b4a4:	f000 f9b0 	bl	800b808 <fabs>
 800b4a8:	4ba7      	ldr	r3, [pc, #668]	@ (800b748 <atan+0x318>)
 800b4aa:	429e      	cmp	r6, r3
 800b4ac:	ec55 4b10 	vmov	r4, r5, d0
 800b4b0:	f200 80bc 	bhi.w	800b62c <atan+0x1fc>
 800b4b4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b4b8:	429e      	cmp	r6, r3
 800b4ba:	f200 809e 	bhi.w	800b5fa <atan+0x1ca>
 800b4be:	4622      	mov	r2, r4
 800b4c0:	462b      	mov	r3, r5
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	f7f4 ff01 	bl	80002cc <__adddf3>
 800b4ca:	4b9e      	ldr	r3, [pc, #632]	@ (800b744 <atan+0x314>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f7f4 fefb 	bl	80002c8 <__aeabi_dsub>
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	460f      	mov	r7, r1
 800b4d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4dc:	4620      	mov	r0, r4
 800b4de:	4629      	mov	r1, r5
 800b4e0:	f7f4 fef4 	bl	80002cc <__adddf3>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	4639      	mov	r1, r7
 800b4ec:	f7f5 f9ce 	bl	800088c <__aeabi_ddiv>
 800b4f0:	f04f 0a00 	mov.w	sl, #0
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	460d      	mov	r5, r1
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	4629      	mov	r1, r5
 800b500:	f7f5 f89a 	bl	8000638 <__aeabi_dmul>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4680      	mov	r8, r0
 800b50a:	4689      	mov	r9, r1
 800b50c:	f7f5 f894 	bl	8000638 <__aeabi_dmul>
 800b510:	a371      	add	r3, pc, #452	@ (adr r3, 800b6d8 <atan+0x2a8>)
 800b512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b516:	4606      	mov	r6, r0
 800b518:	460f      	mov	r7, r1
 800b51a:	f7f5 f88d 	bl	8000638 <__aeabi_dmul>
 800b51e:	a370      	add	r3, pc, #448	@ (adr r3, 800b6e0 <atan+0x2b0>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f4 fed2 	bl	80002cc <__adddf3>
 800b528:	4632      	mov	r2, r6
 800b52a:	463b      	mov	r3, r7
 800b52c:	f7f5 f884 	bl	8000638 <__aeabi_dmul>
 800b530:	a36d      	add	r3, pc, #436	@ (adr r3, 800b6e8 <atan+0x2b8>)
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	f7f4 fec9 	bl	80002cc <__adddf3>
 800b53a:	4632      	mov	r2, r6
 800b53c:	463b      	mov	r3, r7
 800b53e:	f7f5 f87b 	bl	8000638 <__aeabi_dmul>
 800b542:	a36b      	add	r3, pc, #428	@ (adr r3, 800b6f0 <atan+0x2c0>)
 800b544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b548:	f7f4 fec0 	bl	80002cc <__adddf3>
 800b54c:	4632      	mov	r2, r6
 800b54e:	463b      	mov	r3, r7
 800b550:	f7f5 f872 	bl	8000638 <__aeabi_dmul>
 800b554:	a368      	add	r3, pc, #416	@ (adr r3, 800b6f8 <atan+0x2c8>)
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	f7f4 feb7 	bl	80002cc <__adddf3>
 800b55e:	4632      	mov	r2, r6
 800b560:	463b      	mov	r3, r7
 800b562:	f7f5 f869 	bl	8000638 <__aeabi_dmul>
 800b566:	a366      	add	r3, pc, #408	@ (adr r3, 800b700 <atan+0x2d0>)
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	f7f4 feae 	bl	80002cc <__adddf3>
 800b570:	4642      	mov	r2, r8
 800b572:	464b      	mov	r3, r9
 800b574:	f7f5 f860 	bl	8000638 <__aeabi_dmul>
 800b578:	a363      	add	r3, pc, #396	@ (adr r3, 800b708 <atan+0x2d8>)
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	4680      	mov	r8, r0
 800b580:	4689      	mov	r9, r1
 800b582:	4630      	mov	r0, r6
 800b584:	4639      	mov	r1, r7
 800b586:	f7f5 f857 	bl	8000638 <__aeabi_dmul>
 800b58a:	a361      	add	r3, pc, #388	@ (adr r3, 800b710 <atan+0x2e0>)
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f7f4 fe9a 	bl	80002c8 <__aeabi_dsub>
 800b594:	4632      	mov	r2, r6
 800b596:	463b      	mov	r3, r7
 800b598:	f7f5 f84e 	bl	8000638 <__aeabi_dmul>
 800b59c:	a35e      	add	r3, pc, #376	@ (adr r3, 800b718 <atan+0x2e8>)
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	f7f4 fe91 	bl	80002c8 <__aeabi_dsub>
 800b5a6:	4632      	mov	r2, r6
 800b5a8:	463b      	mov	r3, r7
 800b5aa:	f7f5 f845 	bl	8000638 <__aeabi_dmul>
 800b5ae:	a35c      	add	r3, pc, #368	@ (adr r3, 800b720 <atan+0x2f0>)
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	f7f4 fe88 	bl	80002c8 <__aeabi_dsub>
 800b5b8:	4632      	mov	r2, r6
 800b5ba:	463b      	mov	r3, r7
 800b5bc:	f7f5 f83c 	bl	8000638 <__aeabi_dmul>
 800b5c0:	a359      	add	r3, pc, #356	@ (adr r3, 800b728 <atan+0x2f8>)
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	f7f4 fe7f 	bl	80002c8 <__aeabi_dsub>
 800b5ca:	4632      	mov	r2, r6
 800b5cc:	463b      	mov	r3, r7
 800b5ce:	f7f5 f833 	bl	8000638 <__aeabi_dmul>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	4649      	mov	r1, r9
 800b5da:	f7f4 fe77 	bl	80002cc <__adddf3>
 800b5de:	4622      	mov	r2, r4
 800b5e0:	462b      	mov	r3, r5
 800b5e2:	f7f5 f829 	bl	8000638 <__aeabi_dmul>
 800b5e6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	d148      	bne.n	800b682 <atan+0x252>
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	f7f4 fe68 	bl	80002c8 <__aeabi_dsub>
 800b5f8:	e72f      	b.n	800b45a <atan+0x2a>
 800b5fa:	4b52      	ldr	r3, [pc, #328]	@ (800b744 <atan+0x314>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4620      	mov	r0, r4
 800b600:	4629      	mov	r1, r5
 800b602:	f7f4 fe61 	bl	80002c8 <__aeabi_dsub>
 800b606:	4b4f      	ldr	r3, [pc, #316]	@ (800b744 <atan+0x314>)
 800b608:	4606      	mov	r6, r0
 800b60a:	460f      	mov	r7, r1
 800b60c:	2200      	movs	r2, #0
 800b60e:	4620      	mov	r0, r4
 800b610:	4629      	mov	r1, r5
 800b612:	f7f4 fe5b 	bl	80002cc <__adddf3>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	4630      	mov	r0, r6
 800b61c:	4639      	mov	r1, r7
 800b61e:	f7f5 f935 	bl	800088c <__aeabi_ddiv>
 800b622:	f04f 0a01 	mov.w	sl, #1
 800b626:	4604      	mov	r4, r0
 800b628:	460d      	mov	r5, r1
 800b62a:	e765      	b.n	800b4f8 <atan+0xc8>
 800b62c:	4b47      	ldr	r3, [pc, #284]	@ (800b74c <atan+0x31c>)
 800b62e:	429e      	cmp	r6, r3
 800b630:	d21c      	bcs.n	800b66c <atan+0x23c>
 800b632:	4b47      	ldr	r3, [pc, #284]	@ (800b750 <atan+0x320>)
 800b634:	2200      	movs	r2, #0
 800b636:	4620      	mov	r0, r4
 800b638:	4629      	mov	r1, r5
 800b63a:	f7f4 fe45 	bl	80002c8 <__aeabi_dsub>
 800b63e:	4b44      	ldr	r3, [pc, #272]	@ (800b750 <atan+0x320>)
 800b640:	4606      	mov	r6, r0
 800b642:	460f      	mov	r7, r1
 800b644:	2200      	movs	r2, #0
 800b646:	4620      	mov	r0, r4
 800b648:	4629      	mov	r1, r5
 800b64a:	f7f4 fff5 	bl	8000638 <__aeabi_dmul>
 800b64e:	4b3d      	ldr	r3, [pc, #244]	@ (800b744 <atan+0x314>)
 800b650:	2200      	movs	r2, #0
 800b652:	f7f4 fe3b 	bl	80002cc <__adddf3>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	4630      	mov	r0, r6
 800b65c:	4639      	mov	r1, r7
 800b65e:	f7f5 f915 	bl	800088c <__aeabi_ddiv>
 800b662:	f04f 0a02 	mov.w	sl, #2
 800b666:	4604      	mov	r4, r0
 800b668:	460d      	mov	r5, r1
 800b66a:	e745      	b.n	800b4f8 <atan+0xc8>
 800b66c:	4622      	mov	r2, r4
 800b66e:	462b      	mov	r3, r5
 800b670:	4938      	ldr	r1, [pc, #224]	@ (800b754 <atan+0x324>)
 800b672:	2000      	movs	r0, #0
 800b674:	f7f5 f90a 	bl	800088c <__aeabi_ddiv>
 800b678:	f04f 0a03 	mov.w	sl, #3
 800b67c:	4604      	mov	r4, r0
 800b67e:	460d      	mov	r5, r1
 800b680:	e73a      	b.n	800b4f8 <atan+0xc8>
 800b682:	4b35      	ldr	r3, [pc, #212]	@ (800b758 <atan+0x328>)
 800b684:	4e35      	ldr	r6, [pc, #212]	@ (800b75c <atan+0x32c>)
 800b686:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	f7f4 fe1b 	bl	80002c8 <__aeabi_dsub>
 800b692:	4622      	mov	r2, r4
 800b694:	462b      	mov	r3, r5
 800b696:	f7f4 fe17 	bl	80002c8 <__aeabi_dsub>
 800b69a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b6a6:	f7f4 fe0f 	bl	80002c8 <__aeabi_dsub>
 800b6aa:	f1bb 0f00 	cmp.w	fp, #0
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	460d      	mov	r5, r1
 800b6b2:	f6bf aedc 	bge.w	800b46e <atan+0x3e>
 800b6b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6ba:	461d      	mov	r5, r3
 800b6bc:	e6d7      	b.n	800b46e <atan+0x3e>
 800b6be:	a51c      	add	r5, pc, #112	@ (adr r5, 800b730 <atan+0x300>)
 800b6c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b6c4:	e6d3      	b.n	800b46e <atan+0x3e>
 800b6c6:	bf00      	nop
 800b6c8:	54442d18 	.word	0x54442d18
 800b6cc:	3ff921fb 	.word	0x3ff921fb
 800b6d0:	8800759c 	.word	0x8800759c
 800b6d4:	7e37e43c 	.word	0x7e37e43c
 800b6d8:	e322da11 	.word	0xe322da11
 800b6dc:	3f90ad3a 	.word	0x3f90ad3a
 800b6e0:	24760deb 	.word	0x24760deb
 800b6e4:	3fa97b4b 	.word	0x3fa97b4b
 800b6e8:	a0d03d51 	.word	0xa0d03d51
 800b6ec:	3fb10d66 	.word	0x3fb10d66
 800b6f0:	c54c206e 	.word	0xc54c206e
 800b6f4:	3fb745cd 	.word	0x3fb745cd
 800b6f8:	920083ff 	.word	0x920083ff
 800b6fc:	3fc24924 	.word	0x3fc24924
 800b700:	5555550d 	.word	0x5555550d
 800b704:	3fd55555 	.word	0x3fd55555
 800b708:	2c6a6c2f 	.word	0x2c6a6c2f
 800b70c:	bfa2b444 	.word	0xbfa2b444
 800b710:	52defd9a 	.word	0x52defd9a
 800b714:	3fadde2d 	.word	0x3fadde2d
 800b718:	af749a6d 	.word	0xaf749a6d
 800b71c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b720:	fe231671 	.word	0xfe231671
 800b724:	3fbc71c6 	.word	0x3fbc71c6
 800b728:	9998ebc4 	.word	0x9998ebc4
 800b72c:	3fc99999 	.word	0x3fc99999
 800b730:	54442d18 	.word	0x54442d18
 800b734:	bff921fb 	.word	0xbff921fb
 800b738:	440fffff 	.word	0x440fffff
 800b73c:	7ff00000 	.word	0x7ff00000
 800b740:	3fdbffff 	.word	0x3fdbffff
 800b744:	3ff00000 	.word	0x3ff00000
 800b748:	3ff2ffff 	.word	0x3ff2ffff
 800b74c:	40038000 	.word	0x40038000
 800b750:	3ff80000 	.word	0x3ff80000
 800b754:	bff00000 	.word	0xbff00000
 800b758:	0800f908 	.word	0x0800f908
 800b75c:	0800f928 	.word	0x0800f928

0800b760 <cos>:
 800b760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b762:	ec53 2b10 	vmov	r2, r3, d0
 800b766:	4826      	ldr	r0, [pc, #152]	@ (800b800 <cos+0xa0>)
 800b768:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b76c:	4281      	cmp	r1, r0
 800b76e:	d806      	bhi.n	800b77e <cos+0x1e>
 800b770:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b7f8 <cos+0x98>
 800b774:	b005      	add	sp, #20
 800b776:	f85d eb04 	ldr.w	lr, [sp], #4
 800b77a:	f000 bed9 	b.w	800c530 <__kernel_cos>
 800b77e:	4821      	ldr	r0, [pc, #132]	@ (800b804 <cos+0xa4>)
 800b780:	4281      	cmp	r1, r0
 800b782:	d908      	bls.n	800b796 <cos+0x36>
 800b784:	4610      	mov	r0, r2
 800b786:	4619      	mov	r1, r3
 800b788:	f7f4 fd9e 	bl	80002c8 <__aeabi_dsub>
 800b78c:	ec41 0b10 	vmov	d0, r0, r1
 800b790:	b005      	add	sp, #20
 800b792:	f85d fb04 	ldr.w	pc, [sp], #4
 800b796:	4668      	mov	r0, sp
 800b798:	f000 f976 	bl	800ba88 <__ieee754_rem_pio2>
 800b79c:	f000 0003 	and.w	r0, r0, #3
 800b7a0:	2801      	cmp	r0, #1
 800b7a2:	d00b      	beq.n	800b7bc <cos+0x5c>
 800b7a4:	2802      	cmp	r0, #2
 800b7a6:	d015      	beq.n	800b7d4 <cos+0x74>
 800b7a8:	b9d8      	cbnz	r0, 800b7e2 <cos+0x82>
 800b7aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b7ae:	ed9d 0b00 	vldr	d0, [sp]
 800b7b2:	f000 febd 	bl	800c530 <__kernel_cos>
 800b7b6:	ec51 0b10 	vmov	r0, r1, d0
 800b7ba:	e7e7      	b.n	800b78c <cos+0x2c>
 800b7bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b7c0:	ed9d 0b00 	vldr	d0, [sp]
 800b7c4:	f000 ff7c 	bl	800c6c0 <__kernel_sin>
 800b7c8:	ec53 2b10 	vmov	r2, r3, d0
 800b7cc:	4610      	mov	r0, r2
 800b7ce:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b7d2:	e7db      	b.n	800b78c <cos+0x2c>
 800b7d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b7d8:	ed9d 0b00 	vldr	d0, [sp]
 800b7dc:	f000 fea8 	bl	800c530 <__kernel_cos>
 800b7e0:	e7f2      	b.n	800b7c8 <cos+0x68>
 800b7e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b7e6:	ed9d 0b00 	vldr	d0, [sp]
 800b7ea:	2001      	movs	r0, #1
 800b7ec:	f000 ff68 	bl	800c6c0 <__kernel_sin>
 800b7f0:	e7e1      	b.n	800b7b6 <cos+0x56>
 800b7f2:	bf00      	nop
 800b7f4:	f3af 8000 	nop.w
	...
 800b800:	3fe921fb 	.word	0x3fe921fb
 800b804:	7fefffff 	.word	0x7fefffff

0800b808 <fabs>:
 800b808:	ec51 0b10 	vmov	r0, r1, d0
 800b80c:	4602      	mov	r2, r0
 800b80e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b812:	ec43 2b10 	vmov	d0, r2, r3
 800b816:	4770      	bx	lr

0800b818 <sin>:
 800b818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b81a:	ec53 2b10 	vmov	r2, r3, d0
 800b81e:	4826      	ldr	r0, [pc, #152]	@ (800b8b8 <sin+0xa0>)
 800b820:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b824:	4281      	cmp	r1, r0
 800b826:	d807      	bhi.n	800b838 <sin+0x20>
 800b828:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b8b0 <sin+0x98>
 800b82c:	2000      	movs	r0, #0
 800b82e:	b005      	add	sp, #20
 800b830:	f85d eb04 	ldr.w	lr, [sp], #4
 800b834:	f000 bf44 	b.w	800c6c0 <__kernel_sin>
 800b838:	4820      	ldr	r0, [pc, #128]	@ (800b8bc <sin+0xa4>)
 800b83a:	4281      	cmp	r1, r0
 800b83c:	d908      	bls.n	800b850 <sin+0x38>
 800b83e:	4610      	mov	r0, r2
 800b840:	4619      	mov	r1, r3
 800b842:	f7f4 fd41 	bl	80002c8 <__aeabi_dsub>
 800b846:	ec41 0b10 	vmov	d0, r0, r1
 800b84a:	b005      	add	sp, #20
 800b84c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b850:	4668      	mov	r0, sp
 800b852:	f000 f919 	bl	800ba88 <__ieee754_rem_pio2>
 800b856:	f000 0003 	and.w	r0, r0, #3
 800b85a:	2801      	cmp	r0, #1
 800b85c:	d00c      	beq.n	800b878 <sin+0x60>
 800b85e:	2802      	cmp	r0, #2
 800b860:	d011      	beq.n	800b886 <sin+0x6e>
 800b862:	b9e8      	cbnz	r0, 800b8a0 <sin+0x88>
 800b864:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b868:	ed9d 0b00 	vldr	d0, [sp]
 800b86c:	2001      	movs	r0, #1
 800b86e:	f000 ff27 	bl	800c6c0 <__kernel_sin>
 800b872:	ec51 0b10 	vmov	r0, r1, d0
 800b876:	e7e6      	b.n	800b846 <sin+0x2e>
 800b878:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b87c:	ed9d 0b00 	vldr	d0, [sp]
 800b880:	f000 fe56 	bl	800c530 <__kernel_cos>
 800b884:	e7f5      	b.n	800b872 <sin+0x5a>
 800b886:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b88a:	ed9d 0b00 	vldr	d0, [sp]
 800b88e:	2001      	movs	r0, #1
 800b890:	f000 ff16 	bl	800c6c0 <__kernel_sin>
 800b894:	ec53 2b10 	vmov	r2, r3, d0
 800b898:	4610      	mov	r0, r2
 800b89a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b89e:	e7d2      	b.n	800b846 <sin+0x2e>
 800b8a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8a4:	ed9d 0b00 	vldr	d0, [sp]
 800b8a8:	f000 fe42 	bl	800c530 <__kernel_cos>
 800b8ac:	e7f2      	b.n	800b894 <sin+0x7c>
 800b8ae:	bf00      	nop
	...
 800b8b8:	3fe921fb 	.word	0x3fe921fb
 800b8bc:	7fefffff 	.word	0x7fefffff

0800b8c0 <__ieee754_sqrt>:
 800b8c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	4a68      	ldr	r2, [pc, #416]	@ (800ba68 <__ieee754_sqrt+0x1a8>)
 800b8c6:	ec55 4b10 	vmov	r4, r5, d0
 800b8ca:	43aa      	bics	r2, r5
 800b8cc:	462b      	mov	r3, r5
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	d110      	bne.n	800b8f4 <__ieee754_sqrt+0x34>
 800b8d2:	4622      	mov	r2, r4
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	f7f4 feae 	bl	8000638 <__aeabi_dmul>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	4629      	mov	r1, r5
 800b8e4:	f7f4 fcf2 	bl	80002cc <__adddf3>
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	460d      	mov	r5, r1
 800b8ec:	ec45 4b10 	vmov	d0, r4, r5
 800b8f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f4:	2d00      	cmp	r5, #0
 800b8f6:	dc0e      	bgt.n	800b916 <__ieee754_sqrt+0x56>
 800b8f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b8fc:	4322      	orrs	r2, r4
 800b8fe:	d0f5      	beq.n	800b8ec <__ieee754_sqrt+0x2c>
 800b900:	b19d      	cbz	r5, 800b92a <__ieee754_sqrt+0x6a>
 800b902:	4622      	mov	r2, r4
 800b904:	4620      	mov	r0, r4
 800b906:	4629      	mov	r1, r5
 800b908:	f7f4 fcde 	bl	80002c8 <__aeabi_dsub>
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	f7f4 ffbc 	bl	800088c <__aeabi_ddiv>
 800b914:	e7e8      	b.n	800b8e8 <__ieee754_sqrt+0x28>
 800b916:	152a      	asrs	r2, r5, #20
 800b918:	d115      	bne.n	800b946 <__ieee754_sqrt+0x86>
 800b91a:	2000      	movs	r0, #0
 800b91c:	e009      	b.n	800b932 <__ieee754_sqrt+0x72>
 800b91e:	0acb      	lsrs	r3, r1, #11
 800b920:	3a15      	subs	r2, #21
 800b922:	0549      	lsls	r1, r1, #21
 800b924:	2b00      	cmp	r3, #0
 800b926:	d0fa      	beq.n	800b91e <__ieee754_sqrt+0x5e>
 800b928:	e7f7      	b.n	800b91a <__ieee754_sqrt+0x5a>
 800b92a:	462a      	mov	r2, r5
 800b92c:	e7fa      	b.n	800b924 <__ieee754_sqrt+0x64>
 800b92e:	005b      	lsls	r3, r3, #1
 800b930:	3001      	adds	r0, #1
 800b932:	02dc      	lsls	r4, r3, #11
 800b934:	d5fb      	bpl.n	800b92e <__ieee754_sqrt+0x6e>
 800b936:	1e44      	subs	r4, r0, #1
 800b938:	1b12      	subs	r2, r2, r4
 800b93a:	f1c0 0420 	rsb	r4, r0, #32
 800b93e:	fa21 f404 	lsr.w	r4, r1, r4
 800b942:	4323      	orrs	r3, r4
 800b944:	4081      	lsls	r1, r0
 800b946:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b94a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b94e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b952:	07d2      	lsls	r2, r2, #31
 800b954:	bf5c      	itt	pl
 800b956:	005b      	lslpl	r3, r3, #1
 800b958:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b95c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b960:	bf58      	it	pl
 800b962:	0049      	lslpl	r1, r1, #1
 800b964:	2600      	movs	r6, #0
 800b966:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b96a:	106d      	asrs	r5, r5, #1
 800b96c:	0049      	lsls	r1, r1, #1
 800b96e:	2016      	movs	r0, #22
 800b970:	4632      	mov	r2, r6
 800b972:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b976:	1917      	adds	r7, r2, r4
 800b978:	429f      	cmp	r7, r3
 800b97a:	bfde      	ittt	le
 800b97c:	193a      	addle	r2, r7, r4
 800b97e:	1bdb      	suble	r3, r3, r7
 800b980:	1936      	addle	r6, r6, r4
 800b982:	0fcf      	lsrs	r7, r1, #31
 800b984:	3801      	subs	r0, #1
 800b986:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b98a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b98e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b992:	d1f0      	bne.n	800b976 <__ieee754_sqrt+0xb6>
 800b994:	4604      	mov	r4, r0
 800b996:	2720      	movs	r7, #32
 800b998:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b99c:	429a      	cmp	r2, r3
 800b99e:	eb00 0e0c 	add.w	lr, r0, ip
 800b9a2:	db02      	blt.n	800b9aa <__ieee754_sqrt+0xea>
 800b9a4:	d113      	bne.n	800b9ce <__ieee754_sqrt+0x10e>
 800b9a6:	458e      	cmp	lr, r1
 800b9a8:	d811      	bhi.n	800b9ce <__ieee754_sqrt+0x10e>
 800b9aa:	f1be 0f00 	cmp.w	lr, #0
 800b9ae:	eb0e 000c 	add.w	r0, lr, ip
 800b9b2:	da42      	bge.n	800ba3a <__ieee754_sqrt+0x17a>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	db40      	blt.n	800ba3a <__ieee754_sqrt+0x17a>
 800b9b8:	f102 0801 	add.w	r8, r2, #1
 800b9bc:	1a9b      	subs	r3, r3, r2
 800b9be:	458e      	cmp	lr, r1
 800b9c0:	bf88      	it	hi
 800b9c2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800b9c6:	eba1 010e 	sub.w	r1, r1, lr
 800b9ca:	4464      	add	r4, ip
 800b9cc:	4642      	mov	r2, r8
 800b9ce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b9d2:	3f01      	subs	r7, #1
 800b9d4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b9d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b9dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b9e0:	d1dc      	bne.n	800b99c <__ieee754_sqrt+0xdc>
 800b9e2:	4319      	orrs	r1, r3
 800b9e4:	d01b      	beq.n	800ba1e <__ieee754_sqrt+0x15e>
 800b9e6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ba6c <__ieee754_sqrt+0x1ac>
 800b9ea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ba70 <__ieee754_sqrt+0x1b0>
 800b9ee:	e9da 0100 	ldrd	r0, r1, [sl]
 800b9f2:	e9db 2300 	ldrd	r2, r3, [fp]
 800b9f6:	f7f4 fc67 	bl	80002c8 <__aeabi_dsub>
 800b9fa:	e9da 8900 	ldrd	r8, r9, [sl]
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	4640      	mov	r0, r8
 800ba04:	4649      	mov	r1, r9
 800ba06:	f7f5 f893 	bl	8000b30 <__aeabi_dcmple>
 800ba0a:	b140      	cbz	r0, 800ba1e <__ieee754_sqrt+0x15e>
 800ba0c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800ba10:	e9da 0100 	ldrd	r0, r1, [sl]
 800ba14:	e9db 2300 	ldrd	r2, r3, [fp]
 800ba18:	d111      	bne.n	800ba3e <__ieee754_sqrt+0x17e>
 800ba1a:	3601      	adds	r6, #1
 800ba1c:	463c      	mov	r4, r7
 800ba1e:	1072      	asrs	r2, r6, #1
 800ba20:	0863      	lsrs	r3, r4, #1
 800ba22:	07f1      	lsls	r1, r6, #31
 800ba24:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ba28:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ba2c:	bf48      	it	mi
 800ba2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ba32:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ba36:	4618      	mov	r0, r3
 800ba38:	e756      	b.n	800b8e8 <__ieee754_sqrt+0x28>
 800ba3a:	4690      	mov	r8, r2
 800ba3c:	e7be      	b.n	800b9bc <__ieee754_sqrt+0xfc>
 800ba3e:	f7f4 fc45 	bl	80002cc <__adddf3>
 800ba42:	e9da 8900 	ldrd	r8, r9, [sl]
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	4649      	mov	r1, r9
 800ba4e:	f7f5 f865 	bl	8000b1c <__aeabi_dcmplt>
 800ba52:	b120      	cbz	r0, 800ba5e <__ieee754_sqrt+0x19e>
 800ba54:	1ca0      	adds	r0, r4, #2
 800ba56:	bf08      	it	eq
 800ba58:	3601      	addeq	r6, #1
 800ba5a:	3402      	adds	r4, #2
 800ba5c:	e7df      	b.n	800ba1e <__ieee754_sqrt+0x15e>
 800ba5e:	1c63      	adds	r3, r4, #1
 800ba60:	f023 0401 	bic.w	r4, r3, #1
 800ba64:	e7db      	b.n	800ba1e <__ieee754_sqrt+0x15e>
 800ba66:	bf00      	nop
 800ba68:	7ff00000 	.word	0x7ff00000
 800ba6c:	20000018 	.word	0x20000018
 800ba70:	20000010 	.word	0x20000010
 800ba74:	00000000 	.word	0x00000000

0800ba78 <nan>:
 800ba78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ba80 <nan+0x8>
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	00000000 	.word	0x00000000
 800ba84:	7ff80000 	.word	0x7ff80000

0800ba88 <__ieee754_rem_pio2>:
 800ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8c:	ec57 6b10 	vmov	r6, r7, d0
 800ba90:	4bc5      	ldr	r3, [pc, #788]	@ (800bda8 <__ieee754_rem_pio2+0x320>)
 800ba92:	b08d      	sub	sp, #52	@ 0x34
 800ba94:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ba98:	4598      	cmp	r8, r3
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	9704      	str	r7, [sp, #16]
 800ba9e:	d807      	bhi.n	800bab0 <__ieee754_rem_pio2+0x28>
 800baa0:	2200      	movs	r2, #0
 800baa2:	2300      	movs	r3, #0
 800baa4:	ed80 0b00 	vstr	d0, [r0]
 800baa8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800baac:	2500      	movs	r5, #0
 800baae:	e028      	b.n	800bb02 <__ieee754_rem_pio2+0x7a>
 800bab0:	4bbe      	ldr	r3, [pc, #760]	@ (800bdac <__ieee754_rem_pio2+0x324>)
 800bab2:	4598      	cmp	r8, r3
 800bab4:	d878      	bhi.n	800bba8 <__ieee754_rem_pio2+0x120>
 800bab6:	9b04      	ldr	r3, [sp, #16]
 800bab8:	4dbd      	ldr	r5, [pc, #756]	@ (800bdb0 <__ieee754_rem_pio2+0x328>)
 800baba:	2b00      	cmp	r3, #0
 800babc:	4630      	mov	r0, r6
 800babe:	a3ac      	add	r3, pc, #688	@ (adr r3, 800bd70 <__ieee754_rem_pio2+0x2e8>)
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	4639      	mov	r1, r7
 800bac6:	dd38      	ble.n	800bb3a <__ieee754_rem_pio2+0xb2>
 800bac8:	f7f4 fbfe 	bl	80002c8 <__aeabi_dsub>
 800bacc:	45a8      	cmp	r8, r5
 800bace:	4606      	mov	r6, r0
 800bad0:	460f      	mov	r7, r1
 800bad2:	d01a      	beq.n	800bb0a <__ieee754_rem_pio2+0x82>
 800bad4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800bd78 <__ieee754_rem_pio2+0x2f0>)
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	f7f4 fbf5 	bl	80002c8 <__aeabi_dsub>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	4680      	mov	r8, r0
 800bae4:	4689      	mov	r9, r1
 800bae6:	4630      	mov	r0, r6
 800bae8:	4639      	mov	r1, r7
 800baea:	f7f4 fbed 	bl	80002c8 <__aeabi_dsub>
 800baee:	a3a2      	add	r3, pc, #648	@ (adr r3, 800bd78 <__ieee754_rem_pio2+0x2f0>)
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	f7f4 fbe8 	bl	80002c8 <__aeabi_dsub>
 800baf8:	e9c4 8900 	strd	r8, r9, [r4]
 800bafc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bb00:	2501      	movs	r5, #1
 800bb02:	4628      	mov	r0, r5
 800bb04:	b00d      	add	sp, #52	@ 0x34
 800bb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0a:	a39d      	add	r3, pc, #628	@ (adr r3, 800bd80 <__ieee754_rem_pio2+0x2f8>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f7f4 fbda 	bl	80002c8 <__aeabi_dsub>
 800bb14:	a39c      	add	r3, pc, #624	@ (adr r3, 800bd88 <__ieee754_rem_pio2+0x300>)
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	460f      	mov	r7, r1
 800bb1e:	f7f4 fbd3 	bl	80002c8 <__aeabi_dsub>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	4680      	mov	r8, r0
 800bb28:	4689      	mov	r9, r1
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	4639      	mov	r1, r7
 800bb2e:	f7f4 fbcb 	bl	80002c8 <__aeabi_dsub>
 800bb32:	a395      	add	r3, pc, #596	@ (adr r3, 800bd88 <__ieee754_rem_pio2+0x300>)
 800bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb38:	e7dc      	b.n	800baf4 <__ieee754_rem_pio2+0x6c>
 800bb3a:	f7f4 fbc7 	bl	80002cc <__adddf3>
 800bb3e:	45a8      	cmp	r8, r5
 800bb40:	4606      	mov	r6, r0
 800bb42:	460f      	mov	r7, r1
 800bb44:	d018      	beq.n	800bb78 <__ieee754_rem_pio2+0xf0>
 800bb46:	a38c      	add	r3, pc, #560	@ (adr r3, 800bd78 <__ieee754_rem_pio2+0x2f0>)
 800bb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4c:	f7f4 fbbe 	bl	80002cc <__adddf3>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4680      	mov	r8, r0
 800bb56:	4689      	mov	r9, r1
 800bb58:	4630      	mov	r0, r6
 800bb5a:	4639      	mov	r1, r7
 800bb5c:	f7f4 fbb4 	bl	80002c8 <__aeabi_dsub>
 800bb60:	a385      	add	r3, pc, #532	@ (adr r3, 800bd78 <__ieee754_rem_pio2+0x2f0>)
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	f7f4 fbb1 	bl	80002cc <__adddf3>
 800bb6a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bb6e:	e9c4 8900 	strd	r8, r9, [r4]
 800bb72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bb76:	e7c4      	b.n	800bb02 <__ieee754_rem_pio2+0x7a>
 800bb78:	a381      	add	r3, pc, #516	@ (adr r3, 800bd80 <__ieee754_rem_pio2+0x2f8>)
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	f7f4 fba5 	bl	80002cc <__adddf3>
 800bb82:	a381      	add	r3, pc, #516	@ (adr r3, 800bd88 <__ieee754_rem_pio2+0x300>)
 800bb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb88:	4606      	mov	r6, r0
 800bb8a:	460f      	mov	r7, r1
 800bb8c:	f7f4 fb9e 	bl	80002cc <__adddf3>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	4680      	mov	r8, r0
 800bb96:	4689      	mov	r9, r1
 800bb98:	4630      	mov	r0, r6
 800bb9a:	4639      	mov	r1, r7
 800bb9c:	f7f4 fb94 	bl	80002c8 <__aeabi_dsub>
 800bba0:	a379      	add	r3, pc, #484	@ (adr r3, 800bd88 <__ieee754_rem_pio2+0x300>)
 800bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba6:	e7de      	b.n	800bb66 <__ieee754_rem_pio2+0xde>
 800bba8:	4b82      	ldr	r3, [pc, #520]	@ (800bdb4 <__ieee754_rem_pio2+0x32c>)
 800bbaa:	4598      	cmp	r8, r3
 800bbac:	f200 80d1 	bhi.w	800bd52 <__ieee754_rem_pio2+0x2ca>
 800bbb0:	f7ff fe2a 	bl	800b808 <fabs>
 800bbb4:	ec57 6b10 	vmov	r6, r7, d0
 800bbb8:	a375      	add	r3, pc, #468	@ (adr r3, 800bd90 <__ieee754_rem_pio2+0x308>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	f7f4 fd39 	bl	8000638 <__aeabi_dmul>
 800bbc6:	4b7c      	ldr	r3, [pc, #496]	@ (800bdb8 <__ieee754_rem_pio2+0x330>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f7f4 fb7f 	bl	80002cc <__adddf3>
 800bbce:	f7f4 ffe3 	bl	8000b98 <__aeabi_d2iz>
 800bbd2:	4605      	mov	r5, r0
 800bbd4:	f7f4 fcc6 	bl	8000564 <__aeabi_i2d>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bbe0:	a363      	add	r3, pc, #396	@ (adr r3, 800bd70 <__ieee754_rem_pio2+0x2e8>)
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	f7f4 fd27 	bl	8000638 <__aeabi_dmul>
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	4630      	mov	r0, r6
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	f7f4 fb69 	bl	80002c8 <__aeabi_dsub>
 800bbf6:	a360      	add	r3, pc, #384	@ (adr r3, 800bd78 <__ieee754_rem_pio2+0x2f0>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	4682      	mov	sl, r0
 800bbfe:	468b      	mov	fp, r1
 800bc00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc04:	f7f4 fd18 	bl	8000638 <__aeabi_dmul>
 800bc08:	2d1f      	cmp	r5, #31
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	460f      	mov	r7, r1
 800bc0e:	dc0c      	bgt.n	800bc2a <__ieee754_rem_pio2+0x1a2>
 800bc10:	4b6a      	ldr	r3, [pc, #424]	@ (800bdbc <__ieee754_rem_pio2+0x334>)
 800bc12:	1e6a      	subs	r2, r5, #1
 800bc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc18:	4543      	cmp	r3, r8
 800bc1a:	d006      	beq.n	800bc2a <__ieee754_rem_pio2+0x1a2>
 800bc1c:	4632      	mov	r2, r6
 800bc1e:	463b      	mov	r3, r7
 800bc20:	4650      	mov	r0, sl
 800bc22:	4659      	mov	r1, fp
 800bc24:	f7f4 fb50 	bl	80002c8 <__aeabi_dsub>
 800bc28:	e00e      	b.n	800bc48 <__ieee754_rem_pio2+0x1c0>
 800bc2a:	463b      	mov	r3, r7
 800bc2c:	4632      	mov	r2, r6
 800bc2e:	4650      	mov	r0, sl
 800bc30:	4659      	mov	r1, fp
 800bc32:	f7f4 fb49 	bl	80002c8 <__aeabi_dsub>
 800bc36:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bc3a:	9305      	str	r3, [sp, #20]
 800bc3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc40:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800bc44:	2b10      	cmp	r3, #16
 800bc46:	dc02      	bgt.n	800bc4e <__ieee754_rem_pio2+0x1c6>
 800bc48:	e9c4 0100 	strd	r0, r1, [r4]
 800bc4c:	e039      	b.n	800bcc2 <__ieee754_rem_pio2+0x23a>
 800bc4e:	a34c      	add	r3, pc, #304	@ (adr r3, 800bd80 <__ieee754_rem_pio2+0x2f8>)
 800bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc58:	f7f4 fcee 	bl	8000638 <__aeabi_dmul>
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	460f      	mov	r7, r1
 800bc60:	4602      	mov	r2, r0
 800bc62:	460b      	mov	r3, r1
 800bc64:	4650      	mov	r0, sl
 800bc66:	4659      	mov	r1, fp
 800bc68:	f7f4 fb2e 	bl	80002c8 <__aeabi_dsub>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4680      	mov	r8, r0
 800bc72:	4689      	mov	r9, r1
 800bc74:	4650      	mov	r0, sl
 800bc76:	4659      	mov	r1, fp
 800bc78:	f7f4 fb26 	bl	80002c8 <__aeabi_dsub>
 800bc7c:	4632      	mov	r2, r6
 800bc7e:	463b      	mov	r3, r7
 800bc80:	f7f4 fb22 	bl	80002c8 <__aeabi_dsub>
 800bc84:	a340      	add	r3, pc, #256	@ (adr r3, 800bd88 <__ieee754_rem_pio2+0x300>)
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	460f      	mov	r7, r1
 800bc8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc92:	f7f4 fcd1 	bl	8000638 <__aeabi_dmul>
 800bc96:	4632      	mov	r2, r6
 800bc98:	463b      	mov	r3, r7
 800bc9a:	f7f4 fb15 	bl	80002c8 <__aeabi_dsub>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4606      	mov	r6, r0
 800bca4:	460f      	mov	r7, r1
 800bca6:	4640      	mov	r0, r8
 800bca8:	4649      	mov	r1, r9
 800bcaa:	f7f4 fb0d 	bl	80002c8 <__aeabi_dsub>
 800bcae:	9a05      	ldr	r2, [sp, #20]
 800bcb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	2b31      	cmp	r3, #49	@ 0x31
 800bcb8:	dc20      	bgt.n	800bcfc <__ieee754_rem_pio2+0x274>
 800bcba:	e9c4 0100 	strd	r0, r1, [r4]
 800bcbe:	46c2      	mov	sl, r8
 800bcc0:	46cb      	mov	fp, r9
 800bcc2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	4642      	mov	r2, r8
 800bcca:	464b      	mov	r3, r9
 800bccc:	4659      	mov	r1, fp
 800bcce:	f7f4 fafb 	bl	80002c8 <__aeabi_dsub>
 800bcd2:	463b      	mov	r3, r7
 800bcd4:	4632      	mov	r2, r6
 800bcd6:	f7f4 faf7 	bl	80002c8 <__aeabi_dsub>
 800bcda:	9b04      	ldr	r3, [sp, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bce2:	f6bf af0e 	bge.w	800bb02 <__ieee754_rem_pio2+0x7a>
 800bce6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800bcea:	6063      	str	r3, [r4, #4]
 800bcec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bcf0:	f8c4 8000 	str.w	r8, [r4]
 800bcf4:	60a0      	str	r0, [r4, #8]
 800bcf6:	60e3      	str	r3, [r4, #12]
 800bcf8:	426d      	negs	r5, r5
 800bcfa:	e702      	b.n	800bb02 <__ieee754_rem_pio2+0x7a>
 800bcfc:	a326      	add	r3, pc, #152	@ (adr r3, 800bd98 <__ieee754_rem_pio2+0x310>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd06:	f7f4 fc97 	bl	8000638 <__aeabi_dmul>
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	460f      	mov	r7, r1
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4640      	mov	r0, r8
 800bd14:	4649      	mov	r1, r9
 800bd16:	f7f4 fad7 	bl	80002c8 <__aeabi_dsub>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	4682      	mov	sl, r0
 800bd20:	468b      	mov	fp, r1
 800bd22:	4640      	mov	r0, r8
 800bd24:	4649      	mov	r1, r9
 800bd26:	f7f4 facf 	bl	80002c8 <__aeabi_dsub>
 800bd2a:	4632      	mov	r2, r6
 800bd2c:	463b      	mov	r3, r7
 800bd2e:	f7f4 facb 	bl	80002c8 <__aeabi_dsub>
 800bd32:	a31b      	add	r3, pc, #108	@ (adr r3, 800bda0 <__ieee754_rem_pio2+0x318>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	4606      	mov	r6, r0
 800bd3a:	460f      	mov	r7, r1
 800bd3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd40:	f7f4 fc7a 	bl	8000638 <__aeabi_dmul>
 800bd44:	4632      	mov	r2, r6
 800bd46:	463b      	mov	r3, r7
 800bd48:	f7f4 fabe 	bl	80002c8 <__aeabi_dsub>
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	460f      	mov	r7, r1
 800bd50:	e764      	b.n	800bc1c <__ieee754_rem_pio2+0x194>
 800bd52:	4b1b      	ldr	r3, [pc, #108]	@ (800bdc0 <__ieee754_rem_pio2+0x338>)
 800bd54:	4598      	cmp	r8, r3
 800bd56:	d935      	bls.n	800bdc4 <__ieee754_rem_pio2+0x33c>
 800bd58:	4632      	mov	r2, r6
 800bd5a:	463b      	mov	r3, r7
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	4639      	mov	r1, r7
 800bd60:	f7f4 fab2 	bl	80002c8 <__aeabi_dsub>
 800bd64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd68:	e9c4 0100 	strd	r0, r1, [r4]
 800bd6c:	e69e      	b.n	800baac <__ieee754_rem_pio2+0x24>
 800bd6e:	bf00      	nop
 800bd70:	54400000 	.word	0x54400000
 800bd74:	3ff921fb 	.word	0x3ff921fb
 800bd78:	1a626331 	.word	0x1a626331
 800bd7c:	3dd0b461 	.word	0x3dd0b461
 800bd80:	1a600000 	.word	0x1a600000
 800bd84:	3dd0b461 	.word	0x3dd0b461
 800bd88:	2e037073 	.word	0x2e037073
 800bd8c:	3ba3198a 	.word	0x3ba3198a
 800bd90:	6dc9c883 	.word	0x6dc9c883
 800bd94:	3fe45f30 	.word	0x3fe45f30
 800bd98:	2e000000 	.word	0x2e000000
 800bd9c:	3ba3198a 	.word	0x3ba3198a
 800bda0:	252049c1 	.word	0x252049c1
 800bda4:	397b839a 	.word	0x397b839a
 800bda8:	3fe921fb 	.word	0x3fe921fb
 800bdac:	4002d97b 	.word	0x4002d97b
 800bdb0:	3ff921fb 	.word	0x3ff921fb
 800bdb4:	413921fb 	.word	0x413921fb
 800bdb8:	3fe00000 	.word	0x3fe00000
 800bdbc:	0800f948 	.word	0x0800f948
 800bdc0:	7fefffff 	.word	0x7fefffff
 800bdc4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bdc8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800bdcc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	460f      	mov	r7, r1
 800bdd4:	f7f4 fee0 	bl	8000b98 <__aeabi_d2iz>
 800bdd8:	f7f4 fbc4 	bl	8000564 <__aeabi_i2d>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4630      	mov	r0, r6
 800bde2:	4639      	mov	r1, r7
 800bde4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bde8:	f7f4 fa6e 	bl	80002c8 <__aeabi_dsub>
 800bdec:	4b22      	ldr	r3, [pc, #136]	@ (800be78 <__ieee754_rem_pio2+0x3f0>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f7f4 fc22 	bl	8000638 <__aeabi_dmul>
 800bdf4:	460f      	mov	r7, r1
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	f7f4 fece 	bl	8000b98 <__aeabi_d2iz>
 800bdfc:	f7f4 fbb2 	bl	8000564 <__aeabi_i2d>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	4630      	mov	r0, r6
 800be06:	4639      	mov	r1, r7
 800be08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800be0c:	f7f4 fa5c 	bl	80002c8 <__aeabi_dsub>
 800be10:	4b19      	ldr	r3, [pc, #100]	@ (800be78 <__ieee754_rem_pio2+0x3f0>)
 800be12:	2200      	movs	r2, #0
 800be14:	f7f4 fc10 	bl	8000638 <__aeabi_dmul>
 800be18:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800be1c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800be20:	f04f 0803 	mov.w	r8, #3
 800be24:	2600      	movs	r6, #0
 800be26:	2700      	movs	r7, #0
 800be28:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800be2c:	4632      	mov	r2, r6
 800be2e:	463b      	mov	r3, r7
 800be30:	46c2      	mov	sl, r8
 800be32:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800be36:	f7f4 fe67 	bl	8000b08 <__aeabi_dcmpeq>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d1f4      	bne.n	800be28 <__ieee754_rem_pio2+0x3a0>
 800be3e:	4b0f      	ldr	r3, [pc, #60]	@ (800be7c <__ieee754_rem_pio2+0x3f4>)
 800be40:	9301      	str	r3, [sp, #4]
 800be42:	2302      	movs	r3, #2
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	462a      	mov	r2, r5
 800be48:	4653      	mov	r3, sl
 800be4a:	4621      	mov	r1, r4
 800be4c:	a806      	add	r0, sp, #24
 800be4e:	f000 f817 	bl	800be80 <__kernel_rem_pio2>
 800be52:	9b04      	ldr	r3, [sp, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	4605      	mov	r5, r0
 800be58:	f6bf ae53 	bge.w	800bb02 <__ieee754_rem_pio2+0x7a>
 800be5c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800be60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be64:	e9c4 2300 	strd	r2, r3, [r4]
 800be68:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800be6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be70:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800be74:	e740      	b.n	800bcf8 <__ieee754_rem_pio2+0x270>
 800be76:	bf00      	nop
 800be78:	41700000 	.word	0x41700000
 800be7c:	0800f9c8 	.word	0x0800f9c8

0800be80 <__kernel_rem_pio2>:
 800be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	ed2d 8b02 	vpush	{d8}
 800be88:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800be8c:	f112 0f14 	cmn.w	r2, #20
 800be90:	9306      	str	r3, [sp, #24]
 800be92:	9104      	str	r1, [sp, #16]
 800be94:	4bbe      	ldr	r3, [pc, #760]	@ (800c190 <__kernel_rem_pio2+0x310>)
 800be96:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800be98:	9008      	str	r0, [sp, #32]
 800be9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	9b06      	ldr	r3, [sp, #24]
 800bea2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bea6:	bfa8      	it	ge
 800bea8:	1ed4      	subge	r4, r2, #3
 800beaa:	9305      	str	r3, [sp, #20]
 800beac:	bfb2      	itee	lt
 800beae:	2400      	movlt	r4, #0
 800beb0:	2318      	movge	r3, #24
 800beb2:	fb94 f4f3 	sdivge	r4, r4, r3
 800beb6:	f06f 0317 	mvn.w	r3, #23
 800beba:	fb04 3303 	mla	r3, r4, r3, r3
 800bebe:	eb03 0b02 	add.w	fp, r3, r2
 800bec2:	9b00      	ldr	r3, [sp, #0]
 800bec4:	9a05      	ldr	r2, [sp, #20]
 800bec6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800c180 <__kernel_rem_pio2+0x300>
 800beca:	eb03 0802 	add.w	r8, r3, r2
 800bece:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bed0:	1aa7      	subs	r7, r4, r2
 800bed2:	ae20      	add	r6, sp, #128	@ 0x80
 800bed4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bed8:	2500      	movs	r5, #0
 800beda:	4545      	cmp	r5, r8
 800bedc:	dd13      	ble.n	800bf06 <__kernel_rem_pio2+0x86>
 800bede:	9b06      	ldr	r3, [sp, #24]
 800bee0:	aa20      	add	r2, sp, #128	@ 0x80
 800bee2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bee6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800beea:	f04f 0800 	mov.w	r8, #0
 800beee:	9b00      	ldr	r3, [sp, #0]
 800bef0:	4598      	cmp	r8, r3
 800bef2:	dc31      	bgt.n	800bf58 <__kernel_rem_pio2+0xd8>
 800bef4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800c180 <__kernel_rem_pio2+0x300>
 800bef8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800befc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf00:	462f      	mov	r7, r5
 800bf02:	2600      	movs	r6, #0
 800bf04:	e01b      	b.n	800bf3e <__kernel_rem_pio2+0xbe>
 800bf06:	42ef      	cmn	r7, r5
 800bf08:	d407      	bmi.n	800bf1a <__kernel_rem_pio2+0x9a>
 800bf0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bf0e:	f7f4 fb29 	bl	8000564 <__aeabi_i2d>
 800bf12:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bf16:	3501      	adds	r5, #1
 800bf18:	e7df      	b.n	800beda <__kernel_rem_pio2+0x5a>
 800bf1a:	ec51 0b18 	vmov	r0, r1, d8
 800bf1e:	e7f8      	b.n	800bf12 <__kernel_rem_pio2+0x92>
 800bf20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bf28:	f7f4 fb86 	bl	8000638 <__aeabi_dmul>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf34:	f7f4 f9ca 	bl	80002cc <__adddf3>
 800bf38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf3c:	3601      	adds	r6, #1
 800bf3e:	9b05      	ldr	r3, [sp, #20]
 800bf40:	429e      	cmp	r6, r3
 800bf42:	f1a7 0708 	sub.w	r7, r7, #8
 800bf46:	ddeb      	ble.n	800bf20 <__kernel_rem_pio2+0xa0>
 800bf48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf4c:	f108 0801 	add.w	r8, r8, #1
 800bf50:	ecaa 7b02 	vstmia	sl!, {d7}
 800bf54:	3508      	adds	r5, #8
 800bf56:	e7ca      	b.n	800beee <__kernel_rem_pio2+0x6e>
 800bf58:	9b00      	ldr	r3, [sp, #0]
 800bf5a:	f8dd 8000 	ldr.w	r8, [sp]
 800bf5e:	aa0c      	add	r2, sp, #48	@ 0x30
 800bf60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf64:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bf68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bf6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf6e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800bf72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf74:	ab98      	add	r3, sp, #608	@ 0x260
 800bf76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bf7a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800bf7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf82:	ac0c      	add	r4, sp, #48	@ 0x30
 800bf84:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bf86:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800bf8a:	46a1      	mov	r9, r4
 800bf8c:	46c2      	mov	sl, r8
 800bf8e:	f1ba 0f00 	cmp.w	sl, #0
 800bf92:	f1a5 0508 	sub.w	r5, r5, #8
 800bf96:	dc77      	bgt.n	800c088 <__kernel_rem_pio2+0x208>
 800bf98:	4658      	mov	r0, fp
 800bf9a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800bf9e:	f000 fc4b 	bl	800c838 <scalbn>
 800bfa2:	ec57 6b10 	vmov	r6, r7, d0
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800bfac:	4630      	mov	r0, r6
 800bfae:	4639      	mov	r1, r7
 800bfb0:	f7f4 fb42 	bl	8000638 <__aeabi_dmul>
 800bfb4:	ec41 0b10 	vmov	d0, r0, r1
 800bfb8:	f000 fcbe 	bl	800c938 <floor>
 800bfbc:	4b75      	ldr	r3, [pc, #468]	@ (800c194 <__kernel_rem_pio2+0x314>)
 800bfbe:	ec51 0b10 	vmov	r0, r1, d0
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f7f4 fb38 	bl	8000638 <__aeabi_dmul>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4630      	mov	r0, r6
 800bfce:	4639      	mov	r1, r7
 800bfd0:	f7f4 f97a 	bl	80002c8 <__aeabi_dsub>
 800bfd4:	460f      	mov	r7, r1
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	f7f4 fdde 	bl	8000b98 <__aeabi_d2iz>
 800bfdc:	9002      	str	r0, [sp, #8]
 800bfde:	f7f4 fac1 	bl	8000564 <__aeabi_i2d>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	4639      	mov	r1, r7
 800bfea:	f7f4 f96d 	bl	80002c8 <__aeabi_dsub>
 800bfee:	f1bb 0f00 	cmp.w	fp, #0
 800bff2:	4606      	mov	r6, r0
 800bff4:	460f      	mov	r7, r1
 800bff6:	dd6c      	ble.n	800c0d2 <__kernel_rem_pio2+0x252>
 800bff8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800bffc:	ab0c      	add	r3, sp, #48	@ 0x30
 800bffe:	9d02      	ldr	r5, [sp, #8]
 800c000:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c004:	f1cb 0018 	rsb	r0, fp, #24
 800c008:	fa43 f200 	asr.w	r2, r3, r0
 800c00c:	4415      	add	r5, r2
 800c00e:	4082      	lsls	r2, r0
 800c010:	1a9b      	subs	r3, r3, r2
 800c012:	aa0c      	add	r2, sp, #48	@ 0x30
 800c014:	9502      	str	r5, [sp, #8]
 800c016:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c01a:	f1cb 0217 	rsb	r2, fp, #23
 800c01e:	fa43 f902 	asr.w	r9, r3, r2
 800c022:	f1b9 0f00 	cmp.w	r9, #0
 800c026:	dd64      	ble.n	800c0f2 <__kernel_rem_pio2+0x272>
 800c028:	9b02      	ldr	r3, [sp, #8]
 800c02a:	2200      	movs	r2, #0
 800c02c:	3301      	adds	r3, #1
 800c02e:	9302      	str	r3, [sp, #8]
 800c030:	4615      	mov	r5, r2
 800c032:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c036:	4590      	cmp	r8, r2
 800c038:	f300 80b8 	bgt.w	800c1ac <__kernel_rem_pio2+0x32c>
 800c03c:	f1bb 0f00 	cmp.w	fp, #0
 800c040:	dd07      	ble.n	800c052 <__kernel_rem_pio2+0x1d2>
 800c042:	f1bb 0f01 	cmp.w	fp, #1
 800c046:	f000 80bf 	beq.w	800c1c8 <__kernel_rem_pio2+0x348>
 800c04a:	f1bb 0f02 	cmp.w	fp, #2
 800c04e:	f000 80c6 	beq.w	800c1de <__kernel_rem_pio2+0x35e>
 800c052:	f1b9 0f02 	cmp.w	r9, #2
 800c056:	d14c      	bne.n	800c0f2 <__kernel_rem_pio2+0x272>
 800c058:	4632      	mov	r2, r6
 800c05a:	463b      	mov	r3, r7
 800c05c:	494e      	ldr	r1, [pc, #312]	@ (800c198 <__kernel_rem_pio2+0x318>)
 800c05e:	2000      	movs	r0, #0
 800c060:	f7f4 f932 	bl	80002c8 <__aeabi_dsub>
 800c064:	4606      	mov	r6, r0
 800c066:	460f      	mov	r7, r1
 800c068:	2d00      	cmp	r5, #0
 800c06a:	d042      	beq.n	800c0f2 <__kernel_rem_pio2+0x272>
 800c06c:	4658      	mov	r0, fp
 800c06e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800c188 <__kernel_rem_pio2+0x308>
 800c072:	f000 fbe1 	bl	800c838 <scalbn>
 800c076:	4630      	mov	r0, r6
 800c078:	4639      	mov	r1, r7
 800c07a:	ec53 2b10 	vmov	r2, r3, d0
 800c07e:	f7f4 f923 	bl	80002c8 <__aeabi_dsub>
 800c082:	4606      	mov	r6, r0
 800c084:	460f      	mov	r7, r1
 800c086:	e034      	b.n	800c0f2 <__kernel_rem_pio2+0x272>
 800c088:	4b44      	ldr	r3, [pc, #272]	@ (800c19c <__kernel_rem_pio2+0x31c>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c090:	f7f4 fad2 	bl	8000638 <__aeabi_dmul>
 800c094:	f7f4 fd80 	bl	8000b98 <__aeabi_d2iz>
 800c098:	f7f4 fa64 	bl	8000564 <__aeabi_i2d>
 800c09c:	4b40      	ldr	r3, [pc, #256]	@ (800c1a0 <__kernel_rem_pio2+0x320>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	460f      	mov	r7, r1
 800c0a4:	f7f4 fac8 	bl	8000638 <__aeabi_dmul>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0b0:	f7f4 f90a 	bl	80002c8 <__aeabi_dsub>
 800c0b4:	f7f4 fd70 	bl	8000b98 <__aeabi_d2iz>
 800c0b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c0bc:	f849 0b04 	str.w	r0, [r9], #4
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	f7f4 f902 	bl	80002cc <__adddf3>
 800c0c8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0d0:	e75d      	b.n	800bf8e <__kernel_rem_pio2+0x10e>
 800c0d2:	d107      	bne.n	800c0e4 <__kernel_rem_pio2+0x264>
 800c0d4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800c0d8:	aa0c      	add	r2, sp, #48	@ 0x30
 800c0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0de:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c0e2:	e79e      	b.n	800c022 <__kernel_rem_pio2+0x1a2>
 800c0e4:	4b2f      	ldr	r3, [pc, #188]	@ (800c1a4 <__kernel_rem_pio2+0x324>)
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f7f4 fd2c 	bl	8000b44 <__aeabi_dcmpge>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d143      	bne.n	800c178 <__kernel_rem_pio2+0x2f8>
 800c0f0:	4681      	mov	r9, r0
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	f7f4 fd05 	bl	8000b08 <__aeabi_dcmpeq>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	f000 80bf 	beq.w	800c282 <__kernel_rem_pio2+0x402>
 800c104:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800c108:	2200      	movs	r2, #0
 800c10a:	9900      	ldr	r1, [sp, #0]
 800c10c:	428b      	cmp	r3, r1
 800c10e:	da6e      	bge.n	800c1ee <__kernel_rem_pio2+0x36e>
 800c110:	2a00      	cmp	r2, #0
 800c112:	f000 8089 	beq.w	800c228 <__kernel_rem_pio2+0x3a8>
 800c116:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c11a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c11c:	f1ab 0b18 	sub.w	fp, fp, #24
 800c120:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d0f6      	beq.n	800c116 <__kernel_rem_pio2+0x296>
 800c128:	4658      	mov	r0, fp
 800c12a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c188 <__kernel_rem_pio2+0x308>
 800c12e:	f000 fb83 	bl	800c838 <scalbn>
 800c132:	f108 0301 	add.w	r3, r8, #1
 800c136:	00da      	lsls	r2, r3, #3
 800c138:	9205      	str	r2, [sp, #20]
 800c13a:	ec55 4b10 	vmov	r4, r5, d0
 800c13e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c140:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800c19c <__kernel_rem_pio2+0x31c>
 800c144:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c148:	4646      	mov	r6, r8
 800c14a:	f04f 0a00 	mov.w	sl, #0
 800c14e:	2e00      	cmp	r6, #0
 800c150:	f280 80cf 	bge.w	800c2f2 <__kernel_rem_pio2+0x472>
 800c154:	4644      	mov	r4, r8
 800c156:	2c00      	cmp	r4, #0
 800c158:	f2c0 80fd 	blt.w	800c356 <__kernel_rem_pio2+0x4d6>
 800c15c:	4b12      	ldr	r3, [pc, #72]	@ (800c1a8 <__kernel_rem_pio2+0x328>)
 800c15e:	461f      	mov	r7, r3
 800c160:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c162:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c166:	9306      	str	r3, [sp, #24]
 800c168:	f04f 0a00 	mov.w	sl, #0
 800c16c:	f04f 0b00 	mov.w	fp, #0
 800c170:	2600      	movs	r6, #0
 800c172:	eba8 0504 	sub.w	r5, r8, r4
 800c176:	e0e2      	b.n	800c33e <__kernel_rem_pio2+0x4be>
 800c178:	f04f 0902 	mov.w	r9, #2
 800c17c:	e754      	b.n	800c028 <__kernel_rem_pio2+0x1a8>
 800c17e:	bf00      	nop
	...
 800c18c:	3ff00000 	.word	0x3ff00000
 800c190:	0800fb10 	.word	0x0800fb10
 800c194:	40200000 	.word	0x40200000
 800c198:	3ff00000 	.word	0x3ff00000
 800c19c:	3e700000 	.word	0x3e700000
 800c1a0:	41700000 	.word	0x41700000
 800c1a4:	3fe00000 	.word	0x3fe00000
 800c1a8:	0800fad0 	.word	0x0800fad0
 800c1ac:	f854 3b04 	ldr.w	r3, [r4], #4
 800c1b0:	b945      	cbnz	r5, 800c1c4 <__kernel_rem_pio2+0x344>
 800c1b2:	b123      	cbz	r3, 800c1be <__kernel_rem_pio2+0x33e>
 800c1b4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c1b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1bc:	2301      	movs	r3, #1
 800c1be:	3201      	adds	r2, #1
 800c1c0:	461d      	mov	r5, r3
 800c1c2:	e738      	b.n	800c036 <__kernel_rem_pio2+0x1b6>
 800c1c4:	1acb      	subs	r3, r1, r3
 800c1c6:	e7f7      	b.n	800c1b8 <__kernel_rem_pio2+0x338>
 800c1c8:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800c1cc:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1d2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c1d6:	a90c      	add	r1, sp, #48	@ 0x30
 800c1d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c1dc:	e739      	b.n	800c052 <__kernel_rem_pio2+0x1d2>
 800c1de:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800c1e2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c1ec:	e7f3      	b.n	800c1d6 <__kernel_rem_pio2+0x356>
 800c1ee:	a90c      	add	r1, sp, #48	@ 0x30
 800c1f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	430a      	orrs	r2, r1
 800c1f8:	e787      	b.n	800c10a <__kernel_rem_pio2+0x28a>
 800c1fa:	3401      	adds	r4, #1
 800c1fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c200:	2a00      	cmp	r2, #0
 800c202:	d0fa      	beq.n	800c1fa <__kernel_rem_pio2+0x37a>
 800c204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c206:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c20a:	eb0d 0503 	add.w	r5, sp, r3
 800c20e:	9b06      	ldr	r3, [sp, #24]
 800c210:	aa20      	add	r2, sp, #128	@ 0x80
 800c212:	4443      	add	r3, r8
 800c214:	f108 0701 	add.w	r7, r8, #1
 800c218:	3d98      	subs	r5, #152	@ 0x98
 800c21a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c21e:	4444      	add	r4, r8
 800c220:	42bc      	cmp	r4, r7
 800c222:	da04      	bge.n	800c22e <__kernel_rem_pio2+0x3ae>
 800c224:	46a0      	mov	r8, r4
 800c226:	e6a2      	b.n	800bf6e <__kernel_rem_pio2+0xee>
 800c228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c22a:	2401      	movs	r4, #1
 800c22c:	e7e6      	b.n	800c1fc <__kernel_rem_pio2+0x37c>
 800c22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c230:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c234:	f7f4 f996 	bl	8000564 <__aeabi_i2d>
 800c238:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c500 <__kernel_rem_pio2+0x680>
 800c23c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c240:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c248:	46b2      	mov	sl, r6
 800c24a:	f04f 0800 	mov.w	r8, #0
 800c24e:	9b05      	ldr	r3, [sp, #20]
 800c250:	4598      	cmp	r8, r3
 800c252:	dd05      	ble.n	800c260 <__kernel_rem_pio2+0x3e0>
 800c254:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c258:	3701      	adds	r7, #1
 800c25a:	eca5 7b02 	vstmia	r5!, {d7}
 800c25e:	e7df      	b.n	800c220 <__kernel_rem_pio2+0x3a0>
 800c260:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c264:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c268:	f7f4 f9e6 	bl	8000638 <__aeabi_dmul>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c274:	f7f4 f82a 	bl	80002cc <__adddf3>
 800c278:	f108 0801 	add.w	r8, r8, #1
 800c27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c280:	e7e5      	b.n	800c24e <__kernel_rem_pio2+0x3ce>
 800c282:	f1cb 0000 	rsb	r0, fp, #0
 800c286:	ec47 6b10 	vmov	d0, r6, r7
 800c28a:	f000 fad5 	bl	800c838 <scalbn>
 800c28e:	ec55 4b10 	vmov	r4, r5, d0
 800c292:	4b9d      	ldr	r3, [pc, #628]	@ (800c508 <__kernel_rem_pio2+0x688>)
 800c294:	2200      	movs	r2, #0
 800c296:	4620      	mov	r0, r4
 800c298:	4629      	mov	r1, r5
 800c29a:	f7f4 fc53 	bl	8000b44 <__aeabi_dcmpge>
 800c29e:	b300      	cbz	r0, 800c2e2 <__kernel_rem_pio2+0x462>
 800c2a0:	4b9a      	ldr	r3, [pc, #616]	@ (800c50c <__kernel_rem_pio2+0x68c>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	f7f4 f9c6 	bl	8000638 <__aeabi_dmul>
 800c2ac:	f7f4 fc74 	bl	8000b98 <__aeabi_d2iz>
 800c2b0:	4606      	mov	r6, r0
 800c2b2:	f7f4 f957 	bl	8000564 <__aeabi_i2d>
 800c2b6:	4b94      	ldr	r3, [pc, #592]	@ (800c508 <__kernel_rem_pio2+0x688>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f7f4 f9bd 	bl	8000638 <__aeabi_dmul>
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f7f3 ffff 	bl	80002c8 <__aeabi_dsub>
 800c2ca:	f7f4 fc65 	bl	8000b98 <__aeabi_d2iz>
 800c2ce:	ab0c      	add	r3, sp, #48	@ 0x30
 800c2d0:	f10b 0b18 	add.w	fp, fp, #24
 800c2d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c2d8:	f108 0801 	add.w	r8, r8, #1
 800c2dc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c2e0:	e722      	b.n	800c128 <__kernel_rem_pio2+0x2a8>
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	f7f4 fc57 	bl	8000b98 <__aeabi_d2iz>
 800c2ea:	ab0c      	add	r3, sp, #48	@ 0x30
 800c2ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c2f0:	e71a      	b.n	800c128 <__kernel_rem_pio2+0x2a8>
 800c2f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c2f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c2f8:	f7f4 f934 	bl	8000564 <__aeabi_i2d>
 800c2fc:	4622      	mov	r2, r4
 800c2fe:	462b      	mov	r3, r5
 800c300:	f7f4 f99a 	bl	8000638 <__aeabi_dmul>
 800c304:	4652      	mov	r2, sl
 800c306:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c30a:	465b      	mov	r3, fp
 800c30c:	4620      	mov	r0, r4
 800c30e:	4629      	mov	r1, r5
 800c310:	f7f4 f992 	bl	8000638 <__aeabi_dmul>
 800c314:	3e01      	subs	r6, #1
 800c316:	4604      	mov	r4, r0
 800c318:	460d      	mov	r5, r1
 800c31a:	e718      	b.n	800c14e <__kernel_rem_pio2+0x2ce>
 800c31c:	9906      	ldr	r1, [sp, #24]
 800c31e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c322:	9106      	str	r1, [sp, #24]
 800c324:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c328:	f7f4 f986 	bl	8000638 <__aeabi_dmul>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4650      	mov	r0, sl
 800c332:	4659      	mov	r1, fp
 800c334:	f7f3 ffca 	bl	80002cc <__adddf3>
 800c338:	3601      	adds	r6, #1
 800c33a:	4682      	mov	sl, r0
 800c33c:	468b      	mov	fp, r1
 800c33e:	9b00      	ldr	r3, [sp, #0]
 800c340:	429e      	cmp	r6, r3
 800c342:	dc01      	bgt.n	800c348 <__kernel_rem_pio2+0x4c8>
 800c344:	42b5      	cmp	r5, r6
 800c346:	dae9      	bge.n	800c31c <__kernel_rem_pio2+0x49c>
 800c348:	ab48      	add	r3, sp, #288	@ 0x120
 800c34a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c34e:	e9c5 ab00 	strd	sl, fp, [r5]
 800c352:	3c01      	subs	r4, #1
 800c354:	e6ff      	b.n	800c156 <__kernel_rem_pio2+0x2d6>
 800c356:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c358:	2b02      	cmp	r3, #2
 800c35a:	dc0b      	bgt.n	800c374 <__kernel_rem_pio2+0x4f4>
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	dc39      	bgt.n	800c3d4 <__kernel_rem_pio2+0x554>
 800c360:	d05d      	beq.n	800c41e <__kernel_rem_pio2+0x59e>
 800c362:	9b02      	ldr	r3, [sp, #8]
 800c364:	f003 0007 	and.w	r0, r3, #7
 800c368:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c36c:	ecbd 8b02 	vpop	{d8}
 800c370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c374:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c376:	2b03      	cmp	r3, #3
 800c378:	d1f3      	bne.n	800c362 <__kernel_rem_pio2+0x4e2>
 800c37a:	9b05      	ldr	r3, [sp, #20]
 800c37c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c380:	eb0d 0403 	add.w	r4, sp, r3
 800c384:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c388:	4625      	mov	r5, r4
 800c38a:	46c2      	mov	sl, r8
 800c38c:	f1ba 0f00 	cmp.w	sl, #0
 800c390:	f1a5 0508 	sub.w	r5, r5, #8
 800c394:	dc6b      	bgt.n	800c46e <__kernel_rem_pio2+0x5ee>
 800c396:	4645      	mov	r5, r8
 800c398:	2d01      	cmp	r5, #1
 800c39a:	f1a4 0408 	sub.w	r4, r4, #8
 800c39e:	f300 8087 	bgt.w	800c4b0 <__kernel_rem_pio2+0x630>
 800c3a2:	9c05      	ldr	r4, [sp, #20]
 800c3a4:	ab48      	add	r3, sp, #288	@ 0x120
 800c3a6:	441c      	add	r4, r3
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	f1b8 0f01 	cmp.w	r8, #1
 800c3b0:	f300 809c 	bgt.w	800c4ec <__kernel_rem_pio2+0x66c>
 800c3b4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c3b8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c3bc:	f1b9 0f00 	cmp.w	r9, #0
 800c3c0:	f040 80a6 	bne.w	800c510 <__kernel_rem_pio2+0x690>
 800c3c4:	9b04      	ldr	r3, [sp, #16]
 800c3c6:	e9c3 7800 	strd	r7, r8, [r3]
 800c3ca:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c3ce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c3d2:	e7c6      	b.n	800c362 <__kernel_rem_pio2+0x4e2>
 800c3d4:	9d05      	ldr	r5, [sp, #20]
 800c3d6:	ab48      	add	r3, sp, #288	@ 0x120
 800c3d8:	441d      	add	r5, r3
 800c3da:	4644      	mov	r4, r8
 800c3dc:	2000      	movs	r0, #0
 800c3de:	2100      	movs	r1, #0
 800c3e0:	2c00      	cmp	r4, #0
 800c3e2:	da35      	bge.n	800c450 <__kernel_rem_pio2+0x5d0>
 800c3e4:	f1b9 0f00 	cmp.w	r9, #0
 800c3e8:	d038      	beq.n	800c45c <__kernel_rem_pio2+0x5dc>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c3f0:	9c04      	ldr	r4, [sp, #16]
 800c3f2:	e9c4 2300 	strd	r2, r3, [r4]
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c3fe:	f7f3 ff63 	bl	80002c8 <__aeabi_dsub>
 800c402:	ad4a      	add	r5, sp, #296	@ 0x128
 800c404:	2401      	movs	r4, #1
 800c406:	45a0      	cmp	r8, r4
 800c408:	da2b      	bge.n	800c462 <__kernel_rem_pio2+0x5e2>
 800c40a:	f1b9 0f00 	cmp.w	r9, #0
 800c40e:	d002      	beq.n	800c416 <__kernel_rem_pio2+0x596>
 800c410:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c414:	4619      	mov	r1, r3
 800c416:	9b04      	ldr	r3, [sp, #16]
 800c418:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c41c:	e7a1      	b.n	800c362 <__kernel_rem_pio2+0x4e2>
 800c41e:	9c05      	ldr	r4, [sp, #20]
 800c420:	ab48      	add	r3, sp, #288	@ 0x120
 800c422:	441c      	add	r4, r3
 800c424:	2000      	movs	r0, #0
 800c426:	2100      	movs	r1, #0
 800c428:	f1b8 0f00 	cmp.w	r8, #0
 800c42c:	da09      	bge.n	800c442 <__kernel_rem_pio2+0x5c2>
 800c42e:	f1b9 0f00 	cmp.w	r9, #0
 800c432:	d002      	beq.n	800c43a <__kernel_rem_pio2+0x5ba>
 800c434:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c438:	4619      	mov	r1, r3
 800c43a:	9b04      	ldr	r3, [sp, #16]
 800c43c:	e9c3 0100 	strd	r0, r1, [r3]
 800c440:	e78f      	b.n	800c362 <__kernel_rem_pio2+0x4e2>
 800c442:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c446:	f7f3 ff41 	bl	80002cc <__adddf3>
 800c44a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c44e:	e7eb      	b.n	800c428 <__kernel_rem_pio2+0x5a8>
 800c450:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c454:	f7f3 ff3a 	bl	80002cc <__adddf3>
 800c458:	3c01      	subs	r4, #1
 800c45a:	e7c1      	b.n	800c3e0 <__kernel_rem_pio2+0x560>
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
 800c460:	e7c6      	b.n	800c3f0 <__kernel_rem_pio2+0x570>
 800c462:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c466:	f7f3 ff31 	bl	80002cc <__adddf3>
 800c46a:	3401      	adds	r4, #1
 800c46c:	e7cb      	b.n	800c406 <__kernel_rem_pio2+0x586>
 800c46e:	ed95 7b00 	vldr	d7, [r5]
 800c472:	ed8d 7b00 	vstr	d7, [sp]
 800c476:	ed95 7b02 	vldr	d7, [r5, #8]
 800c47a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c47e:	ec53 2b17 	vmov	r2, r3, d7
 800c482:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c486:	f7f3 ff21 	bl	80002cc <__adddf3>
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	4606      	mov	r6, r0
 800c490:	460f      	mov	r7, r1
 800c492:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c496:	f7f3 ff17 	bl	80002c8 <__aeabi_dsub>
 800c49a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c49e:	f7f3 ff15 	bl	80002cc <__adddf3>
 800c4a2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c4a6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c4aa:	e9c5 6700 	strd	r6, r7, [r5]
 800c4ae:	e76d      	b.n	800c38c <__kernel_rem_pio2+0x50c>
 800c4b0:	ed94 7b00 	vldr	d7, [r4]
 800c4b4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c4b8:	ec51 0b17 	vmov	r0, r1, d7
 800c4bc:	4652      	mov	r2, sl
 800c4be:	465b      	mov	r3, fp
 800c4c0:	ed8d 7b00 	vstr	d7, [sp]
 800c4c4:	f7f3 ff02 	bl	80002cc <__adddf3>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	460f      	mov	r7, r1
 800c4d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4d4:	f7f3 fef8 	bl	80002c8 <__aeabi_dsub>
 800c4d8:	4652      	mov	r2, sl
 800c4da:	465b      	mov	r3, fp
 800c4dc:	f7f3 fef6 	bl	80002cc <__adddf3>
 800c4e0:	3d01      	subs	r5, #1
 800c4e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c4e6:	e9c4 6700 	strd	r6, r7, [r4]
 800c4ea:	e755      	b.n	800c398 <__kernel_rem_pio2+0x518>
 800c4ec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c4f0:	f7f3 feec 	bl	80002cc <__adddf3>
 800c4f4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c4f8:	e758      	b.n	800c3ac <__kernel_rem_pio2+0x52c>
 800c4fa:	bf00      	nop
 800c4fc:	f3af 8000 	nop.w
	...
 800c508:	41700000 	.word	0x41700000
 800c50c:	3e700000 	.word	0x3e700000
 800c510:	9b04      	ldr	r3, [sp, #16]
 800c512:	9a04      	ldr	r2, [sp, #16]
 800c514:	601f      	str	r7, [r3, #0]
 800c516:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c51a:	605c      	str	r4, [r3, #4]
 800c51c:	609d      	str	r5, [r3, #8]
 800c51e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c522:	60d3      	str	r3, [r2, #12]
 800c524:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c528:	6110      	str	r0, [r2, #16]
 800c52a:	6153      	str	r3, [r2, #20]
 800c52c:	e719      	b.n	800c362 <__kernel_rem_pio2+0x4e2>
 800c52e:	bf00      	nop

0800c530 <__kernel_cos>:
 800c530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c534:	ec57 6b10 	vmov	r6, r7, d0
 800c538:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c53c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c540:	ed8d 1b00 	vstr	d1, [sp]
 800c544:	d206      	bcs.n	800c554 <__kernel_cos+0x24>
 800c546:	4630      	mov	r0, r6
 800c548:	4639      	mov	r1, r7
 800c54a:	f7f4 fb25 	bl	8000b98 <__aeabi_d2iz>
 800c54e:	2800      	cmp	r0, #0
 800c550:	f000 8088 	beq.w	800c664 <__kernel_cos+0x134>
 800c554:	4632      	mov	r2, r6
 800c556:	463b      	mov	r3, r7
 800c558:	4630      	mov	r0, r6
 800c55a:	4639      	mov	r1, r7
 800c55c:	f7f4 f86c 	bl	8000638 <__aeabi_dmul>
 800c560:	4b51      	ldr	r3, [pc, #324]	@ (800c6a8 <__kernel_cos+0x178>)
 800c562:	2200      	movs	r2, #0
 800c564:	4604      	mov	r4, r0
 800c566:	460d      	mov	r5, r1
 800c568:	f7f4 f866 	bl	8000638 <__aeabi_dmul>
 800c56c:	a340      	add	r3, pc, #256	@ (adr r3, 800c670 <__kernel_cos+0x140>)
 800c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c572:	4682      	mov	sl, r0
 800c574:	468b      	mov	fp, r1
 800c576:	4620      	mov	r0, r4
 800c578:	4629      	mov	r1, r5
 800c57a:	f7f4 f85d 	bl	8000638 <__aeabi_dmul>
 800c57e:	a33e      	add	r3, pc, #248	@ (adr r3, 800c678 <__kernel_cos+0x148>)
 800c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c584:	f7f3 fea2 	bl	80002cc <__adddf3>
 800c588:	4622      	mov	r2, r4
 800c58a:	462b      	mov	r3, r5
 800c58c:	f7f4 f854 	bl	8000638 <__aeabi_dmul>
 800c590:	a33b      	add	r3, pc, #236	@ (adr r3, 800c680 <__kernel_cos+0x150>)
 800c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c596:	f7f3 fe97 	bl	80002c8 <__aeabi_dsub>
 800c59a:	4622      	mov	r2, r4
 800c59c:	462b      	mov	r3, r5
 800c59e:	f7f4 f84b 	bl	8000638 <__aeabi_dmul>
 800c5a2:	a339      	add	r3, pc, #228	@ (adr r3, 800c688 <__kernel_cos+0x158>)
 800c5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a8:	f7f3 fe90 	bl	80002cc <__adddf3>
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	462b      	mov	r3, r5
 800c5b0:	f7f4 f842 	bl	8000638 <__aeabi_dmul>
 800c5b4:	a336      	add	r3, pc, #216	@ (adr r3, 800c690 <__kernel_cos+0x160>)
 800c5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ba:	f7f3 fe85 	bl	80002c8 <__aeabi_dsub>
 800c5be:	4622      	mov	r2, r4
 800c5c0:	462b      	mov	r3, r5
 800c5c2:	f7f4 f839 	bl	8000638 <__aeabi_dmul>
 800c5c6:	a334      	add	r3, pc, #208	@ (adr r3, 800c698 <__kernel_cos+0x168>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	f7f3 fe7e 	bl	80002cc <__adddf3>
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	462b      	mov	r3, r5
 800c5d4:	f7f4 f830 	bl	8000638 <__aeabi_dmul>
 800c5d8:	4622      	mov	r2, r4
 800c5da:	462b      	mov	r3, r5
 800c5dc:	f7f4 f82c 	bl	8000638 <__aeabi_dmul>
 800c5e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	460d      	mov	r5, r1
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	4639      	mov	r1, r7
 800c5ec:	f7f4 f824 	bl	8000638 <__aeabi_dmul>
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f7f3 fe66 	bl	80002c8 <__aeabi_dsub>
 800c5fc:	4b2b      	ldr	r3, [pc, #172]	@ (800c6ac <__kernel_cos+0x17c>)
 800c5fe:	4598      	cmp	r8, r3
 800c600:	4606      	mov	r6, r0
 800c602:	460f      	mov	r7, r1
 800c604:	d810      	bhi.n	800c628 <__kernel_cos+0xf8>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	4650      	mov	r0, sl
 800c60c:	4659      	mov	r1, fp
 800c60e:	f7f3 fe5b 	bl	80002c8 <__aeabi_dsub>
 800c612:	460b      	mov	r3, r1
 800c614:	4926      	ldr	r1, [pc, #152]	@ (800c6b0 <__kernel_cos+0x180>)
 800c616:	4602      	mov	r2, r0
 800c618:	2000      	movs	r0, #0
 800c61a:	f7f3 fe55 	bl	80002c8 <__aeabi_dsub>
 800c61e:	ec41 0b10 	vmov	d0, r0, r1
 800c622:	b003      	add	sp, #12
 800c624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c628:	4b22      	ldr	r3, [pc, #136]	@ (800c6b4 <__kernel_cos+0x184>)
 800c62a:	4921      	ldr	r1, [pc, #132]	@ (800c6b0 <__kernel_cos+0x180>)
 800c62c:	4598      	cmp	r8, r3
 800c62e:	bf8c      	ite	hi
 800c630:	4d21      	ldrhi	r5, [pc, #132]	@ (800c6b8 <__kernel_cos+0x188>)
 800c632:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c636:	2400      	movs	r4, #0
 800c638:	4622      	mov	r2, r4
 800c63a:	462b      	mov	r3, r5
 800c63c:	2000      	movs	r0, #0
 800c63e:	f7f3 fe43 	bl	80002c8 <__aeabi_dsub>
 800c642:	4622      	mov	r2, r4
 800c644:	4680      	mov	r8, r0
 800c646:	4689      	mov	r9, r1
 800c648:	462b      	mov	r3, r5
 800c64a:	4650      	mov	r0, sl
 800c64c:	4659      	mov	r1, fp
 800c64e:	f7f3 fe3b 	bl	80002c8 <__aeabi_dsub>
 800c652:	4632      	mov	r2, r6
 800c654:	463b      	mov	r3, r7
 800c656:	f7f3 fe37 	bl	80002c8 <__aeabi_dsub>
 800c65a:	4602      	mov	r2, r0
 800c65c:	460b      	mov	r3, r1
 800c65e:	4640      	mov	r0, r8
 800c660:	4649      	mov	r1, r9
 800c662:	e7da      	b.n	800c61a <__kernel_cos+0xea>
 800c664:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c6a0 <__kernel_cos+0x170>
 800c668:	e7db      	b.n	800c622 <__kernel_cos+0xf2>
 800c66a:	bf00      	nop
 800c66c:	f3af 8000 	nop.w
 800c670:	be8838d4 	.word	0xbe8838d4
 800c674:	bda8fae9 	.word	0xbda8fae9
 800c678:	bdb4b1c4 	.word	0xbdb4b1c4
 800c67c:	3e21ee9e 	.word	0x3e21ee9e
 800c680:	809c52ad 	.word	0x809c52ad
 800c684:	3e927e4f 	.word	0x3e927e4f
 800c688:	19cb1590 	.word	0x19cb1590
 800c68c:	3efa01a0 	.word	0x3efa01a0
 800c690:	16c15177 	.word	0x16c15177
 800c694:	3f56c16c 	.word	0x3f56c16c
 800c698:	5555554c 	.word	0x5555554c
 800c69c:	3fa55555 	.word	0x3fa55555
 800c6a0:	00000000 	.word	0x00000000
 800c6a4:	3ff00000 	.word	0x3ff00000
 800c6a8:	3fe00000 	.word	0x3fe00000
 800c6ac:	3fd33332 	.word	0x3fd33332
 800c6b0:	3ff00000 	.word	0x3ff00000
 800c6b4:	3fe90000 	.word	0x3fe90000
 800c6b8:	3fd20000 	.word	0x3fd20000
 800c6bc:	00000000 	.word	0x00000000

0800c6c0 <__kernel_sin>:
 800c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c4:	ec55 4b10 	vmov	r4, r5, d0
 800c6c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c6cc:	b085      	sub	sp, #20
 800c6ce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c6d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c6d6:	4680      	mov	r8, r0
 800c6d8:	d205      	bcs.n	800c6e6 <__kernel_sin+0x26>
 800c6da:	4620      	mov	r0, r4
 800c6dc:	4629      	mov	r1, r5
 800c6de:	f7f4 fa5b 	bl	8000b98 <__aeabi_d2iz>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d052      	beq.n	800c78c <__kernel_sin+0xcc>
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	462b      	mov	r3, r5
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	f7f3 ffa3 	bl	8000638 <__aeabi_dmul>
 800c6f2:	4682      	mov	sl, r0
 800c6f4:	468b      	mov	fp, r1
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	f7f3 ff9b 	bl	8000638 <__aeabi_dmul>
 800c702:	a342      	add	r3, pc, #264	@ (adr r3, 800c80c <__kernel_sin+0x14c>)
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	e9cd 0100 	strd	r0, r1, [sp]
 800c70c:	4650      	mov	r0, sl
 800c70e:	4659      	mov	r1, fp
 800c710:	f7f3 ff92 	bl	8000638 <__aeabi_dmul>
 800c714:	a33f      	add	r3, pc, #252	@ (adr r3, 800c814 <__kernel_sin+0x154>)
 800c716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71a:	f7f3 fdd5 	bl	80002c8 <__aeabi_dsub>
 800c71e:	4652      	mov	r2, sl
 800c720:	465b      	mov	r3, fp
 800c722:	f7f3 ff89 	bl	8000638 <__aeabi_dmul>
 800c726:	a33d      	add	r3, pc, #244	@ (adr r3, 800c81c <__kernel_sin+0x15c>)
 800c728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72c:	f7f3 fdce 	bl	80002cc <__adddf3>
 800c730:	4652      	mov	r2, sl
 800c732:	465b      	mov	r3, fp
 800c734:	f7f3 ff80 	bl	8000638 <__aeabi_dmul>
 800c738:	a33a      	add	r3, pc, #232	@ (adr r3, 800c824 <__kernel_sin+0x164>)
 800c73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73e:	f7f3 fdc3 	bl	80002c8 <__aeabi_dsub>
 800c742:	4652      	mov	r2, sl
 800c744:	465b      	mov	r3, fp
 800c746:	f7f3 ff77 	bl	8000638 <__aeabi_dmul>
 800c74a:	a338      	add	r3, pc, #224	@ (adr r3, 800c82c <__kernel_sin+0x16c>)
 800c74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c750:	f7f3 fdbc 	bl	80002cc <__adddf3>
 800c754:	4606      	mov	r6, r0
 800c756:	460f      	mov	r7, r1
 800c758:	f1b8 0f00 	cmp.w	r8, #0
 800c75c:	d11b      	bne.n	800c796 <__kernel_sin+0xd6>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	4650      	mov	r0, sl
 800c764:	4659      	mov	r1, fp
 800c766:	f7f3 ff67 	bl	8000638 <__aeabi_dmul>
 800c76a:	a325      	add	r3, pc, #148	@ (adr r3, 800c800 <__kernel_sin+0x140>)
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	f7f3 fdaa 	bl	80002c8 <__aeabi_dsub>
 800c774:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c778:	f7f3 ff5e 	bl	8000638 <__aeabi_dmul>
 800c77c:	4602      	mov	r2, r0
 800c77e:	460b      	mov	r3, r1
 800c780:	4620      	mov	r0, r4
 800c782:	4629      	mov	r1, r5
 800c784:	f7f3 fda2 	bl	80002cc <__adddf3>
 800c788:	4604      	mov	r4, r0
 800c78a:	460d      	mov	r5, r1
 800c78c:	ec45 4b10 	vmov	d0, r4, r5
 800c790:	b005      	add	sp, #20
 800c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c79a:	4b1b      	ldr	r3, [pc, #108]	@ (800c808 <__kernel_sin+0x148>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	f7f3 ff4b 	bl	8000638 <__aeabi_dmul>
 800c7a2:	4632      	mov	r2, r6
 800c7a4:	4680      	mov	r8, r0
 800c7a6:	4689      	mov	r9, r1
 800c7a8:	463b      	mov	r3, r7
 800c7aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7ae:	f7f3 ff43 	bl	8000638 <__aeabi_dmul>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	4640      	mov	r0, r8
 800c7b8:	4649      	mov	r1, r9
 800c7ba:	f7f3 fd85 	bl	80002c8 <__aeabi_dsub>
 800c7be:	4652      	mov	r2, sl
 800c7c0:	465b      	mov	r3, fp
 800c7c2:	f7f3 ff39 	bl	8000638 <__aeabi_dmul>
 800c7c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7ca:	f7f3 fd7d 	bl	80002c8 <__aeabi_dsub>
 800c7ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800c800 <__kernel_sin+0x140>)
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	460f      	mov	r7, r1
 800c7d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7dc:	f7f3 ff2c 	bl	8000638 <__aeabi_dmul>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	4639      	mov	r1, r7
 800c7e8:	f7f3 fd70 	bl	80002cc <__adddf3>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	f7f3 fd68 	bl	80002c8 <__aeabi_dsub>
 800c7f8:	e7c6      	b.n	800c788 <__kernel_sin+0xc8>
 800c7fa:	bf00      	nop
 800c7fc:	f3af 8000 	nop.w
 800c800:	55555549 	.word	0x55555549
 800c804:	3fc55555 	.word	0x3fc55555
 800c808:	3fe00000 	.word	0x3fe00000
 800c80c:	5acfd57c 	.word	0x5acfd57c
 800c810:	3de5d93a 	.word	0x3de5d93a
 800c814:	8a2b9ceb 	.word	0x8a2b9ceb
 800c818:	3e5ae5e6 	.word	0x3e5ae5e6
 800c81c:	57b1fe7d 	.word	0x57b1fe7d
 800c820:	3ec71de3 	.word	0x3ec71de3
 800c824:	19c161d5 	.word	0x19c161d5
 800c828:	3f2a01a0 	.word	0x3f2a01a0
 800c82c:	1110f8a6 	.word	0x1110f8a6
 800c830:	3f811111 	.word	0x3f811111
 800c834:	00000000 	.word	0x00000000

0800c838 <scalbn>:
 800c838:	b570      	push	{r4, r5, r6, lr}
 800c83a:	ec55 4b10 	vmov	r4, r5, d0
 800c83e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c842:	4606      	mov	r6, r0
 800c844:	462b      	mov	r3, r5
 800c846:	b991      	cbnz	r1, 800c86e <scalbn+0x36>
 800c848:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c84c:	4323      	orrs	r3, r4
 800c84e:	d03d      	beq.n	800c8cc <scalbn+0x94>
 800c850:	4b35      	ldr	r3, [pc, #212]	@ (800c928 <scalbn+0xf0>)
 800c852:	4620      	mov	r0, r4
 800c854:	4629      	mov	r1, r5
 800c856:	2200      	movs	r2, #0
 800c858:	f7f3 feee 	bl	8000638 <__aeabi_dmul>
 800c85c:	4b33      	ldr	r3, [pc, #204]	@ (800c92c <scalbn+0xf4>)
 800c85e:	429e      	cmp	r6, r3
 800c860:	4604      	mov	r4, r0
 800c862:	460d      	mov	r5, r1
 800c864:	da0f      	bge.n	800c886 <scalbn+0x4e>
 800c866:	a328      	add	r3, pc, #160	@ (adr r3, 800c908 <scalbn+0xd0>)
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	e01e      	b.n	800c8ac <scalbn+0x74>
 800c86e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c872:	4291      	cmp	r1, r2
 800c874:	d10b      	bne.n	800c88e <scalbn+0x56>
 800c876:	4622      	mov	r2, r4
 800c878:	4620      	mov	r0, r4
 800c87a:	4629      	mov	r1, r5
 800c87c:	f7f3 fd26 	bl	80002cc <__adddf3>
 800c880:	4604      	mov	r4, r0
 800c882:	460d      	mov	r5, r1
 800c884:	e022      	b.n	800c8cc <scalbn+0x94>
 800c886:	460b      	mov	r3, r1
 800c888:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c88c:	3936      	subs	r1, #54	@ 0x36
 800c88e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c892:	4296      	cmp	r6, r2
 800c894:	dd0d      	ble.n	800c8b2 <scalbn+0x7a>
 800c896:	2d00      	cmp	r5, #0
 800c898:	a11d      	add	r1, pc, #116	@ (adr r1, 800c910 <scalbn+0xd8>)
 800c89a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c89e:	da02      	bge.n	800c8a6 <scalbn+0x6e>
 800c8a0:	a11d      	add	r1, pc, #116	@ (adr r1, 800c918 <scalbn+0xe0>)
 800c8a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8a6:	a31a      	add	r3, pc, #104	@ (adr r3, 800c910 <scalbn+0xd8>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f7f3 fec4 	bl	8000638 <__aeabi_dmul>
 800c8b0:	e7e6      	b.n	800c880 <scalbn+0x48>
 800c8b2:	1872      	adds	r2, r6, r1
 800c8b4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c8b8:	428a      	cmp	r2, r1
 800c8ba:	dcec      	bgt.n	800c896 <scalbn+0x5e>
 800c8bc:	2a00      	cmp	r2, #0
 800c8be:	dd08      	ble.n	800c8d2 <scalbn+0x9a>
 800c8c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c8c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c8c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c8cc:	ec45 4b10 	vmov	d0, r4, r5
 800c8d0:	bd70      	pop	{r4, r5, r6, pc}
 800c8d2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c8d6:	da08      	bge.n	800c8ea <scalbn+0xb2>
 800c8d8:	2d00      	cmp	r5, #0
 800c8da:	a10b      	add	r1, pc, #44	@ (adr r1, 800c908 <scalbn+0xd0>)
 800c8dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8e0:	dac1      	bge.n	800c866 <scalbn+0x2e>
 800c8e2:	a10f      	add	r1, pc, #60	@ (adr r1, 800c920 <scalbn+0xe8>)
 800c8e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8e8:	e7bd      	b.n	800c866 <scalbn+0x2e>
 800c8ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c8ee:	3236      	adds	r2, #54	@ 0x36
 800c8f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c8f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c930 <scalbn+0xf8>)
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	2200      	movs	r2, #0
 800c900:	e7d4      	b.n	800c8ac <scalbn+0x74>
 800c902:	bf00      	nop
 800c904:	f3af 8000 	nop.w
 800c908:	c2f8f359 	.word	0xc2f8f359
 800c90c:	01a56e1f 	.word	0x01a56e1f
 800c910:	8800759c 	.word	0x8800759c
 800c914:	7e37e43c 	.word	0x7e37e43c
 800c918:	8800759c 	.word	0x8800759c
 800c91c:	fe37e43c 	.word	0xfe37e43c
 800c920:	c2f8f359 	.word	0xc2f8f359
 800c924:	81a56e1f 	.word	0x81a56e1f
 800c928:	43500000 	.word	0x43500000
 800c92c:	ffff3cb0 	.word	0xffff3cb0
 800c930:	3c900000 	.word	0x3c900000
 800c934:	00000000 	.word	0x00000000

0800c938 <floor>:
 800c938:	ec51 0b10 	vmov	r0, r1, d0
 800c93c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c944:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c948:	2e13      	cmp	r6, #19
 800c94a:	460c      	mov	r4, r1
 800c94c:	4605      	mov	r5, r0
 800c94e:	4680      	mov	r8, r0
 800c950:	dc34      	bgt.n	800c9bc <floor+0x84>
 800c952:	2e00      	cmp	r6, #0
 800c954:	da17      	bge.n	800c986 <floor+0x4e>
 800c956:	a332      	add	r3, pc, #200	@ (adr r3, 800ca20 <floor+0xe8>)
 800c958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95c:	f7f3 fcb6 	bl	80002cc <__adddf3>
 800c960:	2200      	movs	r2, #0
 800c962:	2300      	movs	r3, #0
 800c964:	f7f4 f8f8 	bl	8000b58 <__aeabi_dcmpgt>
 800c968:	b150      	cbz	r0, 800c980 <floor+0x48>
 800c96a:	2c00      	cmp	r4, #0
 800c96c:	da55      	bge.n	800ca1a <floor+0xe2>
 800c96e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c972:	432c      	orrs	r4, r5
 800c974:	2500      	movs	r5, #0
 800c976:	42ac      	cmp	r4, r5
 800c978:	4c2b      	ldr	r4, [pc, #172]	@ (800ca28 <floor+0xf0>)
 800c97a:	bf08      	it	eq
 800c97c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c980:	4621      	mov	r1, r4
 800c982:	4628      	mov	r0, r5
 800c984:	e023      	b.n	800c9ce <floor+0x96>
 800c986:	4f29      	ldr	r7, [pc, #164]	@ (800ca2c <floor+0xf4>)
 800c988:	4137      	asrs	r7, r6
 800c98a:	ea01 0307 	and.w	r3, r1, r7
 800c98e:	4303      	orrs	r3, r0
 800c990:	d01d      	beq.n	800c9ce <floor+0x96>
 800c992:	a323      	add	r3, pc, #140	@ (adr r3, 800ca20 <floor+0xe8>)
 800c994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c998:	f7f3 fc98 	bl	80002cc <__adddf3>
 800c99c:	2200      	movs	r2, #0
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f7f4 f8da 	bl	8000b58 <__aeabi_dcmpgt>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d0eb      	beq.n	800c980 <floor+0x48>
 800c9a8:	2c00      	cmp	r4, #0
 800c9aa:	bfbe      	ittt	lt
 800c9ac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c9b0:	4133      	asrlt	r3, r6
 800c9b2:	18e4      	addlt	r4, r4, r3
 800c9b4:	ea24 0407 	bic.w	r4, r4, r7
 800c9b8:	2500      	movs	r5, #0
 800c9ba:	e7e1      	b.n	800c980 <floor+0x48>
 800c9bc:	2e33      	cmp	r6, #51	@ 0x33
 800c9be:	dd0a      	ble.n	800c9d6 <floor+0x9e>
 800c9c0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c9c4:	d103      	bne.n	800c9ce <floor+0x96>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	f7f3 fc7f 	bl	80002cc <__adddf3>
 800c9ce:	ec41 0b10 	vmov	d0, r0, r1
 800c9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9d6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c9da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c9de:	40df      	lsrs	r7, r3
 800c9e0:	4207      	tst	r7, r0
 800c9e2:	d0f4      	beq.n	800c9ce <floor+0x96>
 800c9e4:	a30e      	add	r3, pc, #56	@ (adr r3, 800ca20 <floor+0xe8>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f3 fc6f 	bl	80002cc <__adddf3>
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	f7f4 f8b1 	bl	8000b58 <__aeabi_dcmpgt>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d0c2      	beq.n	800c980 <floor+0x48>
 800c9fa:	2c00      	cmp	r4, #0
 800c9fc:	da0a      	bge.n	800ca14 <floor+0xdc>
 800c9fe:	2e14      	cmp	r6, #20
 800ca00:	d101      	bne.n	800ca06 <floor+0xce>
 800ca02:	3401      	adds	r4, #1
 800ca04:	e006      	b.n	800ca14 <floor+0xdc>
 800ca06:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	40b3      	lsls	r3, r6
 800ca0e:	441d      	add	r5, r3
 800ca10:	4545      	cmp	r5, r8
 800ca12:	d3f6      	bcc.n	800ca02 <floor+0xca>
 800ca14:	ea25 0507 	bic.w	r5, r5, r7
 800ca18:	e7b2      	b.n	800c980 <floor+0x48>
 800ca1a:	2500      	movs	r5, #0
 800ca1c:	462c      	mov	r4, r5
 800ca1e:	e7af      	b.n	800c980 <floor+0x48>
 800ca20:	8800759c 	.word	0x8800759c
 800ca24:	7e37e43c 	.word	0x7e37e43c
 800ca28:	bff00000 	.word	0xbff00000
 800ca2c:	000fffff 	.word	0x000fffff

0800ca30 <__cvt>:
 800ca30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca34:	ec57 6b10 	vmov	r6, r7, d0
 800ca38:	2f00      	cmp	r7, #0
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	463b      	mov	r3, r7
 800ca40:	bfbb      	ittet	lt
 800ca42:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ca46:	461f      	movlt	r7, r3
 800ca48:	2300      	movge	r3, #0
 800ca4a:	232d      	movlt	r3, #45	@ 0x2d
 800ca4c:	700b      	strb	r3, [r1, #0]
 800ca4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca50:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ca54:	4691      	mov	r9, r2
 800ca56:	f023 0820 	bic.w	r8, r3, #32
 800ca5a:	bfbc      	itt	lt
 800ca5c:	4632      	movlt	r2, r6
 800ca5e:	4616      	movlt	r6, r2
 800ca60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ca64:	d005      	beq.n	800ca72 <__cvt+0x42>
 800ca66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ca6a:	d100      	bne.n	800ca6e <__cvt+0x3e>
 800ca6c:	3401      	adds	r4, #1
 800ca6e:	2102      	movs	r1, #2
 800ca70:	e000      	b.n	800ca74 <__cvt+0x44>
 800ca72:	2103      	movs	r1, #3
 800ca74:	ab03      	add	r3, sp, #12
 800ca76:	9301      	str	r3, [sp, #4]
 800ca78:	ab02      	add	r3, sp, #8
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	ec47 6b10 	vmov	d0, r6, r7
 800ca80:	4653      	mov	r3, sl
 800ca82:	4622      	mov	r2, r4
 800ca84:	f001 f83c 	bl	800db00 <_dtoa_r>
 800ca88:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ca8c:	4605      	mov	r5, r0
 800ca8e:	d119      	bne.n	800cac4 <__cvt+0x94>
 800ca90:	f019 0f01 	tst.w	r9, #1
 800ca94:	d00e      	beq.n	800cab4 <__cvt+0x84>
 800ca96:	eb00 0904 	add.w	r9, r0, r4
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	4630      	mov	r0, r6
 800caa0:	4639      	mov	r1, r7
 800caa2:	f7f4 f831 	bl	8000b08 <__aeabi_dcmpeq>
 800caa6:	b108      	cbz	r0, 800caac <__cvt+0x7c>
 800caa8:	f8cd 900c 	str.w	r9, [sp, #12]
 800caac:	2230      	movs	r2, #48	@ 0x30
 800caae:	9b03      	ldr	r3, [sp, #12]
 800cab0:	454b      	cmp	r3, r9
 800cab2:	d31e      	bcc.n	800caf2 <__cvt+0xc2>
 800cab4:	9b03      	ldr	r3, [sp, #12]
 800cab6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cab8:	1b5b      	subs	r3, r3, r5
 800caba:	4628      	mov	r0, r5
 800cabc:	6013      	str	r3, [r2, #0]
 800cabe:	b004      	add	sp, #16
 800cac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cac8:	eb00 0904 	add.w	r9, r0, r4
 800cacc:	d1e5      	bne.n	800ca9a <__cvt+0x6a>
 800cace:	7803      	ldrb	r3, [r0, #0]
 800cad0:	2b30      	cmp	r3, #48	@ 0x30
 800cad2:	d10a      	bne.n	800caea <__cvt+0xba>
 800cad4:	2200      	movs	r2, #0
 800cad6:	2300      	movs	r3, #0
 800cad8:	4630      	mov	r0, r6
 800cada:	4639      	mov	r1, r7
 800cadc:	f7f4 f814 	bl	8000b08 <__aeabi_dcmpeq>
 800cae0:	b918      	cbnz	r0, 800caea <__cvt+0xba>
 800cae2:	f1c4 0401 	rsb	r4, r4, #1
 800cae6:	f8ca 4000 	str.w	r4, [sl]
 800caea:	f8da 3000 	ldr.w	r3, [sl]
 800caee:	4499      	add	r9, r3
 800caf0:	e7d3      	b.n	800ca9a <__cvt+0x6a>
 800caf2:	1c59      	adds	r1, r3, #1
 800caf4:	9103      	str	r1, [sp, #12]
 800caf6:	701a      	strb	r2, [r3, #0]
 800caf8:	e7d9      	b.n	800caae <__cvt+0x7e>

0800cafa <__exponent>:
 800cafa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cafc:	2900      	cmp	r1, #0
 800cafe:	bfba      	itte	lt
 800cb00:	4249      	neglt	r1, r1
 800cb02:	232d      	movlt	r3, #45	@ 0x2d
 800cb04:	232b      	movge	r3, #43	@ 0x2b
 800cb06:	2909      	cmp	r1, #9
 800cb08:	7002      	strb	r2, [r0, #0]
 800cb0a:	7043      	strb	r3, [r0, #1]
 800cb0c:	dd29      	ble.n	800cb62 <__exponent+0x68>
 800cb0e:	f10d 0307 	add.w	r3, sp, #7
 800cb12:	461d      	mov	r5, r3
 800cb14:	270a      	movs	r7, #10
 800cb16:	461a      	mov	r2, r3
 800cb18:	fbb1 f6f7 	udiv	r6, r1, r7
 800cb1c:	fb07 1416 	mls	r4, r7, r6, r1
 800cb20:	3430      	adds	r4, #48	@ 0x30
 800cb22:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cb26:	460c      	mov	r4, r1
 800cb28:	2c63      	cmp	r4, #99	@ 0x63
 800cb2a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cb2e:	4631      	mov	r1, r6
 800cb30:	dcf1      	bgt.n	800cb16 <__exponent+0x1c>
 800cb32:	3130      	adds	r1, #48	@ 0x30
 800cb34:	1e94      	subs	r4, r2, #2
 800cb36:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cb3a:	1c41      	adds	r1, r0, #1
 800cb3c:	4623      	mov	r3, r4
 800cb3e:	42ab      	cmp	r3, r5
 800cb40:	d30a      	bcc.n	800cb58 <__exponent+0x5e>
 800cb42:	f10d 0309 	add.w	r3, sp, #9
 800cb46:	1a9b      	subs	r3, r3, r2
 800cb48:	42ac      	cmp	r4, r5
 800cb4a:	bf88      	it	hi
 800cb4c:	2300      	movhi	r3, #0
 800cb4e:	3302      	adds	r3, #2
 800cb50:	4403      	add	r3, r0
 800cb52:	1a18      	subs	r0, r3, r0
 800cb54:	b003      	add	sp, #12
 800cb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb58:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cb5c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cb60:	e7ed      	b.n	800cb3e <__exponent+0x44>
 800cb62:	2330      	movs	r3, #48	@ 0x30
 800cb64:	3130      	adds	r1, #48	@ 0x30
 800cb66:	7083      	strb	r3, [r0, #2]
 800cb68:	70c1      	strb	r1, [r0, #3]
 800cb6a:	1d03      	adds	r3, r0, #4
 800cb6c:	e7f1      	b.n	800cb52 <__exponent+0x58>
	...

0800cb70 <_printf_float>:
 800cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	b08d      	sub	sp, #52	@ 0x34
 800cb76:	460c      	mov	r4, r1
 800cb78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cb7c:	4616      	mov	r6, r2
 800cb7e:	461f      	mov	r7, r3
 800cb80:	4605      	mov	r5, r0
 800cb82:	f000 fec3 	bl	800d90c <_localeconv_r>
 800cb86:	6803      	ldr	r3, [r0, #0]
 800cb88:	9304      	str	r3, [sp, #16]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7f3 fb90 	bl	80002b0 <strlen>
 800cb90:	2300      	movs	r3, #0
 800cb92:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb94:	f8d8 3000 	ldr.w	r3, [r8]
 800cb98:	9005      	str	r0, [sp, #20]
 800cb9a:	3307      	adds	r3, #7
 800cb9c:	f023 0307 	bic.w	r3, r3, #7
 800cba0:	f103 0208 	add.w	r2, r3, #8
 800cba4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cba8:	f8d4 b000 	ldr.w	fp, [r4]
 800cbac:	f8c8 2000 	str.w	r2, [r8]
 800cbb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cbb8:	9307      	str	r3, [sp, #28]
 800cbba:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbbe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cbc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbc6:	4b9c      	ldr	r3, [pc, #624]	@ (800ce38 <_printf_float+0x2c8>)
 800cbc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cbcc:	f7f3 ffce 	bl	8000b6c <__aeabi_dcmpun>
 800cbd0:	bb70      	cbnz	r0, 800cc30 <_printf_float+0xc0>
 800cbd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbd6:	4b98      	ldr	r3, [pc, #608]	@ (800ce38 <_printf_float+0x2c8>)
 800cbd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cbdc:	f7f3 ffa8 	bl	8000b30 <__aeabi_dcmple>
 800cbe0:	bb30      	cbnz	r0, 800cc30 <_printf_float+0xc0>
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	4649      	mov	r1, r9
 800cbea:	f7f3 ff97 	bl	8000b1c <__aeabi_dcmplt>
 800cbee:	b110      	cbz	r0, 800cbf6 <_printf_float+0x86>
 800cbf0:	232d      	movs	r3, #45	@ 0x2d
 800cbf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbf6:	4a91      	ldr	r2, [pc, #580]	@ (800ce3c <_printf_float+0x2cc>)
 800cbf8:	4b91      	ldr	r3, [pc, #580]	@ (800ce40 <_printf_float+0x2d0>)
 800cbfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cbfe:	bf94      	ite	ls
 800cc00:	4690      	movls	r8, r2
 800cc02:	4698      	movhi	r8, r3
 800cc04:	2303      	movs	r3, #3
 800cc06:	6123      	str	r3, [r4, #16]
 800cc08:	f02b 0304 	bic.w	r3, fp, #4
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	f04f 0900 	mov.w	r9, #0
 800cc12:	9700      	str	r7, [sp, #0]
 800cc14:	4633      	mov	r3, r6
 800cc16:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cc18:	4621      	mov	r1, r4
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f000 fa84 	bl	800d128 <_printf_common>
 800cc20:	3001      	adds	r0, #1
 800cc22:	f040 808d 	bne.w	800cd40 <_printf_float+0x1d0>
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc2a:	b00d      	add	sp, #52	@ 0x34
 800cc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc30:	4642      	mov	r2, r8
 800cc32:	464b      	mov	r3, r9
 800cc34:	4640      	mov	r0, r8
 800cc36:	4649      	mov	r1, r9
 800cc38:	f7f3 ff98 	bl	8000b6c <__aeabi_dcmpun>
 800cc3c:	b140      	cbz	r0, 800cc50 <_printf_float+0xe0>
 800cc3e:	464b      	mov	r3, r9
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	bfbc      	itt	lt
 800cc44:	232d      	movlt	r3, #45	@ 0x2d
 800cc46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cc4a:	4a7e      	ldr	r2, [pc, #504]	@ (800ce44 <_printf_float+0x2d4>)
 800cc4c:	4b7e      	ldr	r3, [pc, #504]	@ (800ce48 <_printf_float+0x2d8>)
 800cc4e:	e7d4      	b.n	800cbfa <_printf_float+0x8a>
 800cc50:	6863      	ldr	r3, [r4, #4]
 800cc52:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cc56:	9206      	str	r2, [sp, #24]
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	d13b      	bne.n	800ccd4 <_printf_float+0x164>
 800cc5c:	2306      	movs	r3, #6
 800cc5e:	6063      	str	r3, [r4, #4]
 800cc60:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cc64:	2300      	movs	r3, #0
 800cc66:	6022      	str	r2, [r4, #0]
 800cc68:	9303      	str	r3, [sp, #12]
 800cc6a:	ab0a      	add	r3, sp, #40	@ 0x28
 800cc6c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cc70:	ab09      	add	r3, sp, #36	@ 0x24
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	6861      	ldr	r1, [r4, #4]
 800cc76:	ec49 8b10 	vmov	d0, r8, r9
 800cc7a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f7ff fed6 	bl	800ca30 <__cvt>
 800cc84:	9b06      	ldr	r3, [sp, #24]
 800cc86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc88:	2b47      	cmp	r3, #71	@ 0x47
 800cc8a:	4680      	mov	r8, r0
 800cc8c:	d129      	bne.n	800cce2 <_printf_float+0x172>
 800cc8e:	1cc8      	adds	r0, r1, #3
 800cc90:	db02      	blt.n	800cc98 <_printf_float+0x128>
 800cc92:	6863      	ldr	r3, [r4, #4]
 800cc94:	4299      	cmp	r1, r3
 800cc96:	dd41      	ble.n	800cd1c <_printf_float+0x1ac>
 800cc98:	f1aa 0a02 	sub.w	sl, sl, #2
 800cc9c:	fa5f fa8a 	uxtb.w	sl, sl
 800cca0:	3901      	subs	r1, #1
 800cca2:	4652      	mov	r2, sl
 800cca4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cca8:	9109      	str	r1, [sp, #36]	@ 0x24
 800ccaa:	f7ff ff26 	bl	800cafa <__exponent>
 800ccae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccb0:	1813      	adds	r3, r2, r0
 800ccb2:	2a01      	cmp	r2, #1
 800ccb4:	4681      	mov	r9, r0
 800ccb6:	6123      	str	r3, [r4, #16]
 800ccb8:	dc02      	bgt.n	800ccc0 <_printf_float+0x150>
 800ccba:	6822      	ldr	r2, [r4, #0]
 800ccbc:	07d2      	lsls	r2, r2, #31
 800ccbe:	d501      	bpl.n	800ccc4 <_printf_float+0x154>
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	6123      	str	r3, [r4, #16]
 800ccc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d0a2      	beq.n	800cc12 <_printf_float+0xa2>
 800cccc:	232d      	movs	r3, #45	@ 0x2d
 800ccce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccd2:	e79e      	b.n	800cc12 <_printf_float+0xa2>
 800ccd4:	9a06      	ldr	r2, [sp, #24]
 800ccd6:	2a47      	cmp	r2, #71	@ 0x47
 800ccd8:	d1c2      	bne.n	800cc60 <_printf_float+0xf0>
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1c0      	bne.n	800cc60 <_printf_float+0xf0>
 800ccde:	2301      	movs	r3, #1
 800cce0:	e7bd      	b.n	800cc5e <_printf_float+0xee>
 800cce2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cce6:	d9db      	bls.n	800cca0 <_printf_float+0x130>
 800cce8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ccec:	d118      	bne.n	800cd20 <_printf_float+0x1b0>
 800ccee:	2900      	cmp	r1, #0
 800ccf0:	6863      	ldr	r3, [r4, #4]
 800ccf2:	dd0b      	ble.n	800cd0c <_printf_float+0x19c>
 800ccf4:	6121      	str	r1, [r4, #16]
 800ccf6:	b913      	cbnz	r3, 800ccfe <_printf_float+0x18e>
 800ccf8:	6822      	ldr	r2, [r4, #0]
 800ccfa:	07d0      	lsls	r0, r2, #31
 800ccfc:	d502      	bpl.n	800cd04 <_printf_float+0x194>
 800ccfe:	3301      	adds	r3, #1
 800cd00:	440b      	add	r3, r1
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cd06:	f04f 0900 	mov.w	r9, #0
 800cd0a:	e7db      	b.n	800ccc4 <_printf_float+0x154>
 800cd0c:	b913      	cbnz	r3, 800cd14 <_printf_float+0x1a4>
 800cd0e:	6822      	ldr	r2, [r4, #0]
 800cd10:	07d2      	lsls	r2, r2, #31
 800cd12:	d501      	bpl.n	800cd18 <_printf_float+0x1a8>
 800cd14:	3302      	adds	r3, #2
 800cd16:	e7f4      	b.n	800cd02 <_printf_float+0x192>
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e7f2      	b.n	800cd02 <_printf_float+0x192>
 800cd1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cd20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd22:	4299      	cmp	r1, r3
 800cd24:	db05      	blt.n	800cd32 <_printf_float+0x1c2>
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	6121      	str	r1, [r4, #16]
 800cd2a:	07d8      	lsls	r0, r3, #31
 800cd2c:	d5ea      	bpl.n	800cd04 <_printf_float+0x194>
 800cd2e:	1c4b      	adds	r3, r1, #1
 800cd30:	e7e7      	b.n	800cd02 <_printf_float+0x192>
 800cd32:	2900      	cmp	r1, #0
 800cd34:	bfd4      	ite	le
 800cd36:	f1c1 0202 	rsble	r2, r1, #2
 800cd3a:	2201      	movgt	r2, #1
 800cd3c:	4413      	add	r3, r2
 800cd3e:	e7e0      	b.n	800cd02 <_printf_float+0x192>
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	055a      	lsls	r2, r3, #21
 800cd44:	d407      	bmi.n	800cd56 <_printf_float+0x1e6>
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	4642      	mov	r2, r8
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	4628      	mov	r0, r5
 800cd4e:	47b8      	blx	r7
 800cd50:	3001      	adds	r0, #1
 800cd52:	d12b      	bne.n	800cdac <_printf_float+0x23c>
 800cd54:	e767      	b.n	800cc26 <_printf_float+0xb6>
 800cd56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cd5a:	f240 80dd 	bls.w	800cf18 <_printf_float+0x3a8>
 800cd5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cd62:	2200      	movs	r2, #0
 800cd64:	2300      	movs	r3, #0
 800cd66:	f7f3 fecf 	bl	8000b08 <__aeabi_dcmpeq>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d033      	beq.n	800cdd6 <_printf_float+0x266>
 800cd6e:	4a37      	ldr	r2, [pc, #220]	@ (800ce4c <_printf_float+0x2dc>)
 800cd70:	2301      	movs	r3, #1
 800cd72:	4631      	mov	r1, r6
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b8      	blx	r7
 800cd78:	3001      	adds	r0, #1
 800cd7a:	f43f af54 	beq.w	800cc26 <_printf_float+0xb6>
 800cd7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cd82:	4543      	cmp	r3, r8
 800cd84:	db02      	blt.n	800cd8c <_printf_float+0x21c>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	07d8      	lsls	r0, r3, #31
 800cd8a:	d50f      	bpl.n	800cdac <_printf_float+0x23c>
 800cd8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd90:	4631      	mov	r1, r6
 800cd92:	4628      	mov	r0, r5
 800cd94:	47b8      	blx	r7
 800cd96:	3001      	adds	r0, #1
 800cd98:	f43f af45 	beq.w	800cc26 <_printf_float+0xb6>
 800cd9c:	f04f 0900 	mov.w	r9, #0
 800cda0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800cda4:	f104 0a1a 	add.w	sl, r4, #26
 800cda8:	45c8      	cmp	r8, r9
 800cdaa:	dc09      	bgt.n	800cdc0 <_printf_float+0x250>
 800cdac:	6823      	ldr	r3, [r4, #0]
 800cdae:	079b      	lsls	r3, r3, #30
 800cdb0:	f100 8103 	bmi.w	800cfba <_printf_float+0x44a>
 800cdb4:	68e0      	ldr	r0, [r4, #12]
 800cdb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdb8:	4298      	cmp	r0, r3
 800cdba:	bfb8      	it	lt
 800cdbc:	4618      	movlt	r0, r3
 800cdbe:	e734      	b.n	800cc2a <_printf_float+0xba>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	4652      	mov	r2, sl
 800cdc4:	4631      	mov	r1, r6
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	47b8      	blx	r7
 800cdca:	3001      	adds	r0, #1
 800cdcc:	f43f af2b 	beq.w	800cc26 <_printf_float+0xb6>
 800cdd0:	f109 0901 	add.w	r9, r9, #1
 800cdd4:	e7e8      	b.n	800cda8 <_printf_float+0x238>
 800cdd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	dc39      	bgt.n	800ce50 <_printf_float+0x2e0>
 800cddc:	4a1b      	ldr	r2, [pc, #108]	@ (800ce4c <_printf_float+0x2dc>)
 800cdde:	2301      	movs	r3, #1
 800cde0:	4631      	mov	r1, r6
 800cde2:	4628      	mov	r0, r5
 800cde4:	47b8      	blx	r7
 800cde6:	3001      	adds	r0, #1
 800cde8:	f43f af1d 	beq.w	800cc26 <_printf_float+0xb6>
 800cdec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cdf0:	ea59 0303 	orrs.w	r3, r9, r3
 800cdf4:	d102      	bne.n	800cdfc <_printf_float+0x28c>
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	07d9      	lsls	r1, r3, #31
 800cdfa:	d5d7      	bpl.n	800cdac <_printf_float+0x23c>
 800cdfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce00:	4631      	mov	r1, r6
 800ce02:	4628      	mov	r0, r5
 800ce04:	47b8      	blx	r7
 800ce06:	3001      	adds	r0, #1
 800ce08:	f43f af0d 	beq.w	800cc26 <_printf_float+0xb6>
 800ce0c:	f04f 0a00 	mov.w	sl, #0
 800ce10:	f104 0b1a 	add.w	fp, r4, #26
 800ce14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce16:	425b      	negs	r3, r3
 800ce18:	4553      	cmp	r3, sl
 800ce1a:	dc01      	bgt.n	800ce20 <_printf_float+0x2b0>
 800ce1c:	464b      	mov	r3, r9
 800ce1e:	e793      	b.n	800cd48 <_printf_float+0x1d8>
 800ce20:	2301      	movs	r3, #1
 800ce22:	465a      	mov	r2, fp
 800ce24:	4631      	mov	r1, r6
 800ce26:	4628      	mov	r0, r5
 800ce28:	47b8      	blx	r7
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	f43f aefb 	beq.w	800cc26 <_printf_float+0xb6>
 800ce30:	f10a 0a01 	add.w	sl, sl, #1
 800ce34:	e7ee      	b.n	800ce14 <_printf_float+0x2a4>
 800ce36:	bf00      	nop
 800ce38:	7fefffff 	.word	0x7fefffff
 800ce3c:	0800fb20 	.word	0x0800fb20
 800ce40:	0800fb24 	.word	0x0800fb24
 800ce44:	0800fb28 	.word	0x0800fb28
 800ce48:	0800fb2c 	.word	0x0800fb2c
 800ce4c:	0800fb30 	.word	0x0800fb30
 800ce50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce52:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ce56:	4553      	cmp	r3, sl
 800ce58:	bfa8      	it	ge
 800ce5a:	4653      	movge	r3, sl
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	4699      	mov	r9, r3
 800ce60:	dc36      	bgt.n	800ced0 <_printf_float+0x360>
 800ce62:	f04f 0b00 	mov.w	fp, #0
 800ce66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce6a:	f104 021a 	add.w	r2, r4, #26
 800ce6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce70:	9306      	str	r3, [sp, #24]
 800ce72:	eba3 0309 	sub.w	r3, r3, r9
 800ce76:	455b      	cmp	r3, fp
 800ce78:	dc31      	bgt.n	800cede <_printf_float+0x36e>
 800ce7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce7c:	459a      	cmp	sl, r3
 800ce7e:	dc3a      	bgt.n	800cef6 <_printf_float+0x386>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	07da      	lsls	r2, r3, #31
 800ce84:	d437      	bmi.n	800cef6 <_printf_float+0x386>
 800ce86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce88:	ebaa 0903 	sub.w	r9, sl, r3
 800ce8c:	9b06      	ldr	r3, [sp, #24]
 800ce8e:	ebaa 0303 	sub.w	r3, sl, r3
 800ce92:	4599      	cmp	r9, r3
 800ce94:	bfa8      	it	ge
 800ce96:	4699      	movge	r9, r3
 800ce98:	f1b9 0f00 	cmp.w	r9, #0
 800ce9c:	dc33      	bgt.n	800cf06 <_printf_float+0x396>
 800ce9e:	f04f 0800 	mov.w	r8, #0
 800cea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cea6:	f104 0b1a 	add.w	fp, r4, #26
 800ceaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceac:	ebaa 0303 	sub.w	r3, sl, r3
 800ceb0:	eba3 0309 	sub.w	r3, r3, r9
 800ceb4:	4543      	cmp	r3, r8
 800ceb6:	f77f af79 	ble.w	800cdac <_printf_float+0x23c>
 800ceba:	2301      	movs	r3, #1
 800cebc:	465a      	mov	r2, fp
 800cebe:	4631      	mov	r1, r6
 800cec0:	4628      	mov	r0, r5
 800cec2:	47b8      	blx	r7
 800cec4:	3001      	adds	r0, #1
 800cec6:	f43f aeae 	beq.w	800cc26 <_printf_float+0xb6>
 800ceca:	f108 0801 	add.w	r8, r8, #1
 800cece:	e7ec      	b.n	800ceaa <_printf_float+0x33a>
 800ced0:	4642      	mov	r2, r8
 800ced2:	4631      	mov	r1, r6
 800ced4:	4628      	mov	r0, r5
 800ced6:	47b8      	blx	r7
 800ced8:	3001      	adds	r0, #1
 800ceda:	d1c2      	bne.n	800ce62 <_printf_float+0x2f2>
 800cedc:	e6a3      	b.n	800cc26 <_printf_float+0xb6>
 800cede:	2301      	movs	r3, #1
 800cee0:	4631      	mov	r1, r6
 800cee2:	4628      	mov	r0, r5
 800cee4:	9206      	str	r2, [sp, #24]
 800cee6:	47b8      	blx	r7
 800cee8:	3001      	adds	r0, #1
 800ceea:	f43f ae9c 	beq.w	800cc26 <_printf_float+0xb6>
 800ceee:	9a06      	ldr	r2, [sp, #24]
 800cef0:	f10b 0b01 	add.w	fp, fp, #1
 800cef4:	e7bb      	b.n	800ce6e <_printf_float+0x2fe>
 800cef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cefa:	4631      	mov	r1, r6
 800cefc:	4628      	mov	r0, r5
 800cefe:	47b8      	blx	r7
 800cf00:	3001      	adds	r0, #1
 800cf02:	d1c0      	bne.n	800ce86 <_printf_float+0x316>
 800cf04:	e68f      	b.n	800cc26 <_printf_float+0xb6>
 800cf06:	9a06      	ldr	r2, [sp, #24]
 800cf08:	464b      	mov	r3, r9
 800cf0a:	4442      	add	r2, r8
 800cf0c:	4631      	mov	r1, r6
 800cf0e:	4628      	mov	r0, r5
 800cf10:	47b8      	blx	r7
 800cf12:	3001      	adds	r0, #1
 800cf14:	d1c3      	bne.n	800ce9e <_printf_float+0x32e>
 800cf16:	e686      	b.n	800cc26 <_printf_float+0xb6>
 800cf18:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf1c:	f1ba 0f01 	cmp.w	sl, #1
 800cf20:	dc01      	bgt.n	800cf26 <_printf_float+0x3b6>
 800cf22:	07db      	lsls	r3, r3, #31
 800cf24:	d536      	bpl.n	800cf94 <_printf_float+0x424>
 800cf26:	2301      	movs	r3, #1
 800cf28:	4642      	mov	r2, r8
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	47b8      	blx	r7
 800cf30:	3001      	adds	r0, #1
 800cf32:	f43f ae78 	beq.w	800cc26 <_printf_float+0xb6>
 800cf36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	47b8      	blx	r7
 800cf40:	3001      	adds	r0, #1
 800cf42:	f43f ae70 	beq.w	800cc26 <_printf_float+0xb6>
 800cf46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cf52:	f7f3 fdd9 	bl	8000b08 <__aeabi_dcmpeq>
 800cf56:	b9c0      	cbnz	r0, 800cf8a <_printf_float+0x41a>
 800cf58:	4653      	mov	r3, sl
 800cf5a:	f108 0201 	add.w	r2, r8, #1
 800cf5e:	4631      	mov	r1, r6
 800cf60:	4628      	mov	r0, r5
 800cf62:	47b8      	blx	r7
 800cf64:	3001      	adds	r0, #1
 800cf66:	d10c      	bne.n	800cf82 <_printf_float+0x412>
 800cf68:	e65d      	b.n	800cc26 <_printf_float+0xb6>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	465a      	mov	r2, fp
 800cf6e:	4631      	mov	r1, r6
 800cf70:	4628      	mov	r0, r5
 800cf72:	47b8      	blx	r7
 800cf74:	3001      	adds	r0, #1
 800cf76:	f43f ae56 	beq.w	800cc26 <_printf_float+0xb6>
 800cf7a:	f108 0801 	add.w	r8, r8, #1
 800cf7e:	45d0      	cmp	r8, sl
 800cf80:	dbf3      	blt.n	800cf6a <_printf_float+0x3fa>
 800cf82:	464b      	mov	r3, r9
 800cf84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cf88:	e6df      	b.n	800cd4a <_printf_float+0x1da>
 800cf8a:	f04f 0800 	mov.w	r8, #0
 800cf8e:	f104 0b1a 	add.w	fp, r4, #26
 800cf92:	e7f4      	b.n	800cf7e <_printf_float+0x40e>
 800cf94:	2301      	movs	r3, #1
 800cf96:	4642      	mov	r2, r8
 800cf98:	e7e1      	b.n	800cf5e <_printf_float+0x3ee>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	464a      	mov	r2, r9
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	47b8      	blx	r7
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	f43f ae3e 	beq.w	800cc26 <_printf_float+0xb6>
 800cfaa:	f108 0801 	add.w	r8, r8, #1
 800cfae:	68e3      	ldr	r3, [r4, #12]
 800cfb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cfb2:	1a5b      	subs	r3, r3, r1
 800cfb4:	4543      	cmp	r3, r8
 800cfb6:	dcf0      	bgt.n	800cf9a <_printf_float+0x42a>
 800cfb8:	e6fc      	b.n	800cdb4 <_printf_float+0x244>
 800cfba:	f04f 0800 	mov.w	r8, #0
 800cfbe:	f104 0919 	add.w	r9, r4, #25
 800cfc2:	e7f4      	b.n	800cfae <_printf_float+0x43e>

0800cfc4 <malloc>:
 800cfc4:	4b02      	ldr	r3, [pc, #8]	@ (800cfd0 <malloc+0xc>)
 800cfc6:	4601      	mov	r1, r0
 800cfc8:	6818      	ldr	r0, [r3, #0]
 800cfca:	f000 b82d 	b.w	800d028 <_malloc_r>
 800cfce:	bf00      	nop
 800cfd0:	2000002c 	.word	0x2000002c

0800cfd4 <free>:
 800cfd4:	4b02      	ldr	r3, [pc, #8]	@ (800cfe0 <free+0xc>)
 800cfd6:	4601      	mov	r1, r0
 800cfd8:	6818      	ldr	r0, [r3, #0]
 800cfda:	f001 bb55 	b.w	800e688 <_free_r>
 800cfde:	bf00      	nop
 800cfe0:	2000002c 	.word	0x2000002c

0800cfe4 <sbrk_aligned>:
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	4e0f      	ldr	r6, [pc, #60]	@ (800d024 <sbrk_aligned+0x40>)
 800cfe8:	460c      	mov	r4, r1
 800cfea:	6831      	ldr	r1, [r6, #0]
 800cfec:	4605      	mov	r5, r0
 800cfee:	b911      	cbnz	r1, 800cff6 <sbrk_aligned+0x12>
 800cff0:	f000 fcb2 	bl	800d958 <_sbrk_r>
 800cff4:	6030      	str	r0, [r6, #0]
 800cff6:	4621      	mov	r1, r4
 800cff8:	4628      	mov	r0, r5
 800cffa:	f000 fcad 	bl	800d958 <_sbrk_r>
 800cffe:	1c43      	adds	r3, r0, #1
 800d000:	d103      	bne.n	800d00a <sbrk_aligned+0x26>
 800d002:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d006:	4620      	mov	r0, r4
 800d008:	bd70      	pop	{r4, r5, r6, pc}
 800d00a:	1cc4      	adds	r4, r0, #3
 800d00c:	f024 0403 	bic.w	r4, r4, #3
 800d010:	42a0      	cmp	r0, r4
 800d012:	d0f8      	beq.n	800d006 <sbrk_aligned+0x22>
 800d014:	1a21      	subs	r1, r4, r0
 800d016:	4628      	mov	r0, r5
 800d018:	f000 fc9e 	bl	800d958 <_sbrk_r>
 800d01c:	3001      	adds	r0, #1
 800d01e:	d1f2      	bne.n	800d006 <sbrk_aligned+0x22>
 800d020:	e7ef      	b.n	800d002 <sbrk_aligned+0x1e>
 800d022:	bf00      	nop
 800d024:	20001004 	.word	0x20001004

0800d028 <_malloc_r>:
 800d028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d02c:	1ccd      	adds	r5, r1, #3
 800d02e:	f025 0503 	bic.w	r5, r5, #3
 800d032:	3508      	adds	r5, #8
 800d034:	2d0c      	cmp	r5, #12
 800d036:	bf38      	it	cc
 800d038:	250c      	movcc	r5, #12
 800d03a:	2d00      	cmp	r5, #0
 800d03c:	4606      	mov	r6, r0
 800d03e:	db01      	blt.n	800d044 <_malloc_r+0x1c>
 800d040:	42a9      	cmp	r1, r5
 800d042:	d904      	bls.n	800d04e <_malloc_r+0x26>
 800d044:	230c      	movs	r3, #12
 800d046:	6033      	str	r3, [r6, #0]
 800d048:	2000      	movs	r0, #0
 800d04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d04e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d124 <_malloc_r+0xfc>
 800d052:	f000 fab3 	bl	800d5bc <__malloc_lock>
 800d056:	f8d8 3000 	ldr.w	r3, [r8]
 800d05a:	461c      	mov	r4, r3
 800d05c:	bb44      	cbnz	r4, 800d0b0 <_malloc_r+0x88>
 800d05e:	4629      	mov	r1, r5
 800d060:	4630      	mov	r0, r6
 800d062:	f7ff ffbf 	bl	800cfe4 <sbrk_aligned>
 800d066:	1c43      	adds	r3, r0, #1
 800d068:	4604      	mov	r4, r0
 800d06a:	d158      	bne.n	800d11e <_malloc_r+0xf6>
 800d06c:	f8d8 4000 	ldr.w	r4, [r8]
 800d070:	4627      	mov	r7, r4
 800d072:	2f00      	cmp	r7, #0
 800d074:	d143      	bne.n	800d0fe <_malloc_r+0xd6>
 800d076:	2c00      	cmp	r4, #0
 800d078:	d04b      	beq.n	800d112 <_malloc_r+0xea>
 800d07a:	6823      	ldr	r3, [r4, #0]
 800d07c:	4639      	mov	r1, r7
 800d07e:	4630      	mov	r0, r6
 800d080:	eb04 0903 	add.w	r9, r4, r3
 800d084:	f000 fc68 	bl	800d958 <_sbrk_r>
 800d088:	4581      	cmp	r9, r0
 800d08a:	d142      	bne.n	800d112 <_malloc_r+0xea>
 800d08c:	6821      	ldr	r1, [r4, #0]
 800d08e:	1a6d      	subs	r5, r5, r1
 800d090:	4629      	mov	r1, r5
 800d092:	4630      	mov	r0, r6
 800d094:	f7ff ffa6 	bl	800cfe4 <sbrk_aligned>
 800d098:	3001      	adds	r0, #1
 800d09a:	d03a      	beq.n	800d112 <_malloc_r+0xea>
 800d09c:	6823      	ldr	r3, [r4, #0]
 800d09e:	442b      	add	r3, r5
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	f8d8 3000 	ldr.w	r3, [r8]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	bb62      	cbnz	r2, 800d104 <_malloc_r+0xdc>
 800d0aa:	f8c8 7000 	str.w	r7, [r8]
 800d0ae:	e00f      	b.n	800d0d0 <_malloc_r+0xa8>
 800d0b0:	6822      	ldr	r2, [r4, #0]
 800d0b2:	1b52      	subs	r2, r2, r5
 800d0b4:	d420      	bmi.n	800d0f8 <_malloc_r+0xd0>
 800d0b6:	2a0b      	cmp	r2, #11
 800d0b8:	d917      	bls.n	800d0ea <_malloc_r+0xc2>
 800d0ba:	1961      	adds	r1, r4, r5
 800d0bc:	42a3      	cmp	r3, r4
 800d0be:	6025      	str	r5, [r4, #0]
 800d0c0:	bf18      	it	ne
 800d0c2:	6059      	strne	r1, [r3, #4]
 800d0c4:	6863      	ldr	r3, [r4, #4]
 800d0c6:	bf08      	it	eq
 800d0c8:	f8c8 1000 	streq.w	r1, [r8]
 800d0cc:	5162      	str	r2, [r4, r5]
 800d0ce:	604b      	str	r3, [r1, #4]
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f000 fa79 	bl	800d5c8 <__malloc_unlock>
 800d0d6:	f104 000b 	add.w	r0, r4, #11
 800d0da:	1d23      	adds	r3, r4, #4
 800d0dc:	f020 0007 	bic.w	r0, r0, #7
 800d0e0:	1ac2      	subs	r2, r0, r3
 800d0e2:	bf1c      	itt	ne
 800d0e4:	1a1b      	subne	r3, r3, r0
 800d0e6:	50a3      	strne	r3, [r4, r2]
 800d0e8:	e7af      	b.n	800d04a <_malloc_r+0x22>
 800d0ea:	6862      	ldr	r2, [r4, #4]
 800d0ec:	42a3      	cmp	r3, r4
 800d0ee:	bf0c      	ite	eq
 800d0f0:	f8c8 2000 	streq.w	r2, [r8]
 800d0f4:	605a      	strne	r2, [r3, #4]
 800d0f6:	e7eb      	b.n	800d0d0 <_malloc_r+0xa8>
 800d0f8:	4623      	mov	r3, r4
 800d0fa:	6864      	ldr	r4, [r4, #4]
 800d0fc:	e7ae      	b.n	800d05c <_malloc_r+0x34>
 800d0fe:	463c      	mov	r4, r7
 800d100:	687f      	ldr	r7, [r7, #4]
 800d102:	e7b6      	b.n	800d072 <_malloc_r+0x4a>
 800d104:	461a      	mov	r2, r3
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	42a3      	cmp	r3, r4
 800d10a:	d1fb      	bne.n	800d104 <_malloc_r+0xdc>
 800d10c:	2300      	movs	r3, #0
 800d10e:	6053      	str	r3, [r2, #4]
 800d110:	e7de      	b.n	800d0d0 <_malloc_r+0xa8>
 800d112:	230c      	movs	r3, #12
 800d114:	6033      	str	r3, [r6, #0]
 800d116:	4630      	mov	r0, r6
 800d118:	f000 fa56 	bl	800d5c8 <__malloc_unlock>
 800d11c:	e794      	b.n	800d048 <_malloc_r+0x20>
 800d11e:	6005      	str	r5, [r0, #0]
 800d120:	e7d6      	b.n	800d0d0 <_malloc_r+0xa8>
 800d122:	bf00      	nop
 800d124:	20001008 	.word	0x20001008

0800d128 <_printf_common>:
 800d128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d12c:	4616      	mov	r6, r2
 800d12e:	4698      	mov	r8, r3
 800d130:	688a      	ldr	r2, [r1, #8]
 800d132:	690b      	ldr	r3, [r1, #16]
 800d134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d138:	4293      	cmp	r3, r2
 800d13a:	bfb8      	it	lt
 800d13c:	4613      	movlt	r3, r2
 800d13e:	6033      	str	r3, [r6, #0]
 800d140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d144:	4607      	mov	r7, r0
 800d146:	460c      	mov	r4, r1
 800d148:	b10a      	cbz	r2, 800d14e <_printf_common+0x26>
 800d14a:	3301      	adds	r3, #1
 800d14c:	6033      	str	r3, [r6, #0]
 800d14e:	6823      	ldr	r3, [r4, #0]
 800d150:	0699      	lsls	r1, r3, #26
 800d152:	bf42      	ittt	mi
 800d154:	6833      	ldrmi	r3, [r6, #0]
 800d156:	3302      	addmi	r3, #2
 800d158:	6033      	strmi	r3, [r6, #0]
 800d15a:	6825      	ldr	r5, [r4, #0]
 800d15c:	f015 0506 	ands.w	r5, r5, #6
 800d160:	d106      	bne.n	800d170 <_printf_common+0x48>
 800d162:	f104 0a19 	add.w	sl, r4, #25
 800d166:	68e3      	ldr	r3, [r4, #12]
 800d168:	6832      	ldr	r2, [r6, #0]
 800d16a:	1a9b      	subs	r3, r3, r2
 800d16c:	42ab      	cmp	r3, r5
 800d16e:	dc26      	bgt.n	800d1be <_printf_common+0x96>
 800d170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d174:	6822      	ldr	r2, [r4, #0]
 800d176:	3b00      	subs	r3, #0
 800d178:	bf18      	it	ne
 800d17a:	2301      	movne	r3, #1
 800d17c:	0692      	lsls	r2, r2, #26
 800d17e:	d42b      	bmi.n	800d1d8 <_printf_common+0xb0>
 800d180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d184:	4641      	mov	r1, r8
 800d186:	4638      	mov	r0, r7
 800d188:	47c8      	blx	r9
 800d18a:	3001      	adds	r0, #1
 800d18c:	d01e      	beq.n	800d1cc <_printf_common+0xa4>
 800d18e:	6823      	ldr	r3, [r4, #0]
 800d190:	6922      	ldr	r2, [r4, #16]
 800d192:	f003 0306 	and.w	r3, r3, #6
 800d196:	2b04      	cmp	r3, #4
 800d198:	bf02      	ittt	eq
 800d19a:	68e5      	ldreq	r5, [r4, #12]
 800d19c:	6833      	ldreq	r3, [r6, #0]
 800d19e:	1aed      	subeq	r5, r5, r3
 800d1a0:	68a3      	ldr	r3, [r4, #8]
 800d1a2:	bf0c      	ite	eq
 800d1a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1a8:	2500      	movne	r5, #0
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	bfc4      	itt	gt
 800d1ae:	1a9b      	subgt	r3, r3, r2
 800d1b0:	18ed      	addgt	r5, r5, r3
 800d1b2:	2600      	movs	r6, #0
 800d1b4:	341a      	adds	r4, #26
 800d1b6:	42b5      	cmp	r5, r6
 800d1b8:	d11a      	bne.n	800d1f0 <_printf_common+0xc8>
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	e008      	b.n	800d1d0 <_printf_common+0xa8>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	4652      	mov	r2, sl
 800d1c2:	4641      	mov	r1, r8
 800d1c4:	4638      	mov	r0, r7
 800d1c6:	47c8      	blx	r9
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	d103      	bne.n	800d1d4 <_printf_common+0xac>
 800d1cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d4:	3501      	adds	r5, #1
 800d1d6:	e7c6      	b.n	800d166 <_printf_common+0x3e>
 800d1d8:	18e1      	adds	r1, r4, r3
 800d1da:	1c5a      	adds	r2, r3, #1
 800d1dc:	2030      	movs	r0, #48	@ 0x30
 800d1de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d1e2:	4422      	add	r2, r4
 800d1e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d1e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d1ec:	3302      	adds	r3, #2
 800d1ee:	e7c7      	b.n	800d180 <_printf_common+0x58>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	4622      	mov	r2, r4
 800d1f4:	4641      	mov	r1, r8
 800d1f6:	4638      	mov	r0, r7
 800d1f8:	47c8      	blx	r9
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	d0e6      	beq.n	800d1cc <_printf_common+0xa4>
 800d1fe:	3601      	adds	r6, #1
 800d200:	e7d9      	b.n	800d1b6 <_printf_common+0x8e>
	...

0800d204 <_printf_i>:
 800d204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d208:	7e0f      	ldrb	r7, [r1, #24]
 800d20a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d20c:	2f78      	cmp	r7, #120	@ 0x78
 800d20e:	4691      	mov	r9, r2
 800d210:	4680      	mov	r8, r0
 800d212:	460c      	mov	r4, r1
 800d214:	469a      	mov	sl, r3
 800d216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d21a:	d807      	bhi.n	800d22c <_printf_i+0x28>
 800d21c:	2f62      	cmp	r7, #98	@ 0x62
 800d21e:	d80a      	bhi.n	800d236 <_printf_i+0x32>
 800d220:	2f00      	cmp	r7, #0
 800d222:	f000 80d2 	beq.w	800d3ca <_printf_i+0x1c6>
 800d226:	2f58      	cmp	r7, #88	@ 0x58
 800d228:	f000 80b9 	beq.w	800d39e <_printf_i+0x19a>
 800d22c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d234:	e03a      	b.n	800d2ac <_printf_i+0xa8>
 800d236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d23a:	2b15      	cmp	r3, #21
 800d23c:	d8f6      	bhi.n	800d22c <_printf_i+0x28>
 800d23e:	a101      	add	r1, pc, #4	@ (adr r1, 800d244 <_printf_i+0x40>)
 800d240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d244:	0800d29d 	.word	0x0800d29d
 800d248:	0800d2b1 	.word	0x0800d2b1
 800d24c:	0800d22d 	.word	0x0800d22d
 800d250:	0800d22d 	.word	0x0800d22d
 800d254:	0800d22d 	.word	0x0800d22d
 800d258:	0800d22d 	.word	0x0800d22d
 800d25c:	0800d2b1 	.word	0x0800d2b1
 800d260:	0800d22d 	.word	0x0800d22d
 800d264:	0800d22d 	.word	0x0800d22d
 800d268:	0800d22d 	.word	0x0800d22d
 800d26c:	0800d22d 	.word	0x0800d22d
 800d270:	0800d3b1 	.word	0x0800d3b1
 800d274:	0800d2db 	.word	0x0800d2db
 800d278:	0800d36b 	.word	0x0800d36b
 800d27c:	0800d22d 	.word	0x0800d22d
 800d280:	0800d22d 	.word	0x0800d22d
 800d284:	0800d3d3 	.word	0x0800d3d3
 800d288:	0800d22d 	.word	0x0800d22d
 800d28c:	0800d2db 	.word	0x0800d2db
 800d290:	0800d22d 	.word	0x0800d22d
 800d294:	0800d22d 	.word	0x0800d22d
 800d298:	0800d373 	.word	0x0800d373
 800d29c:	6833      	ldr	r3, [r6, #0]
 800d29e:	1d1a      	adds	r2, r3, #4
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	6032      	str	r2, [r6, #0]
 800d2a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e09d      	b.n	800d3ec <_printf_i+0x1e8>
 800d2b0:	6833      	ldr	r3, [r6, #0]
 800d2b2:	6820      	ldr	r0, [r4, #0]
 800d2b4:	1d19      	adds	r1, r3, #4
 800d2b6:	6031      	str	r1, [r6, #0]
 800d2b8:	0606      	lsls	r6, r0, #24
 800d2ba:	d501      	bpl.n	800d2c0 <_printf_i+0xbc>
 800d2bc:	681d      	ldr	r5, [r3, #0]
 800d2be:	e003      	b.n	800d2c8 <_printf_i+0xc4>
 800d2c0:	0645      	lsls	r5, r0, #25
 800d2c2:	d5fb      	bpl.n	800d2bc <_printf_i+0xb8>
 800d2c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d2c8:	2d00      	cmp	r5, #0
 800d2ca:	da03      	bge.n	800d2d4 <_printf_i+0xd0>
 800d2cc:	232d      	movs	r3, #45	@ 0x2d
 800d2ce:	426d      	negs	r5, r5
 800d2d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2d4:	4859      	ldr	r0, [pc, #356]	@ (800d43c <_printf_i+0x238>)
 800d2d6:	230a      	movs	r3, #10
 800d2d8:	e011      	b.n	800d2fe <_printf_i+0xfa>
 800d2da:	6821      	ldr	r1, [r4, #0]
 800d2dc:	6833      	ldr	r3, [r6, #0]
 800d2de:	0608      	lsls	r0, r1, #24
 800d2e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d2e4:	d402      	bmi.n	800d2ec <_printf_i+0xe8>
 800d2e6:	0649      	lsls	r1, r1, #25
 800d2e8:	bf48      	it	mi
 800d2ea:	b2ad      	uxthmi	r5, r5
 800d2ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800d2ee:	4853      	ldr	r0, [pc, #332]	@ (800d43c <_printf_i+0x238>)
 800d2f0:	6033      	str	r3, [r6, #0]
 800d2f2:	bf14      	ite	ne
 800d2f4:	230a      	movne	r3, #10
 800d2f6:	2308      	moveq	r3, #8
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d2fe:	6866      	ldr	r6, [r4, #4]
 800d300:	60a6      	str	r6, [r4, #8]
 800d302:	2e00      	cmp	r6, #0
 800d304:	bfa2      	ittt	ge
 800d306:	6821      	ldrge	r1, [r4, #0]
 800d308:	f021 0104 	bicge.w	r1, r1, #4
 800d30c:	6021      	strge	r1, [r4, #0]
 800d30e:	b90d      	cbnz	r5, 800d314 <_printf_i+0x110>
 800d310:	2e00      	cmp	r6, #0
 800d312:	d04b      	beq.n	800d3ac <_printf_i+0x1a8>
 800d314:	4616      	mov	r6, r2
 800d316:	fbb5 f1f3 	udiv	r1, r5, r3
 800d31a:	fb03 5711 	mls	r7, r3, r1, r5
 800d31e:	5dc7      	ldrb	r7, [r0, r7]
 800d320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d324:	462f      	mov	r7, r5
 800d326:	42bb      	cmp	r3, r7
 800d328:	460d      	mov	r5, r1
 800d32a:	d9f4      	bls.n	800d316 <_printf_i+0x112>
 800d32c:	2b08      	cmp	r3, #8
 800d32e:	d10b      	bne.n	800d348 <_printf_i+0x144>
 800d330:	6823      	ldr	r3, [r4, #0]
 800d332:	07df      	lsls	r7, r3, #31
 800d334:	d508      	bpl.n	800d348 <_printf_i+0x144>
 800d336:	6923      	ldr	r3, [r4, #16]
 800d338:	6861      	ldr	r1, [r4, #4]
 800d33a:	4299      	cmp	r1, r3
 800d33c:	bfde      	ittt	le
 800d33e:	2330      	movle	r3, #48	@ 0x30
 800d340:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d344:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d348:	1b92      	subs	r2, r2, r6
 800d34a:	6122      	str	r2, [r4, #16]
 800d34c:	f8cd a000 	str.w	sl, [sp]
 800d350:	464b      	mov	r3, r9
 800d352:	aa03      	add	r2, sp, #12
 800d354:	4621      	mov	r1, r4
 800d356:	4640      	mov	r0, r8
 800d358:	f7ff fee6 	bl	800d128 <_printf_common>
 800d35c:	3001      	adds	r0, #1
 800d35e:	d14a      	bne.n	800d3f6 <_printf_i+0x1f2>
 800d360:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d364:	b004      	add	sp, #16
 800d366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d36a:	6823      	ldr	r3, [r4, #0]
 800d36c:	f043 0320 	orr.w	r3, r3, #32
 800d370:	6023      	str	r3, [r4, #0]
 800d372:	4833      	ldr	r0, [pc, #204]	@ (800d440 <_printf_i+0x23c>)
 800d374:	2778      	movs	r7, #120	@ 0x78
 800d376:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d37a:	6823      	ldr	r3, [r4, #0]
 800d37c:	6831      	ldr	r1, [r6, #0]
 800d37e:	061f      	lsls	r7, r3, #24
 800d380:	f851 5b04 	ldr.w	r5, [r1], #4
 800d384:	d402      	bmi.n	800d38c <_printf_i+0x188>
 800d386:	065f      	lsls	r7, r3, #25
 800d388:	bf48      	it	mi
 800d38a:	b2ad      	uxthmi	r5, r5
 800d38c:	6031      	str	r1, [r6, #0]
 800d38e:	07d9      	lsls	r1, r3, #31
 800d390:	bf44      	itt	mi
 800d392:	f043 0320 	orrmi.w	r3, r3, #32
 800d396:	6023      	strmi	r3, [r4, #0]
 800d398:	b11d      	cbz	r5, 800d3a2 <_printf_i+0x19e>
 800d39a:	2310      	movs	r3, #16
 800d39c:	e7ac      	b.n	800d2f8 <_printf_i+0xf4>
 800d39e:	4827      	ldr	r0, [pc, #156]	@ (800d43c <_printf_i+0x238>)
 800d3a0:	e7e9      	b.n	800d376 <_printf_i+0x172>
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	f023 0320 	bic.w	r3, r3, #32
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	e7f6      	b.n	800d39a <_printf_i+0x196>
 800d3ac:	4616      	mov	r6, r2
 800d3ae:	e7bd      	b.n	800d32c <_printf_i+0x128>
 800d3b0:	6833      	ldr	r3, [r6, #0]
 800d3b2:	6825      	ldr	r5, [r4, #0]
 800d3b4:	6961      	ldr	r1, [r4, #20]
 800d3b6:	1d18      	adds	r0, r3, #4
 800d3b8:	6030      	str	r0, [r6, #0]
 800d3ba:	062e      	lsls	r6, r5, #24
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	d501      	bpl.n	800d3c4 <_printf_i+0x1c0>
 800d3c0:	6019      	str	r1, [r3, #0]
 800d3c2:	e002      	b.n	800d3ca <_printf_i+0x1c6>
 800d3c4:	0668      	lsls	r0, r5, #25
 800d3c6:	d5fb      	bpl.n	800d3c0 <_printf_i+0x1bc>
 800d3c8:	8019      	strh	r1, [r3, #0]
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	6123      	str	r3, [r4, #16]
 800d3ce:	4616      	mov	r6, r2
 800d3d0:	e7bc      	b.n	800d34c <_printf_i+0x148>
 800d3d2:	6833      	ldr	r3, [r6, #0]
 800d3d4:	1d1a      	adds	r2, r3, #4
 800d3d6:	6032      	str	r2, [r6, #0]
 800d3d8:	681e      	ldr	r6, [r3, #0]
 800d3da:	6862      	ldr	r2, [r4, #4]
 800d3dc:	2100      	movs	r1, #0
 800d3de:	4630      	mov	r0, r6
 800d3e0:	f7f2 ff16 	bl	8000210 <memchr>
 800d3e4:	b108      	cbz	r0, 800d3ea <_printf_i+0x1e6>
 800d3e6:	1b80      	subs	r0, r0, r6
 800d3e8:	6060      	str	r0, [r4, #4]
 800d3ea:	6863      	ldr	r3, [r4, #4]
 800d3ec:	6123      	str	r3, [r4, #16]
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3f4:	e7aa      	b.n	800d34c <_printf_i+0x148>
 800d3f6:	6923      	ldr	r3, [r4, #16]
 800d3f8:	4632      	mov	r2, r6
 800d3fa:	4649      	mov	r1, r9
 800d3fc:	4640      	mov	r0, r8
 800d3fe:	47d0      	blx	sl
 800d400:	3001      	adds	r0, #1
 800d402:	d0ad      	beq.n	800d360 <_printf_i+0x15c>
 800d404:	6823      	ldr	r3, [r4, #0]
 800d406:	079b      	lsls	r3, r3, #30
 800d408:	d413      	bmi.n	800d432 <_printf_i+0x22e>
 800d40a:	68e0      	ldr	r0, [r4, #12]
 800d40c:	9b03      	ldr	r3, [sp, #12]
 800d40e:	4298      	cmp	r0, r3
 800d410:	bfb8      	it	lt
 800d412:	4618      	movlt	r0, r3
 800d414:	e7a6      	b.n	800d364 <_printf_i+0x160>
 800d416:	2301      	movs	r3, #1
 800d418:	4632      	mov	r2, r6
 800d41a:	4649      	mov	r1, r9
 800d41c:	4640      	mov	r0, r8
 800d41e:	47d0      	blx	sl
 800d420:	3001      	adds	r0, #1
 800d422:	d09d      	beq.n	800d360 <_printf_i+0x15c>
 800d424:	3501      	adds	r5, #1
 800d426:	68e3      	ldr	r3, [r4, #12]
 800d428:	9903      	ldr	r1, [sp, #12]
 800d42a:	1a5b      	subs	r3, r3, r1
 800d42c:	42ab      	cmp	r3, r5
 800d42e:	dcf2      	bgt.n	800d416 <_printf_i+0x212>
 800d430:	e7eb      	b.n	800d40a <_printf_i+0x206>
 800d432:	2500      	movs	r5, #0
 800d434:	f104 0619 	add.w	r6, r4, #25
 800d438:	e7f5      	b.n	800d426 <_printf_i+0x222>
 800d43a:	bf00      	nop
 800d43c:	0800fb32 	.word	0x0800fb32
 800d440:	0800fb43 	.word	0x0800fb43

0800d444 <setbuf>:
 800d444:	fab1 f281 	clz	r2, r1
 800d448:	0952      	lsrs	r2, r2, #5
 800d44a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d44e:	0052      	lsls	r2, r2, #1
 800d450:	f000 b800 	b.w	800d454 <setvbuf>

0800d454 <setvbuf>:
 800d454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d458:	461d      	mov	r5, r3
 800d45a:	4b57      	ldr	r3, [pc, #348]	@ (800d5b8 <setvbuf+0x164>)
 800d45c:	681f      	ldr	r7, [r3, #0]
 800d45e:	4604      	mov	r4, r0
 800d460:	460e      	mov	r6, r1
 800d462:	4690      	mov	r8, r2
 800d464:	b127      	cbz	r7, 800d470 <setvbuf+0x1c>
 800d466:	6a3b      	ldr	r3, [r7, #32]
 800d468:	b913      	cbnz	r3, 800d470 <setvbuf+0x1c>
 800d46a:	4638      	mov	r0, r7
 800d46c:	f000 f93e 	bl	800d6ec <__sinit>
 800d470:	f1b8 0f02 	cmp.w	r8, #2
 800d474:	d006      	beq.n	800d484 <setvbuf+0x30>
 800d476:	f1b8 0f01 	cmp.w	r8, #1
 800d47a:	f200 809a 	bhi.w	800d5b2 <setvbuf+0x15e>
 800d47e:	2d00      	cmp	r5, #0
 800d480:	f2c0 8097 	blt.w	800d5b2 <setvbuf+0x15e>
 800d484:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d486:	07d9      	lsls	r1, r3, #31
 800d488:	d405      	bmi.n	800d496 <setvbuf+0x42>
 800d48a:	89a3      	ldrh	r3, [r4, #12]
 800d48c:	059a      	lsls	r2, r3, #22
 800d48e:	d402      	bmi.n	800d496 <setvbuf+0x42>
 800d490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d492:	f000 fa9c 	bl	800d9ce <__retarget_lock_acquire_recursive>
 800d496:	4621      	mov	r1, r4
 800d498:	4638      	mov	r0, r7
 800d49a:	f001 fb05 	bl	800eaa8 <_fflush_r>
 800d49e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4a0:	b141      	cbz	r1, 800d4b4 <setvbuf+0x60>
 800d4a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4a6:	4299      	cmp	r1, r3
 800d4a8:	d002      	beq.n	800d4b0 <setvbuf+0x5c>
 800d4aa:	4638      	mov	r0, r7
 800d4ac:	f001 f8ec 	bl	800e688 <_free_r>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	61a3      	str	r3, [r4, #24]
 800d4b8:	6063      	str	r3, [r4, #4]
 800d4ba:	89a3      	ldrh	r3, [r4, #12]
 800d4bc:	061b      	lsls	r3, r3, #24
 800d4be:	d503      	bpl.n	800d4c8 <setvbuf+0x74>
 800d4c0:	6921      	ldr	r1, [r4, #16]
 800d4c2:	4638      	mov	r0, r7
 800d4c4:	f001 f8e0 	bl	800e688 <_free_r>
 800d4c8:	89a3      	ldrh	r3, [r4, #12]
 800d4ca:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800d4ce:	f023 0303 	bic.w	r3, r3, #3
 800d4d2:	f1b8 0f02 	cmp.w	r8, #2
 800d4d6:	81a3      	strh	r3, [r4, #12]
 800d4d8:	d061      	beq.n	800d59e <setvbuf+0x14a>
 800d4da:	ab01      	add	r3, sp, #4
 800d4dc:	466a      	mov	r2, sp
 800d4de:	4621      	mov	r1, r4
 800d4e0:	4638      	mov	r0, r7
 800d4e2:	f000 f939 	bl	800d758 <__swhatbuf_r>
 800d4e6:	89a3      	ldrh	r3, [r4, #12]
 800d4e8:	4318      	orrs	r0, r3
 800d4ea:	81a0      	strh	r0, [r4, #12]
 800d4ec:	bb2d      	cbnz	r5, 800d53a <setvbuf+0xe6>
 800d4ee:	9d00      	ldr	r5, [sp, #0]
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	f7ff fd67 	bl	800cfc4 <malloc>
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d152      	bne.n	800d5a2 <setvbuf+0x14e>
 800d4fc:	f8dd 9000 	ldr.w	r9, [sp]
 800d500:	45a9      	cmp	r9, r5
 800d502:	d140      	bne.n	800d586 <setvbuf+0x132>
 800d504:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d50c:	f043 0202 	orr.w	r2, r3, #2
 800d510:	81a2      	strh	r2, [r4, #12]
 800d512:	2200      	movs	r2, #0
 800d514:	60a2      	str	r2, [r4, #8]
 800d516:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800d51a:	6022      	str	r2, [r4, #0]
 800d51c:	6122      	str	r2, [r4, #16]
 800d51e:	2201      	movs	r2, #1
 800d520:	6162      	str	r2, [r4, #20]
 800d522:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d524:	07d6      	lsls	r6, r2, #31
 800d526:	d404      	bmi.n	800d532 <setvbuf+0xde>
 800d528:	0598      	lsls	r0, r3, #22
 800d52a:	d402      	bmi.n	800d532 <setvbuf+0xde>
 800d52c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d52e:	f000 fa4f 	bl	800d9d0 <__retarget_lock_release_recursive>
 800d532:	4628      	mov	r0, r5
 800d534:	b003      	add	sp, #12
 800d536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d53a:	2e00      	cmp	r6, #0
 800d53c:	d0d8      	beq.n	800d4f0 <setvbuf+0x9c>
 800d53e:	6a3b      	ldr	r3, [r7, #32]
 800d540:	b913      	cbnz	r3, 800d548 <setvbuf+0xf4>
 800d542:	4638      	mov	r0, r7
 800d544:	f000 f8d2 	bl	800d6ec <__sinit>
 800d548:	f1b8 0f01 	cmp.w	r8, #1
 800d54c:	bf08      	it	eq
 800d54e:	89a3      	ldrheq	r3, [r4, #12]
 800d550:	6026      	str	r6, [r4, #0]
 800d552:	bf04      	itt	eq
 800d554:	f043 0301 	orreq.w	r3, r3, #1
 800d558:	81a3      	strheq	r3, [r4, #12]
 800d55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d55e:	f013 0208 	ands.w	r2, r3, #8
 800d562:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d566:	d01e      	beq.n	800d5a6 <setvbuf+0x152>
 800d568:	07d9      	lsls	r1, r3, #31
 800d56a:	bf41      	itttt	mi
 800d56c:	2200      	movmi	r2, #0
 800d56e:	426d      	negmi	r5, r5
 800d570:	60a2      	strmi	r2, [r4, #8]
 800d572:	61a5      	strmi	r5, [r4, #24]
 800d574:	bf58      	it	pl
 800d576:	60a5      	strpl	r5, [r4, #8]
 800d578:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d57a:	07d2      	lsls	r2, r2, #31
 800d57c:	d401      	bmi.n	800d582 <setvbuf+0x12e>
 800d57e:	059b      	lsls	r3, r3, #22
 800d580:	d513      	bpl.n	800d5aa <setvbuf+0x156>
 800d582:	2500      	movs	r5, #0
 800d584:	e7d5      	b.n	800d532 <setvbuf+0xde>
 800d586:	4648      	mov	r0, r9
 800d588:	f7ff fd1c 	bl	800cfc4 <malloc>
 800d58c:	4606      	mov	r6, r0
 800d58e:	2800      	cmp	r0, #0
 800d590:	d0b8      	beq.n	800d504 <setvbuf+0xb0>
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d598:	81a3      	strh	r3, [r4, #12]
 800d59a:	464d      	mov	r5, r9
 800d59c:	e7cf      	b.n	800d53e <setvbuf+0xea>
 800d59e:	2500      	movs	r5, #0
 800d5a0:	e7b2      	b.n	800d508 <setvbuf+0xb4>
 800d5a2:	46a9      	mov	r9, r5
 800d5a4:	e7f5      	b.n	800d592 <setvbuf+0x13e>
 800d5a6:	60a2      	str	r2, [r4, #8]
 800d5a8:	e7e6      	b.n	800d578 <setvbuf+0x124>
 800d5aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5ac:	f000 fa10 	bl	800d9d0 <__retarget_lock_release_recursive>
 800d5b0:	e7e7      	b.n	800d582 <setvbuf+0x12e>
 800d5b2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d5b6:	e7bc      	b.n	800d532 <setvbuf+0xde>
 800d5b8:	2000002c 	.word	0x2000002c

0800d5bc <__malloc_lock>:
 800d5bc:	4801      	ldr	r0, [pc, #4]	@ (800d5c4 <__malloc_lock+0x8>)
 800d5be:	f000 ba06 	b.w	800d9ce <__retarget_lock_acquire_recursive>
 800d5c2:	bf00      	nop
 800d5c4:	20001148 	.word	0x20001148

0800d5c8 <__malloc_unlock>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	@ (800d5d0 <__malloc_unlock+0x8>)
 800d5ca:	f000 ba01 	b.w	800d9d0 <__retarget_lock_release_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	20001148 	.word	0x20001148

0800d5d4 <std>:
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	b510      	push	{r4, lr}
 800d5d8:	4604      	mov	r4, r0
 800d5da:	e9c0 3300 	strd	r3, r3, [r0]
 800d5de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5e2:	6083      	str	r3, [r0, #8]
 800d5e4:	8181      	strh	r1, [r0, #12]
 800d5e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800d5e8:	81c2      	strh	r2, [r0, #14]
 800d5ea:	6183      	str	r3, [r0, #24]
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	2208      	movs	r2, #8
 800d5f0:	305c      	adds	r0, #92	@ 0x5c
 800d5f2:	f000 f983 	bl	800d8fc <memset>
 800d5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d62c <std+0x58>)
 800d5f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800d5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d630 <std+0x5c>)
 800d5fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d5fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d634 <std+0x60>)
 800d600:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d602:	4b0d      	ldr	r3, [pc, #52]	@ (800d638 <std+0x64>)
 800d604:	6323      	str	r3, [r4, #48]	@ 0x30
 800d606:	4b0d      	ldr	r3, [pc, #52]	@ (800d63c <std+0x68>)
 800d608:	6224      	str	r4, [r4, #32]
 800d60a:	429c      	cmp	r4, r3
 800d60c:	d006      	beq.n	800d61c <std+0x48>
 800d60e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d612:	4294      	cmp	r4, r2
 800d614:	d002      	beq.n	800d61c <std+0x48>
 800d616:	33d0      	adds	r3, #208	@ 0xd0
 800d618:	429c      	cmp	r4, r3
 800d61a:	d105      	bne.n	800d628 <std+0x54>
 800d61c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d624:	f000 b9d2 	b.w	800d9cc <__retarget_lock_init_recursive>
 800d628:	bd10      	pop	{r4, pc}
 800d62a:	bf00      	nop
 800d62c:	0800f1fd 	.word	0x0800f1fd
 800d630:	0800f21f 	.word	0x0800f21f
 800d634:	0800f257 	.word	0x0800f257
 800d638:	0800f27b 	.word	0x0800f27b
 800d63c:	2000100c 	.word	0x2000100c

0800d640 <stdio_exit_handler>:
 800d640:	4a02      	ldr	r2, [pc, #8]	@ (800d64c <stdio_exit_handler+0xc>)
 800d642:	4903      	ldr	r1, [pc, #12]	@ (800d650 <stdio_exit_handler+0x10>)
 800d644:	4803      	ldr	r0, [pc, #12]	@ (800d654 <stdio_exit_handler+0x14>)
 800d646:	f000 b869 	b.w	800d71c <_fwalk_sglue>
 800d64a:	bf00      	nop
 800d64c:	20000020 	.word	0x20000020
 800d650:	0800eaa9 	.word	0x0800eaa9
 800d654:	20000030 	.word	0x20000030

0800d658 <cleanup_stdio>:
 800d658:	6841      	ldr	r1, [r0, #4]
 800d65a:	4b0c      	ldr	r3, [pc, #48]	@ (800d68c <cleanup_stdio+0x34>)
 800d65c:	4299      	cmp	r1, r3
 800d65e:	b510      	push	{r4, lr}
 800d660:	4604      	mov	r4, r0
 800d662:	d001      	beq.n	800d668 <cleanup_stdio+0x10>
 800d664:	f001 fa20 	bl	800eaa8 <_fflush_r>
 800d668:	68a1      	ldr	r1, [r4, #8]
 800d66a:	4b09      	ldr	r3, [pc, #36]	@ (800d690 <cleanup_stdio+0x38>)
 800d66c:	4299      	cmp	r1, r3
 800d66e:	d002      	beq.n	800d676 <cleanup_stdio+0x1e>
 800d670:	4620      	mov	r0, r4
 800d672:	f001 fa19 	bl	800eaa8 <_fflush_r>
 800d676:	68e1      	ldr	r1, [r4, #12]
 800d678:	4b06      	ldr	r3, [pc, #24]	@ (800d694 <cleanup_stdio+0x3c>)
 800d67a:	4299      	cmp	r1, r3
 800d67c:	d004      	beq.n	800d688 <cleanup_stdio+0x30>
 800d67e:	4620      	mov	r0, r4
 800d680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d684:	f001 ba10 	b.w	800eaa8 <_fflush_r>
 800d688:	bd10      	pop	{r4, pc}
 800d68a:	bf00      	nop
 800d68c:	2000100c 	.word	0x2000100c
 800d690:	20001074 	.word	0x20001074
 800d694:	200010dc 	.word	0x200010dc

0800d698 <global_stdio_init.part.0>:
 800d698:	b510      	push	{r4, lr}
 800d69a:	4b0b      	ldr	r3, [pc, #44]	@ (800d6c8 <global_stdio_init.part.0+0x30>)
 800d69c:	4c0b      	ldr	r4, [pc, #44]	@ (800d6cc <global_stdio_init.part.0+0x34>)
 800d69e:	4a0c      	ldr	r2, [pc, #48]	@ (800d6d0 <global_stdio_init.part.0+0x38>)
 800d6a0:	601a      	str	r2, [r3, #0]
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2104      	movs	r1, #4
 800d6a8:	f7ff ff94 	bl	800d5d4 <std>
 800d6ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	2109      	movs	r1, #9
 800d6b4:	f7ff ff8e 	bl	800d5d4 <std>
 800d6b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d6bc:	2202      	movs	r2, #2
 800d6be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6c2:	2112      	movs	r1, #18
 800d6c4:	f7ff bf86 	b.w	800d5d4 <std>
 800d6c8:	20001144 	.word	0x20001144
 800d6cc:	2000100c 	.word	0x2000100c
 800d6d0:	0800d641 	.word	0x0800d641

0800d6d4 <__sfp_lock_acquire>:
 800d6d4:	4801      	ldr	r0, [pc, #4]	@ (800d6dc <__sfp_lock_acquire+0x8>)
 800d6d6:	f000 b97a 	b.w	800d9ce <__retarget_lock_acquire_recursive>
 800d6da:	bf00      	nop
 800d6dc:	20001149 	.word	0x20001149

0800d6e0 <__sfp_lock_release>:
 800d6e0:	4801      	ldr	r0, [pc, #4]	@ (800d6e8 <__sfp_lock_release+0x8>)
 800d6e2:	f000 b975 	b.w	800d9d0 <__retarget_lock_release_recursive>
 800d6e6:	bf00      	nop
 800d6e8:	20001149 	.word	0x20001149

0800d6ec <__sinit>:
 800d6ec:	b510      	push	{r4, lr}
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	f7ff fff0 	bl	800d6d4 <__sfp_lock_acquire>
 800d6f4:	6a23      	ldr	r3, [r4, #32]
 800d6f6:	b11b      	cbz	r3, 800d700 <__sinit+0x14>
 800d6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6fc:	f7ff bff0 	b.w	800d6e0 <__sfp_lock_release>
 800d700:	4b04      	ldr	r3, [pc, #16]	@ (800d714 <__sinit+0x28>)
 800d702:	6223      	str	r3, [r4, #32]
 800d704:	4b04      	ldr	r3, [pc, #16]	@ (800d718 <__sinit+0x2c>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1f5      	bne.n	800d6f8 <__sinit+0xc>
 800d70c:	f7ff ffc4 	bl	800d698 <global_stdio_init.part.0>
 800d710:	e7f2      	b.n	800d6f8 <__sinit+0xc>
 800d712:	bf00      	nop
 800d714:	0800d659 	.word	0x0800d659
 800d718:	20001144 	.word	0x20001144

0800d71c <_fwalk_sglue>:
 800d71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d720:	4607      	mov	r7, r0
 800d722:	4688      	mov	r8, r1
 800d724:	4614      	mov	r4, r2
 800d726:	2600      	movs	r6, #0
 800d728:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d72c:	f1b9 0901 	subs.w	r9, r9, #1
 800d730:	d505      	bpl.n	800d73e <_fwalk_sglue+0x22>
 800d732:	6824      	ldr	r4, [r4, #0]
 800d734:	2c00      	cmp	r4, #0
 800d736:	d1f7      	bne.n	800d728 <_fwalk_sglue+0xc>
 800d738:	4630      	mov	r0, r6
 800d73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d73e:	89ab      	ldrh	r3, [r5, #12]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d907      	bls.n	800d754 <_fwalk_sglue+0x38>
 800d744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d748:	3301      	adds	r3, #1
 800d74a:	d003      	beq.n	800d754 <_fwalk_sglue+0x38>
 800d74c:	4629      	mov	r1, r5
 800d74e:	4638      	mov	r0, r7
 800d750:	47c0      	blx	r8
 800d752:	4306      	orrs	r6, r0
 800d754:	3568      	adds	r5, #104	@ 0x68
 800d756:	e7e9      	b.n	800d72c <_fwalk_sglue+0x10>

0800d758 <__swhatbuf_r>:
 800d758:	b570      	push	{r4, r5, r6, lr}
 800d75a:	460c      	mov	r4, r1
 800d75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d760:	2900      	cmp	r1, #0
 800d762:	b096      	sub	sp, #88	@ 0x58
 800d764:	4615      	mov	r5, r2
 800d766:	461e      	mov	r6, r3
 800d768:	da0d      	bge.n	800d786 <__swhatbuf_r+0x2e>
 800d76a:	89a3      	ldrh	r3, [r4, #12]
 800d76c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d770:	f04f 0100 	mov.w	r1, #0
 800d774:	bf14      	ite	ne
 800d776:	2340      	movne	r3, #64	@ 0x40
 800d778:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d77c:	2000      	movs	r0, #0
 800d77e:	6031      	str	r1, [r6, #0]
 800d780:	602b      	str	r3, [r5, #0]
 800d782:	b016      	add	sp, #88	@ 0x58
 800d784:	bd70      	pop	{r4, r5, r6, pc}
 800d786:	466a      	mov	r2, sp
 800d788:	f000 f8c4 	bl	800d914 <_fstat_r>
 800d78c:	2800      	cmp	r0, #0
 800d78e:	dbec      	blt.n	800d76a <__swhatbuf_r+0x12>
 800d790:	9901      	ldr	r1, [sp, #4]
 800d792:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d796:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d79a:	4259      	negs	r1, r3
 800d79c:	4159      	adcs	r1, r3
 800d79e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7a2:	e7eb      	b.n	800d77c <__swhatbuf_r+0x24>

0800d7a4 <__smakebuf_r>:
 800d7a4:	898b      	ldrh	r3, [r1, #12]
 800d7a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7a8:	079d      	lsls	r5, r3, #30
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	460c      	mov	r4, r1
 800d7ae:	d507      	bpl.n	800d7c0 <__smakebuf_r+0x1c>
 800d7b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d7b4:	6023      	str	r3, [r4, #0]
 800d7b6:	6123      	str	r3, [r4, #16]
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	6163      	str	r3, [r4, #20]
 800d7bc:	b003      	add	sp, #12
 800d7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c0:	ab01      	add	r3, sp, #4
 800d7c2:	466a      	mov	r2, sp
 800d7c4:	f7ff ffc8 	bl	800d758 <__swhatbuf_r>
 800d7c8:	9f00      	ldr	r7, [sp, #0]
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	4639      	mov	r1, r7
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	f7ff fc2a 	bl	800d028 <_malloc_r>
 800d7d4:	b948      	cbnz	r0, 800d7ea <__smakebuf_r+0x46>
 800d7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7da:	059a      	lsls	r2, r3, #22
 800d7dc:	d4ee      	bmi.n	800d7bc <__smakebuf_r+0x18>
 800d7de:	f023 0303 	bic.w	r3, r3, #3
 800d7e2:	f043 0302 	orr.w	r3, r3, #2
 800d7e6:	81a3      	strh	r3, [r4, #12]
 800d7e8:	e7e2      	b.n	800d7b0 <__smakebuf_r+0xc>
 800d7ea:	89a3      	ldrh	r3, [r4, #12]
 800d7ec:	6020      	str	r0, [r4, #0]
 800d7ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7f2:	81a3      	strh	r3, [r4, #12]
 800d7f4:	9b01      	ldr	r3, [sp, #4]
 800d7f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d7fa:	b15b      	cbz	r3, 800d814 <__smakebuf_r+0x70>
 800d7fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d800:	4630      	mov	r0, r6
 800d802:	f000 f899 	bl	800d938 <_isatty_r>
 800d806:	b128      	cbz	r0, 800d814 <__smakebuf_r+0x70>
 800d808:	89a3      	ldrh	r3, [r4, #12]
 800d80a:	f023 0303 	bic.w	r3, r3, #3
 800d80e:	f043 0301 	orr.w	r3, r3, #1
 800d812:	81a3      	strh	r3, [r4, #12]
 800d814:	89a3      	ldrh	r3, [r4, #12]
 800d816:	431d      	orrs	r5, r3
 800d818:	81a5      	strh	r5, [r4, #12]
 800d81a:	e7cf      	b.n	800d7bc <__smakebuf_r+0x18>

0800d81c <iprintf>:
 800d81c:	b40f      	push	{r0, r1, r2, r3}
 800d81e:	b507      	push	{r0, r1, r2, lr}
 800d820:	4906      	ldr	r1, [pc, #24]	@ (800d83c <iprintf+0x20>)
 800d822:	ab04      	add	r3, sp, #16
 800d824:	6808      	ldr	r0, [r1, #0]
 800d826:	f853 2b04 	ldr.w	r2, [r3], #4
 800d82a:	6881      	ldr	r1, [r0, #8]
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	f000 ff9f 	bl	800e770 <_vfiprintf_r>
 800d832:	b003      	add	sp, #12
 800d834:	f85d eb04 	ldr.w	lr, [sp], #4
 800d838:	b004      	add	sp, #16
 800d83a:	4770      	bx	lr
 800d83c:	2000002c 	.word	0x2000002c

0800d840 <_puts_r>:
 800d840:	6a03      	ldr	r3, [r0, #32]
 800d842:	b570      	push	{r4, r5, r6, lr}
 800d844:	6884      	ldr	r4, [r0, #8]
 800d846:	4605      	mov	r5, r0
 800d848:	460e      	mov	r6, r1
 800d84a:	b90b      	cbnz	r3, 800d850 <_puts_r+0x10>
 800d84c:	f7ff ff4e 	bl	800d6ec <__sinit>
 800d850:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d852:	07db      	lsls	r3, r3, #31
 800d854:	d405      	bmi.n	800d862 <_puts_r+0x22>
 800d856:	89a3      	ldrh	r3, [r4, #12]
 800d858:	0598      	lsls	r0, r3, #22
 800d85a:	d402      	bmi.n	800d862 <_puts_r+0x22>
 800d85c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d85e:	f000 f8b6 	bl	800d9ce <__retarget_lock_acquire_recursive>
 800d862:	89a3      	ldrh	r3, [r4, #12]
 800d864:	0719      	lsls	r1, r3, #28
 800d866:	d502      	bpl.n	800d86e <_puts_r+0x2e>
 800d868:	6923      	ldr	r3, [r4, #16]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d135      	bne.n	800d8da <_puts_r+0x9a>
 800d86e:	4621      	mov	r1, r4
 800d870:	4628      	mov	r0, r5
 800d872:	f001 fd45 	bl	800f300 <__swsetup_r>
 800d876:	b380      	cbz	r0, 800d8da <_puts_r+0x9a>
 800d878:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d87c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d87e:	07da      	lsls	r2, r3, #31
 800d880:	d405      	bmi.n	800d88e <_puts_r+0x4e>
 800d882:	89a3      	ldrh	r3, [r4, #12]
 800d884:	059b      	lsls	r3, r3, #22
 800d886:	d402      	bmi.n	800d88e <_puts_r+0x4e>
 800d888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d88a:	f000 f8a1 	bl	800d9d0 <__retarget_lock_release_recursive>
 800d88e:	4628      	mov	r0, r5
 800d890:	bd70      	pop	{r4, r5, r6, pc}
 800d892:	2b00      	cmp	r3, #0
 800d894:	da04      	bge.n	800d8a0 <_puts_r+0x60>
 800d896:	69a2      	ldr	r2, [r4, #24]
 800d898:	429a      	cmp	r2, r3
 800d89a:	dc17      	bgt.n	800d8cc <_puts_r+0x8c>
 800d89c:	290a      	cmp	r1, #10
 800d89e:	d015      	beq.n	800d8cc <_puts_r+0x8c>
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	1c5a      	adds	r2, r3, #1
 800d8a4:	6022      	str	r2, [r4, #0]
 800d8a6:	7019      	strb	r1, [r3, #0]
 800d8a8:	68a3      	ldr	r3, [r4, #8]
 800d8aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	60a3      	str	r3, [r4, #8]
 800d8b2:	2900      	cmp	r1, #0
 800d8b4:	d1ed      	bne.n	800d892 <_puts_r+0x52>
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	da11      	bge.n	800d8de <_puts_r+0x9e>
 800d8ba:	4622      	mov	r2, r4
 800d8bc:	210a      	movs	r1, #10
 800d8be:	4628      	mov	r0, r5
 800d8c0:	f001 fcdf 	bl	800f282 <__swbuf_r>
 800d8c4:	3001      	adds	r0, #1
 800d8c6:	d0d7      	beq.n	800d878 <_puts_r+0x38>
 800d8c8:	250a      	movs	r5, #10
 800d8ca:	e7d7      	b.n	800d87c <_puts_r+0x3c>
 800d8cc:	4622      	mov	r2, r4
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f001 fcd7 	bl	800f282 <__swbuf_r>
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d1e7      	bne.n	800d8a8 <_puts_r+0x68>
 800d8d8:	e7ce      	b.n	800d878 <_puts_r+0x38>
 800d8da:	3e01      	subs	r6, #1
 800d8dc:	e7e4      	b.n	800d8a8 <_puts_r+0x68>
 800d8de:	6823      	ldr	r3, [r4, #0]
 800d8e0:	1c5a      	adds	r2, r3, #1
 800d8e2:	6022      	str	r2, [r4, #0]
 800d8e4:	220a      	movs	r2, #10
 800d8e6:	701a      	strb	r2, [r3, #0]
 800d8e8:	e7ee      	b.n	800d8c8 <_puts_r+0x88>
	...

0800d8ec <puts>:
 800d8ec:	4b02      	ldr	r3, [pc, #8]	@ (800d8f8 <puts+0xc>)
 800d8ee:	4601      	mov	r1, r0
 800d8f0:	6818      	ldr	r0, [r3, #0]
 800d8f2:	f7ff bfa5 	b.w	800d840 <_puts_r>
 800d8f6:	bf00      	nop
 800d8f8:	2000002c 	.word	0x2000002c

0800d8fc <memset>:
 800d8fc:	4402      	add	r2, r0
 800d8fe:	4603      	mov	r3, r0
 800d900:	4293      	cmp	r3, r2
 800d902:	d100      	bne.n	800d906 <memset+0xa>
 800d904:	4770      	bx	lr
 800d906:	f803 1b01 	strb.w	r1, [r3], #1
 800d90a:	e7f9      	b.n	800d900 <memset+0x4>

0800d90c <_localeconv_r>:
 800d90c:	4800      	ldr	r0, [pc, #0]	@ (800d910 <_localeconv_r+0x4>)
 800d90e:	4770      	bx	lr
 800d910:	2000016c 	.word	0x2000016c

0800d914 <_fstat_r>:
 800d914:	b538      	push	{r3, r4, r5, lr}
 800d916:	4d07      	ldr	r5, [pc, #28]	@ (800d934 <_fstat_r+0x20>)
 800d918:	2300      	movs	r3, #0
 800d91a:	4604      	mov	r4, r0
 800d91c:	4608      	mov	r0, r1
 800d91e:	4611      	mov	r1, r2
 800d920:	602b      	str	r3, [r5, #0]
 800d922:	f7f5 feb1 	bl	8003688 <_fstat>
 800d926:	1c43      	adds	r3, r0, #1
 800d928:	d102      	bne.n	800d930 <_fstat_r+0x1c>
 800d92a:	682b      	ldr	r3, [r5, #0]
 800d92c:	b103      	cbz	r3, 800d930 <_fstat_r+0x1c>
 800d92e:	6023      	str	r3, [r4, #0]
 800d930:	bd38      	pop	{r3, r4, r5, pc}
 800d932:	bf00      	nop
 800d934:	2000114c 	.word	0x2000114c

0800d938 <_isatty_r>:
 800d938:	b538      	push	{r3, r4, r5, lr}
 800d93a:	4d06      	ldr	r5, [pc, #24]	@ (800d954 <_isatty_r+0x1c>)
 800d93c:	2300      	movs	r3, #0
 800d93e:	4604      	mov	r4, r0
 800d940:	4608      	mov	r0, r1
 800d942:	602b      	str	r3, [r5, #0]
 800d944:	f7f5 feb0 	bl	80036a8 <_isatty>
 800d948:	1c43      	adds	r3, r0, #1
 800d94a:	d102      	bne.n	800d952 <_isatty_r+0x1a>
 800d94c:	682b      	ldr	r3, [r5, #0]
 800d94e:	b103      	cbz	r3, 800d952 <_isatty_r+0x1a>
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	bd38      	pop	{r3, r4, r5, pc}
 800d954:	2000114c 	.word	0x2000114c

0800d958 <_sbrk_r>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4d06      	ldr	r5, [pc, #24]	@ (800d974 <_sbrk_r+0x1c>)
 800d95c:	2300      	movs	r3, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	4608      	mov	r0, r1
 800d962:	602b      	str	r3, [r5, #0]
 800d964:	f7f5 feb8 	bl	80036d8 <_sbrk>
 800d968:	1c43      	adds	r3, r0, #1
 800d96a:	d102      	bne.n	800d972 <_sbrk_r+0x1a>
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	b103      	cbz	r3, 800d972 <_sbrk_r+0x1a>
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	2000114c 	.word	0x2000114c

0800d978 <__errno>:
 800d978:	4b01      	ldr	r3, [pc, #4]	@ (800d980 <__errno+0x8>)
 800d97a:	6818      	ldr	r0, [r3, #0]
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop
 800d980:	2000002c 	.word	0x2000002c

0800d984 <__libc_init_array>:
 800d984:	b570      	push	{r4, r5, r6, lr}
 800d986:	4d0d      	ldr	r5, [pc, #52]	@ (800d9bc <__libc_init_array+0x38>)
 800d988:	4c0d      	ldr	r4, [pc, #52]	@ (800d9c0 <__libc_init_array+0x3c>)
 800d98a:	1b64      	subs	r4, r4, r5
 800d98c:	10a4      	asrs	r4, r4, #2
 800d98e:	2600      	movs	r6, #0
 800d990:	42a6      	cmp	r6, r4
 800d992:	d109      	bne.n	800d9a8 <__libc_init_array+0x24>
 800d994:	4d0b      	ldr	r5, [pc, #44]	@ (800d9c4 <__libc_init_array+0x40>)
 800d996:	4c0c      	ldr	r4, [pc, #48]	@ (800d9c8 <__libc_init_array+0x44>)
 800d998:	f001 fdfc 	bl	800f594 <_init>
 800d99c:	1b64      	subs	r4, r4, r5
 800d99e:	10a4      	asrs	r4, r4, #2
 800d9a0:	2600      	movs	r6, #0
 800d9a2:	42a6      	cmp	r6, r4
 800d9a4:	d105      	bne.n	800d9b2 <__libc_init_array+0x2e>
 800d9a6:	bd70      	pop	{r4, r5, r6, pc}
 800d9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9ac:	4798      	blx	r3
 800d9ae:	3601      	adds	r6, #1
 800d9b0:	e7ee      	b.n	800d990 <__libc_init_array+0xc>
 800d9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9b6:	4798      	blx	r3
 800d9b8:	3601      	adds	r6, #1
 800d9ba:	e7f2      	b.n	800d9a2 <__libc_init_array+0x1e>
 800d9bc:	0800fe98 	.word	0x0800fe98
 800d9c0:	0800fe98 	.word	0x0800fe98
 800d9c4:	0800fe98 	.word	0x0800fe98
 800d9c8:	0800fe9c 	.word	0x0800fe9c

0800d9cc <__retarget_lock_init_recursive>:
 800d9cc:	4770      	bx	lr

0800d9ce <__retarget_lock_acquire_recursive>:
 800d9ce:	4770      	bx	lr

0800d9d0 <__retarget_lock_release_recursive>:
 800d9d0:	4770      	bx	lr

0800d9d2 <memcpy>:
 800d9d2:	440a      	add	r2, r1
 800d9d4:	4291      	cmp	r1, r2
 800d9d6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d9da:	d100      	bne.n	800d9de <memcpy+0xc>
 800d9dc:	4770      	bx	lr
 800d9de:	b510      	push	{r4, lr}
 800d9e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9e8:	4291      	cmp	r1, r2
 800d9ea:	d1f9      	bne.n	800d9e0 <memcpy+0xe>
 800d9ec:	bd10      	pop	{r4, pc}

0800d9ee <quorem>:
 800d9ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f2:	6903      	ldr	r3, [r0, #16]
 800d9f4:	690c      	ldr	r4, [r1, #16]
 800d9f6:	42a3      	cmp	r3, r4
 800d9f8:	4607      	mov	r7, r0
 800d9fa:	db7e      	blt.n	800dafa <quorem+0x10c>
 800d9fc:	3c01      	subs	r4, #1
 800d9fe:	f101 0814 	add.w	r8, r1, #20
 800da02:	00a3      	lsls	r3, r4, #2
 800da04:	f100 0514 	add.w	r5, r0, #20
 800da08:	9300      	str	r3, [sp, #0]
 800da0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da0e:	9301      	str	r3, [sp, #4]
 800da10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800da14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da18:	3301      	adds	r3, #1
 800da1a:	429a      	cmp	r2, r3
 800da1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da20:	fbb2 f6f3 	udiv	r6, r2, r3
 800da24:	d32e      	bcc.n	800da84 <quorem+0x96>
 800da26:	f04f 0a00 	mov.w	sl, #0
 800da2a:	46c4      	mov	ip, r8
 800da2c:	46ae      	mov	lr, r5
 800da2e:	46d3      	mov	fp, sl
 800da30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da34:	b298      	uxth	r0, r3
 800da36:	fb06 a000 	mla	r0, r6, r0, sl
 800da3a:	0c02      	lsrs	r2, r0, #16
 800da3c:	0c1b      	lsrs	r3, r3, #16
 800da3e:	fb06 2303 	mla	r3, r6, r3, r2
 800da42:	f8de 2000 	ldr.w	r2, [lr]
 800da46:	b280      	uxth	r0, r0
 800da48:	b292      	uxth	r2, r2
 800da4a:	1a12      	subs	r2, r2, r0
 800da4c:	445a      	add	r2, fp
 800da4e:	f8de 0000 	ldr.w	r0, [lr]
 800da52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da56:	b29b      	uxth	r3, r3
 800da58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800da5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800da60:	b292      	uxth	r2, r2
 800da62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800da66:	45e1      	cmp	r9, ip
 800da68:	f84e 2b04 	str.w	r2, [lr], #4
 800da6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800da70:	d2de      	bcs.n	800da30 <quorem+0x42>
 800da72:	9b00      	ldr	r3, [sp, #0]
 800da74:	58eb      	ldr	r3, [r5, r3]
 800da76:	b92b      	cbnz	r3, 800da84 <quorem+0x96>
 800da78:	9b01      	ldr	r3, [sp, #4]
 800da7a:	3b04      	subs	r3, #4
 800da7c:	429d      	cmp	r5, r3
 800da7e:	461a      	mov	r2, r3
 800da80:	d32f      	bcc.n	800dae2 <quorem+0xf4>
 800da82:	613c      	str	r4, [r7, #16]
 800da84:	4638      	mov	r0, r7
 800da86:	f001 fab1 	bl	800efec <__mcmp>
 800da8a:	2800      	cmp	r0, #0
 800da8c:	db25      	blt.n	800dada <quorem+0xec>
 800da8e:	4629      	mov	r1, r5
 800da90:	2000      	movs	r0, #0
 800da92:	f858 2b04 	ldr.w	r2, [r8], #4
 800da96:	f8d1 c000 	ldr.w	ip, [r1]
 800da9a:	fa1f fe82 	uxth.w	lr, r2
 800da9e:	fa1f f38c 	uxth.w	r3, ip
 800daa2:	eba3 030e 	sub.w	r3, r3, lr
 800daa6:	4403      	add	r3, r0
 800daa8:	0c12      	lsrs	r2, r2, #16
 800daaa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800daae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dab8:	45c1      	cmp	r9, r8
 800daba:	f841 3b04 	str.w	r3, [r1], #4
 800dabe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dac2:	d2e6      	bcs.n	800da92 <quorem+0xa4>
 800dac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dac8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dacc:	b922      	cbnz	r2, 800dad8 <quorem+0xea>
 800dace:	3b04      	subs	r3, #4
 800dad0:	429d      	cmp	r5, r3
 800dad2:	461a      	mov	r2, r3
 800dad4:	d30b      	bcc.n	800daee <quorem+0x100>
 800dad6:	613c      	str	r4, [r7, #16]
 800dad8:	3601      	adds	r6, #1
 800dada:	4630      	mov	r0, r6
 800dadc:	b003      	add	sp, #12
 800dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae2:	6812      	ldr	r2, [r2, #0]
 800dae4:	3b04      	subs	r3, #4
 800dae6:	2a00      	cmp	r2, #0
 800dae8:	d1cb      	bne.n	800da82 <quorem+0x94>
 800daea:	3c01      	subs	r4, #1
 800daec:	e7c6      	b.n	800da7c <quorem+0x8e>
 800daee:	6812      	ldr	r2, [r2, #0]
 800daf0:	3b04      	subs	r3, #4
 800daf2:	2a00      	cmp	r2, #0
 800daf4:	d1ef      	bne.n	800dad6 <quorem+0xe8>
 800daf6:	3c01      	subs	r4, #1
 800daf8:	e7ea      	b.n	800dad0 <quorem+0xe2>
 800dafa:	2000      	movs	r0, #0
 800dafc:	e7ee      	b.n	800dadc <quorem+0xee>
	...

0800db00 <_dtoa_r>:
 800db00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db04:	69c7      	ldr	r7, [r0, #28]
 800db06:	b099      	sub	sp, #100	@ 0x64
 800db08:	ed8d 0b02 	vstr	d0, [sp, #8]
 800db0c:	ec55 4b10 	vmov	r4, r5, d0
 800db10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800db12:	9109      	str	r1, [sp, #36]	@ 0x24
 800db14:	4683      	mov	fp, r0
 800db16:	920e      	str	r2, [sp, #56]	@ 0x38
 800db18:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db1a:	b97f      	cbnz	r7, 800db3c <_dtoa_r+0x3c>
 800db1c:	2010      	movs	r0, #16
 800db1e:	f7ff fa51 	bl	800cfc4 <malloc>
 800db22:	4602      	mov	r2, r0
 800db24:	f8cb 001c 	str.w	r0, [fp, #28]
 800db28:	b920      	cbnz	r0, 800db34 <_dtoa_r+0x34>
 800db2a:	4ba7      	ldr	r3, [pc, #668]	@ (800ddc8 <_dtoa_r+0x2c8>)
 800db2c:	21ef      	movs	r1, #239	@ 0xef
 800db2e:	48a7      	ldr	r0, [pc, #668]	@ (800ddcc <_dtoa_r+0x2cc>)
 800db30:	f001 fc82 	bl	800f438 <__assert_func>
 800db34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800db38:	6007      	str	r7, [r0, #0]
 800db3a:	60c7      	str	r7, [r0, #12]
 800db3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800db40:	6819      	ldr	r1, [r3, #0]
 800db42:	b159      	cbz	r1, 800db5c <_dtoa_r+0x5c>
 800db44:	685a      	ldr	r2, [r3, #4]
 800db46:	604a      	str	r2, [r1, #4]
 800db48:	2301      	movs	r3, #1
 800db4a:	4093      	lsls	r3, r2
 800db4c:	608b      	str	r3, [r1, #8]
 800db4e:	4658      	mov	r0, fp
 800db50:	f001 f812 	bl	800eb78 <_Bfree>
 800db54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800db58:	2200      	movs	r2, #0
 800db5a:	601a      	str	r2, [r3, #0]
 800db5c:	1e2b      	subs	r3, r5, #0
 800db5e:	bfb9      	ittee	lt
 800db60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800db64:	9303      	strlt	r3, [sp, #12]
 800db66:	2300      	movge	r3, #0
 800db68:	6033      	strge	r3, [r6, #0]
 800db6a:	9f03      	ldr	r7, [sp, #12]
 800db6c:	4b98      	ldr	r3, [pc, #608]	@ (800ddd0 <_dtoa_r+0x2d0>)
 800db6e:	bfbc      	itt	lt
 800db70:	2201      	movlt	r2, #1
 800db72:	6032      	strlt	r2, [r6, #0]
 800db74:	43bb      	bics	r3, r7
 800db76:	d112      	bne.n	800db9e <_dtoa_r+0x9e>
 800db78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800db7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800db7e:	6013      	str	r3, [r2, #0]
 800db80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db84:	4323      	orrs	r3, r4
 800db86:	f000 854d 	beq.w	800e624 <_dtoa_r+0xb24>
 800db8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dde4 <_dtoa_r+0x2e4>
 800db90:	2b00      	cmp	r3, #0
 800db92:	f000 854f 	beq.w	800e634 <_dtoa_r+0xb34>
 800db96:	f10a 0303 	add.w	r3, sl, #3
 800db9a:	f000 bd49 	b.w	800e630 <_dtoa_r+0xb30>
 800db9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dba2:	2200      	movs	r2, #0
 800dba4:	ec51 0b17 	vmov	r0, r1, d7
 800dba8:	2300      	movs	r3, #0
 800dbaa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dbae:	f7f2 ffab 	bl	8000b08 <__aeabi_dcmpeq>
 800dbb2:	4680      	mov	r8, r0
 800dbb4:	b158      	cbz	r0, 800dbce <_dtoa_r+0xce>
 800dbb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dbb8:	2301      	movs	r3, #1
 800dbba:	6013      	str	r3, [r2, #0]
 800dbbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dbbe:	b113      	cbz	r3, 800dbc6 <_dtoa_r+0xc6>
 800dbc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dbc2:	4b84      	ldr	r3, [pc, #528]	@ (800ddd4 <_dtoa_r+0x2d4>)
 800dbc4:	6013      	str	r3, [r2, #0]
 800dbc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dde8 <_dtoa_r+0x2e8>
 800dbca:	f000 bd33 	b.w	800e634 <_dtoa_r+0xb34>
 800dbce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dbd2:	aa16      	add	r2, sp, #88	@ 0x58
 800dbd4:	a917      	add	r1, sp, #92	@ 0x5c
 800dbd6:	4658      	mov	r0, fp
 800dbd8:	f001 fab8 	bl	800f14c <__d2b>
 800dbdc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dbe0:	4681      	mov	r9, r0
 800dbe2:	2e00      	cmp	r6, #0
 800dbe4:	d077      	beq.n	800dcd6 <_dtoa_r+0x1d6>
 800dbe6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dbe8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dbec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dbf4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dbf8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dbfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dc00:	4619      	mov	r1, r3
 800dc02:	2200      	movs	r2, #0
 800dc04:	4b74      	ldr	r3, [pc, #464]	@ (800ddd8 <_dtoa_r+0x2d8>)
 800dc06:	f7f2 fb5f 	bl	80002c8 <__aeabi_dsub>
 800dc0a:	a369      	add	r3, pc, #420	@ (adr r3, 800ddb0 <_dtoa_r+0x2b0>)
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	f7f2 fd12 	bl	8000638 <__aeabi_dmul>
 800dc14:	a368      	add	r3, pc, #416	@ (adr r3, 800ddb8 <_dtoa_r+0x2b8>)
 800dc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1a:	f7f2 fb57 	bl	80002cc <__adddf3>
 800dc1e:	4604      	mov	r4, r0
 800dc20:	4630      	mov	r0, r6
 800dc22:	460d      	mov	r5, r1
 800dc24:	f7f2 fc9e 	bl	8000564 <__aeabi_i2d>
 800dc28:	a365      	add	r3, pc, #404	@ (adr r3, 800ddc0 <_dtoa_r+0x2c0>)
 800dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2e:	f7f2 fd03 	bl	8000638 <__aeabi_dmul>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4620      	mov	r0, r4
 800dc38:	4629      	mov	r1, r5
 800dc3a:	f7f2 fb47 	bl	80002cc <__adddf3>
 800dc3e:	4604      	mov	r4, r0
 800dc40:	460d      	mov	r5, r1
 800dc42:	f7f2 ffa9 	bl	8000b98 <__aeabi_d2iz>
 800dc46:	2200      	movs	r2, #0
 800dc48:	4607      	mov	r7, r0
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	4629      	mov	r1, r5
 800dc50:	f7f2 ff64 	bl	8000b1c <__aeabi_dcmplt>
 800dc54:	b140      	cbz	r0, 800dc68 <_dtoa_r+0x168>
 800dc56:	4638      	mov	r0, r7
 800dc58:	f7f2 fc84 	bl	8000564 <__aeabi_i2d>
 800dc5c:	4622      	mov	r2, r4
 800dc5e:	462b      	mov	r3, r5
 800dc60:	f7f2 ff52 	bl	8000b08 <__aeabi_dcmpeq>
 800dc64:	b900      	cbnz	r0, 800dc68 <_dtoa_r+0x168>
 800dc66:	3f01      	subs	r7, #1
 800dc68:	2f16      	cmp	r7, #22
 800dc6a:	d851      	bhi.n	800dd10 <_dtoa_r+0x210>
 800dc6c:	4b5b      	ldr	r3, [pc, #364]	@ (800dddc <_dtoa_r+0x2dc>)
 800dc6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc7a:	f7f2 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	d048      	beq.n	800dd14 <_dtoa_r+0x214>
 800dc82:	3f01      	subs	r7, #1
 800dc84:	2300      	movs	r3, #0
 800dc86:	9312      	str	r3, [sp, #72]	@ 0x48
 800dc88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dc8a:	1b9b      	subs	r3, r3, r6
 800dc8c:	1e5a      	subs	r2, r3, #1
 800dc8e:	bf44      	itt	mi
 800dc90:	f1c3 0801 	rsbmi	r8, r3, #1
 800dc94:	2300      	movmi	r3, #0
 800dc96:	9208      	str	r2, [sp, #32]
 800dc98:	bf54      	ite	pl
 800dc9a:	f04f 0800 	movpl.w	r8, #0
 800dc9e:	9308      	strmi	r3, [sp, #32]
 800dca0:	2f00      	cmp	r7, #0
 800dca2:	db39      	blt.n	800dd18 <_dtoa_r+0x218>
 800dca4:	9b08      	ldr	r3, [sp, #32]
 800dca6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800dca8:	443b      	add	r3, r7
 800dcaa:	9308      	str	r3, [sp, #32]
 800dcac:	2300      	movs	r3, #0
 800dcae:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcb2:	2b09      	cmp	r3, #9
 800dcb4:	d864      	bhi.n	800dd80 <_dtoa_r+0x280>
 800dcb6:	2b05      	cmp	r3, #5
 800dcb8:	bfc4      	itt	gt
 800dcba:	3b04      	subgt	r3, #4
 800dcbc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800dcbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcc0:	f1a3 0302 	sub.w	r3, r3, #2
 800dcc4:	bfcc      	ite	gt
 800dcc6:	2400      	movgt	r4, #0
 800dcc8:	2401      	movle	r4, #1
 800dcca:	2b03      	cmp	r3, #3
 800dccc:	d863      	bhi.n	800dd96 <_dtoa_r+0x296>
 800dcce:	e8df f003 	tbb	[pc, r3]
 800dcd2:	372a      	.short	0x372a
 800dcd4:	5535      	.short	0x5535
 800dcd6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800dcda:	441e      	add	r6, r3
 800dcdc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dce0:	2b20      	cmp	r3, #32
 800dce2:	bfc1      	itttt	gt
 800dce4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dce8:	409f      	lslgt	r7, r3
 800dcea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dcee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dcf2:	bfd6      	itet	le
 800dcf4:	f1c3 0320 	rsble	r3, r3, #32
 800dcf8:	ea47 0003 	orrgt.w	r0, r7, r3
 800dcfc:	fa04 f003 	lslle.w	r0, r4, r3
 800dd00:	f7f2 fc20 	bl	8000544 <__aeabi_ui2d>
 800dd04:	2201      	movs	r2, #1
 800dd06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dd0a:	3e01      	subs	r6, #1
 800dd0c:	9214      	str	r2, [sp, #80]	@ 0x50
 800dd0e:	e777      	b.n	800dc00 <_dtoa_r+0x100>
 800dd10:	2301      	movs	r3, #1
 800dd12:	e7b8      	b.n	800dc86 <_dtoa_r+0x186>
 800dd14:	9012      	str	r0, [sp, #72]	@ 0x48
 800dd16:	e7b7      	b.n	800dc88 <_dtoa_r+0x188>
 800dd18:	427b      	negs	r3, r7
 800dd1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	eba8 0807 	sub.w	r8, r8, r7
 800dd22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dd24:	e7c4      	b.n	800dcb0 <_dtoa_r+0x1b0>
 800dd26:	2300      	movs	r3, #0
 800dd28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	dc35      	bgt.n	800dd9c <_dtoa_r+0x29c>
 800dd30:	2301      	movs	r3, #1
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	9307      	str	r3, [sp, #28]
 800dd36:	461a      	mov	r2, r3
 800dd38:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd3a:	e00b      	b.n	800dd54 <_dtoa_r+0x254>
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	e7f3      	b.n	800dd28 <_dtoa_r+0x228>
 800dd40:	2300      	movs	r3, #0
 800dd42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd46:	18fb      	adds	r3, r7, r3
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	9307      	str	r3, [sp, #28]
 800dd50:	bfb8      	it	lt
 800dd52:	2301      	movlt	r3, #1
 800dd54:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dd58:	2100      	movs	r1, #0
 800dd5a:	2204      	movs	r2, #4
 800dd5c:	f102 0514 	add.w	r5, r2, #20
 800dd60:	429d      	cmp	r5, r3
 800dd62:	d91f      	bls.n	800dda4 <_dtoa_r+0x2a4>
 800dd64:	6041      	str	r1, [r0, #4]
 800dd66:	4658      	mov	r0, fp
 800dd68:	f000 fec6 	bl	800eaf8 <_Balloc>
 800dd6c:	4682      	mov	sl, r0
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d13c      	bne.n	800ddec <_dtoa_r+0x2ec>
 800dd72:	4b1b      	ldr	r3, [pc, #108]	@ (800dde0 <_dtoa_r+0x2e0>)
 800dd74:	4602      	mov	r2, r0
 800dd76:	f240 11af 	movw	r1, #431	@ 0x1af
 800dd7a:	e6d8      	b.n	800db2e <_dtoa_r+0x2e>
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e7e0      	b.n	800dd42 <_dtoa_r+0x242>
 800dd80:	2401      	movs	r4, #1
 800dd82:	2300      	movs	r3, #0
 800dd84:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd86:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dd88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	9307      	str	r3, [sp, #28]
 800dd90:	2200      	movs	r2, #0
 800dd92:	2312      	movs	r3, #18
 800dd94:	e7d0      	b.n	800dd38 <_dtoa_r+0x238>
 800dd96:	2301      	movs	r3, #1
 800dd98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd9a:	e7f5      	b.n	800dd88 <_dtoa_r+0x288>
 800dd9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd9e:	9300      	str	r3, [sp, #0]
 800dda0:	9307      	str	r3, [sp, #28]
 800dda2:	e7d7      	b.n	800dd54 <_dtoa_r+0x254>
 800dda4:	3101      	adds	r1, #1
 800dda6:	0052      	lsls	r2, r2, #1
 800dda8:	e7d8      	b.n	800dd5c <_dtoa_r+0x25c>
 800ddaa:	bf00      	nop
 800ddac:	f3af 8000 	nop.w
 800ddb0:	636f4361 	.word	0x636f4361
 800ddb4:	3fd287a7 	.word	0x3fd287a7
 800ddb8:	8b60c8b3 	.word	0x8b60c8b3
 800ddbc:	3fc68a28 	.word	0x3fc68a28
 800ddc0:	509f79fb 	.word	0x509f79fb
 800ddc4:	3fd34413 	.word	0x3fd34413
 800ddc8:	0800fb61 	.word	0x0800fb61
 800ddcc:	0800fb78 	.word	0x0800fb78
 800ddd0:	7ff00000 	.word	0x7ff00000
 800ddd4:	0800fb31 	.word	0x0800fb31
 800ddd8:	3ff80000 	.word	0x3ff80000
 800dddc:	0800fc80 	.word	0x0800fc80
 800dde0:	0800fbd0 	.word	0x0800fbd0
 800dde4:	0800fb5d 	.word	0x0800fb5d
 800dde8:	0800fb30 	.word	0x0800fb30
 800ddec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ddf0:	6018      	str	r0, [r3, #0]
 800ddf2:	9b07      	ldr	r3, [sp, #28]
 800ddf4:	2b0e      	cmp	r3, #14
 800ddf6:	f200 80a4 	bhi.w	800df42 <_dtoa_r+0x442>
 800ddfa:	2c00      	cmp	r4, #0
 800ddfc:	f000 80a1 	beq.w	800df42 <_dtoa_r+0x442>
 800de00:	2f00      	cmp	r7, #0
 800de02:	dd33      	ble.n	800de6c <_dtoa_r+0x36c>
 800de04:	4bad      	ldr	r3, [pc, #692]	@ (800e0bc <_dtoa_r+0x5bc>)
 800de06:	f007 020f 	and.w	r2, r7, #15
 800de0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de0e:	ed93 7b00 	vldr	d7, [r3]
 800de12:	05f8      	lsls	r0, r7, #23
 800de14:	ed8d 7b04 	vstr	d7, [sp, #16]
 800de18:	ea4f 1427 	mov.w	r4, r7, asr #4
 800de1c:	d516      	bpl.n	800de4c <_dtoa_r+0x34c>
 800de1e:	4ba8      	ldr	r3, [pc, #672]	@ (800e0c0 <_dtoa_r+0x5c0>)
 800de20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de28:	f7f2 fd30 	bl	800088c <__aeabi_ddiv>
 800de2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de30:	f004 040f 	and.w	r4, r4, #15
 800de34:	2603      	movs	r6, #3
 800de36:	4da2      	ldr	r5, [pc, #648]	@ (800e0c0 <_dtoa_r+0x5c0>)
 800de38:	b954      	cbnz	r4, 800de50 <_dtoa_r+0x350>
 800de3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de42:	f7f2 fd23 	bl	800088c <__aeabi_ddiv>
 800de46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de4a:	e028      	b.n	800de9e <_dtoa_r+0x39e>
 800de4c:	2602      	movs	r6, #2
 800de4e:	e7f2      	b.n	800de36 <_dtoa_r+0x336>
 800de50:	07e1      	lsls	r1, r4, #31
 800de52:	d508      	bpl.n	800de66 <_dtoa_r+0x366>
 800de54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de5c:	f7f2 fbec 	bl	8000638 <__aeabi_dmul>
 800de60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de64:	3601      	adds	r6, #1
 800de66:	1064      	asrs	r4, r4, #1
 800de68:	3508      	adds	r5, #8
 800de6a:	e7e5      	b.n	800de38 <_dtoa_r+0x338>
 800de6c:	f000 80d2 	beq.w	800e014 <_dtoa_r+0x514>
 800de70:	427c      	negs	r4, r7
 800de72:	4b92      	ldr	r3, [pc, #584]	@ (800e0bc <_dtoa_r+0x5bc>)
 800de74:	4d92      	ldr	r5, [pc, #584]	@ (800e0c0 <_dtoa_r+0x5c0>)
 800de76:	f004 020f 	and.w	r2, r4, #15
 800de7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de86:	f7f2 fbd7 	bl	8000638 <__aeabi_dmul>
 800de8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de8e:	1124      	asrs	r4, r4, #4
 800de90:	2300      	movs	r3, #0
 800de92:	2602      	movs	r6, #2
 800de94:	2c00      	cmp	r4, #0
 800de96:	f040 80b2 	bne.w	800dffe <_dtoa_r+0x4fe>
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1d3      	bne.n	800de46 <_dtoa_r+0x346>
 800de9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dea0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f000 80b7 	beq.w	800e018 <_dtoa_r+0x518>
 800deaa:	4b86      	ldr	r3, [pc, #536]	@ (800e0c4 <_dtoa_r+0x5c4>)
 800deac:	2200      	movs	r2, #0
 800deae:	4620      	mov	r0, r4
 800deb0:	4629      	mov	r1, r5
 800deb2:	f7f2 fe33 	bl	8000b1c <__aeabi_dcmplt>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	f000 80ae 	beq.w	800e018 <_dtoa_r+0x518>
 800debc:	9b07      	ldr	r3, [sp, #28]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	f000 80aa 	beq.w	800e018 <_dtoa_r+0x518>
 800dec4:	9b00      	ldr	r3, [sp, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	dd37      	ble.n	800df3a <_dtoa_r+0x43a>
 800deca:	1e7b      	subs	r3, r7, #1
 800decc:	9304      	str	r3, [sp, #16]
 800dece:	4620      	mov	r0, r4
 800ded0:	4b7d      	ldr	r3, [pc, #500]	@ (800e0c8 <_dtoa_r+0x5c8>)
 800ded2:	2200      	movs	r2, #0
 800ded4:	4629      	mov	r1, r5
 800ded6:	f7f2 fbaf 	bl	8000638 <__aeabi_dmul>
 800deda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dede:	9c00      	ldr	r4, [sp, #0]
 800dee0:	3601      	adds	r6, #1
 800dee2:	4630      	mov	r0, r6
 800dee4:	f7f2 fb3e 	bl	8000564 <__aeabi_i2d>
 800dee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800deec:	f7f2 fba4 	bl	8000638 <__aeabi_dmul>
 800def0:	4b76      	ldr	r3, [pc, #472]	@ (800e0cc <_dtoa_r+0x5cc>)
 800def2:	2200      	movs	r2, #0
 800def4:	f7f2 f9ea 	bl	80002cc <__adddf3>
 800def8:	4605      	mov	r5, r0
 800defa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800defe:	2c00      	cmp	r4, #0
 800df00:	f040 808d 	bne.w	800e01e <_dtoa_r+0x51e>
 800df04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df08:	4b71      	ldr	r3, [pc, #452]	@ (800e0d0 <_dtoa_r+0x5d0>)
 800df0a:	2200      	movs	r2, #0
 800df0c:	f7f2 f9dc 	bl	80002c8 <__aeabi_dsub>
 800df10:	4602      	mov	r2, r0
 800df12:	460b      	mov	r3, r1
 800df14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df18:	462a      	mov	r2, r5
 800df1a:	4633      	mov	r3, r6
 800df1c:	f7f2 fe1c 	bl	8000b58 <__aeabi_dcmpgt>
 800df20:	2800      	cmp	r0, #0
 800df22:	f040 828b 	bne.w	800e43c <_dtoa_r+0x93c>
 800df26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df2a:	462a      	mov	r2, r5
 800df2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800df30:	f7f2 fdf4 	bl	8000b1c <__aeabi_dcmplt>
 800df34:	2800      	cmp	r0, #0
 800df36:	f040 8128 	bne.w	800e18a <_dtoa_r+0x68a>
 800df3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800df3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800df42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800df44:	2b00      	cmp	r3, #0
 800df46:	f2c0 815a 	blt.w	800e1fe <_dtoa_r+0x6fe>
 800df4a:	2f0e      	cmp	r7, #14
 800df4c:	f300 8157 	bgt.w	800e1fe <_dtoa_r+0x6fe>
 800df50:	4b5a      	ldr	r3, [pc, #360]	@ (800e0bc <_dtoa_r+0x5bc>)
 800df52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800df56:	ed93 7b00 	vldr	d7, [r3]
 800df5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	ed8d 7b00 	vstr	d7, [sp]
 800df62:	da03      	bge.n	800df6c <_dtoa_r+0x46c>
 800df64:	9b07      	ldr	r3, [sp, #28]
 800df66:	2b00      	cmp	r3, #0
 800df68:	f340 8101 	ble.w	800e16e <_dtoa_r+0x66e>
 800df6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800df70:	4656      	mov	r6, sl
 800df72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df76:	4620      	mov	r0, r4
 800df78:	4629      	mov	r1, r5
 800df7a:	f7f2 fc87 	bl	800088c <__aeabi_ddiv>
 800df7e:	f7f2 fe0b 	bl	8000b98 <__aeabi_d2iz>
 800df82:	4680      	mov	r8, r0
 800df84:	f7f2 faee 	bl	8000564 <__aeabi_i2d>
 800df88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df8c:	f7f2 fb54 	bl	8000638 <__aeabi_dmul>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4620      	mov	r0, r4
 800df96:	4629      	mov	r1, r5
 800df98:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800df9c:	f7f2 f994 	bl	80002c8 <__aeabi_dsub>
 800dfa0:	f806 4b01 	strb.w	r4, [r6], #1
 800dfa4:	9d07      	ldr	r5, [sp, #28]
 800dfa6:	eba6 040a 	sub.w	r4, r6, sl
 800dfaa:	42a5      	cmp	r5, r4
 800dfac:	4602      	mov	r2, r0
 800dfae:	460b      	mov	r3, r1
 800dfb0:	f040 8117 	bne.w	800e1e2 <_dtoa_r+0x6e2>
 800dfb4:	f7f2 f98a 	bl	80002cc <__adddf3>
 800dfb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	460d      	mov	r5, r1
 800dfc0:	f7f2 fdca 	bl	8000b58 <__aeabi_dcmpgt>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	f040 80f9 	bne.w	800e1bc <_dtoa_r+0x6bc>
 800dfca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfce:	4620      	mov	r0, r4
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	f7f2 fd99 	bl	8000b08 <__aeabi_dcmpeq>
 800dfd6:	b118      	cbz	r0, 800dfe0 <_dtoa_r+0x4e0>
 800dfd8:	f018 0f01 	tst.w	r8, #1
 800dfdc:	f040 80ee 	bne.w	800e1bc <_dtoa_r+0x6bc>
 800dfe0:	4649      	mov	r1, r9
 800dfe2:	4658      	mov	r0, fp
 800dfe4:	f000 fdc8 	bl	800eb78 <_Bfree>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	7033      	strb	r3, [r6, #0]
 800dfec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dfee:	3701      	adds	r7, #1
 800dff0:	601f      	str	r7, [r3, #0]
 800dff2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f000 831d 	beq.w	800e634 <_dtoa_r+0xb34>
 800dffa:	601e      	str	r6, [r3, #0]
 800dffc:	e31a      	b.n	800e634 <_dtoa_r+0xb34>
 800dffe:	07e2      	lsls	r2, r4, #31
 800e000:	d505      	bpl.n	800e00e <_dtoa_r+0x50e>
 800e002:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e006:	f7f2 fb17 	bl	8000638 <__aeabi_dmul>
 800e00a:	3601      	adds	r6, #1
 800e00c:	2301      	movs	r3, #1
 800e00e:	1064      	asrs	r4, r4, #1
 800e010:	3508      	adds	r5, #8
 800e012:	e73f      	b.n	800de94 <_dtoa_r+0x394>
 800e014:	2602      	movs	r6, #2
 800e016:	e742      	b.n	800de9e <_dtoa_r+0x39e>
 800e018:	9c07      	ldr	r4, [sp, #28]
 800e01a:	9704      	str	r7, [sp, #16]
 800e01c:	e761      	b.n	800dee2 <_dtoa_r+0x3e2>
 800e01e:	4b27      	ldr	r3, [pc, #156]	@ (800e0bc <_dtoa_r+0x5bc>)
 800e020:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e022:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e026:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e02a:	4454      	add	r4, sl
 800e02c:	2900      	cmp	r1, #0
 800e02e:	d053      	beq.n	800e0d8 <_dtoa_r+0x5d8>
 800e030:	4928      	ldr	r1, [pc, #160]	@ (800e0d4 <_dtoa_r+0x5d4>)
 800e032:	2000      	movs	r0, #0
 800e034:	f7f2 fc2a 	bl	800088c <__aeabi_ddiv>
 800e038:	4633      	mov	r3, r6
 800e03a:	462a      	mov	r2, r5
 800e03c:	f7f2 f944 	bl	80002c8 <__aeabi_dsub>
 800e040:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e044:	4656      	mov	r6, sl
 800e046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e04a:	f7f2 fda5 	bl	8000b98 <__aeabi_d2iz>
 800e04e:	4605      	mov	r5, r0
 800e050:	f7f2 fa88 	bl	8000564 <__aeabi_i2d>
 800e054:	4602      	mov	r2, r0
 800e056:	460b      	mov	r3, r1
 800e058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e05c:	f7f2 f934 	bl	80002c8 <__aeabi_dsub>
 800e060:	3530      	adds	r5, #48	@ 0x30
 800e062:	4602      	mov	r2, r0
 800e064:	460b      	mov	r3, r1
 800e066:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e06a:	f806 5b01 	strb.w	r5, [r6], #1
 800e06e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e072:	f7f2 fd53 	bl	8000b1c <__aeabi_dcmplt>
 800e076:	2800      	cmp	r0, #0
 800e078:	d171      	bne.n	800e15e <_dtoa_r+0x65e>
 800e07a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e07e:	4911      	ldr	r1, [pc, #68]	@ (800e0c4 <_dtoa_r+0x5c4>)
 800e080:	2000      	movs	r0, #0
 800e082:	f7f2 f921 	bl	80002c8 <__aeabi_dsub>
 800e086:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e08a:	f7f2 fd47 	bl	8000b1c <__aeabi_dcmplt>
 800e08e:	2800      	cmp	r0, #0
 800e090:	f040 8095 	bne.w	800e1be <_dtoa_r+0x6be>
 800e094:	42a6      	cmp	r6, r4
 800e096:	f43f af50 	beq.w	800df3a <_dtoa_r+0x43a>
 800e09a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e09e:	4b0a      	ldr	r3, [pc, #40]	@ (800e0c8 <_dtoa_r+0x5c8>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	f7f2 fac9 	bl	8000638 <__aeabi_dmul>
 800e0a6:	4b08      	ldr	r3, [pc, #32]	@ (800e0c8 <_dtoa_r+0x5c8>)
 800e0a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0b2:	f7f2 fac1 	bl	8000638 <__aeabi_dmul>
 800e0b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0ba:	e7c4      	b.n	800e046 <_dtoa_r+0x546>
 800e0bc:	0800fc80 	.word	0x0800fc80
 800e0c0:	0800fc58 	.word	0x0800fc58
 800e0c4:	3ff00000 	.word	0x3ff00000
 800e0c8:	40240000 	.word	0x40240000
 800e0cc:	401c0000 	.word	0x401c0000
 800e0d0:	40140000 	.word	0x40140000
 800e0d4:	3fe00000 	.word	0x3fe00000
 800e0d8:	4631      	mov	r1, r6
 800e0da:	4628      	mov	r0, r5
 800e0dc:	f7f2 faac 	bl	8000638 <__aeabi_dmul>
 800e0e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e0e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800e0e6:	4656      	mov	r6, sl
 800e0e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ec:	f7f2 fd54 	bl	8000b98 <__aeabi_d2iz>
 800e0f0:	4605      	mov	r5, r0
 800e0f2:	f7f2 fa37 	bl	8000564 <__aeabi_i2d>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0fe:	f7f2 f8e3 	bl	80002c8 <__aeabi_dsub>
 800e102:	3530      	adds	r5, #48	@ 0x30
 800e104:	f806 5b01 	strb.w	r5, [r6], #1
 800e108:	4602      	mov	r2, r0
 800e10a:	460b      	mov	r3, r1
 800e10c:	42a6      	cmp	r6, r4
 800e10e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e112:	f04f 0200 	mov.w	r2, #0
 800e116:	d124      	bne.n	800e162 <_dtoa_r+0x662>
 800e118:	4bac      	ldr	r3, [pc, #688]	@ (800e3cc <_dtoa_r+0x8cc>)
 800e11a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e11e:	f7f2 f8d5 	bl	80002cc <__adddf3>
 800e122:	4602      	mov	r2, r0
 800e124:	460b      	mov	r3, r1
 800e126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e12a:	f7f2 fd15 	bl	8000b58 <__aeabi_dcmpgt>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d145      	bne.n	800e1be <_dtoa_r+0x6be>
 800e132:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e136:	49a5      	ldr	r1, [pc, #660]	@ (800e3cc <_dtoa_r+0x8cc>)
 800e138:	2000      	movs	r0, #0
 800e13a:	f7f2 f8c5 	bl	80002c8 <__aeabi_dsub>
 800e13e:	4602      	mov	r2, r0
 800e140:	460b      	mov	r3, r1
 800e142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e146:	f7f2 fce9 	bl	8000b1c <__aeabi_dcmplt>
 800e14a:	2800      	cmp	r0, #0
 800e14c:	f43f aef5 	beq.w	800df3a <_dtoa_r+0x43a>
 800e150:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e152:	1e73      	subs	r3, r6, #1
 800e154:	9315      	str	r3, [sp, #84]	@ 0x54
 800e156:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e15a:	2b30      	cmp	r3, #48	@ 0x30
 800e15c:	d0f8      	beq.n	800e150 <_dtoa_r+0x650>
 800e15e:	9f04      	ldr	r7, [sp, #16]
 800e160:	e73e      	b.n	800dfe0 <_dtoa_r+0x4e0>
 800e162:	4b9b      	ldr	r3, [pc, #620]	@ (800e3d0 <_dtoa_r+0x8d0>)
 800e164:	f7f2 fa68 	bl	8000638 <__aeabi_dmul>
 800e168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e16c:	e7bc      	b.n	800e0e8 <_dtoa_r+0x5e8>
 800e16e:	d10c      	bne.n	800e18a <_dtoa_r+0x68a>
 800e170:	4b98      	ldr	r3, [pc, #608]	@ (800e3d4 <_dtoa_r+0x8d4>)
 800e172:	2200      	movs	r2, #0
 800e174:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e178:	f7f2 fa5e 	bl	8000638 <__aeabi_dmul>
 800e17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e180:	f7f2 fce0 	bl	8000b44 <__aeabi_dcmpge>
 800e184:	2800      	cmp	r0, #0
 800e186:	f000 8157 	beq.w	800e438 <_dtoa_r+0x938>
 800e18a:	2400      	movs	r4, #0
 800e18c:	4625      	mov	r5, r4
 800e18e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e190:	43db      	mvns	r3, r3
 800e192:	9304      	str	r3, [sp, #16]
 800e194:	4656      	mov	r6, sl
 800e196:	2700      	movs	r7, #0
 800e198:	4621      	mov	r1, r4
 800e19a:	4658      	mov	r0, fp
 800e19c:	f000 fcec 	bl	800eb78 <_Bfree>
 800e1a0:	2d00      	cmp	r5, #0
 800e1a2:	d0dc      	beq.n	800e15e <_dtoa_r+0x65e>
 800e1a4:	b12f      	cbz	r7, 800e1b2 <_dtoa_r+0x6b2>
 800e1a6:	42af      	cmp	r7, r5
 800e1a8:	d003      	beq.n	800e1b2 <_dtoa_r+0x6b2>
 800e1aa:	4639      	mov	r1, r7
 800e1ac:	4658      	mov	r0, fp
 800e1ae:	f000 fce3 	bl	800eb78 <_Bfree>
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	4658      	mov	r0, fp
 800e1b6:	f000 fcdf 	bl	800eb78 <_Bfree>
 800e1ba:	e7d0      	b.n	800e15e <_dtoa_r+0x65e>
 800e1bc:	9704      	str	r7, [sp, #16]
 800e1be:	4633      	mov	r3, r6
 800e1c0:	461e      	mov	r6, r3
 800e1c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1c6:	2a39      	cmp	r2, #57	@ 0x39
 800e1c8:	d107      	bne.n	800e1da <_dtoa_r+0x6da>
 800e1ca:	459a      	cmp	sl, r3
 800e1cc:	d1f8      	bne.n	800e1c0 <_dtoa_r+0x6c0>
 800e1ce:	9a04      	ldr	r2, [sp, #16]
 800e1d0:	3201      	adds	r2, #1
 800e1d2:	9204      	str	r2, [sp, #16]
 800e1d4:	2230      	movs	r2, #48	@ 0x30
 800e1d6:	f88a 2000 	strb.w	r2, [sl]
 800e1da:	781a      	ldrb	r2, [r3, #0]
 800e1dc:	3201      	adds	r2, #1
 800e1de:	701a      	strb	r2, [r3, #0]
 800e1e0:	e7bd      	b.n	800e15e <_dtoa_r+0x65e>
 800e1e2:	4b7b      	ldr	r3, [pc, #492]	@ (800e3d0 <_dtoa_r+0x8d0>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f7f2 fa27 	bl	8000638 <__aeabi_dmul>
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	460d      	mov	r5, r1
 800e1f2:	f7f2 fc89 	bl	8000b08 <__aeabi_dcmpeq>
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	f43f aebb 	beq.w	800df72 <_dtoa_r+0x472>
 800e1fc:	e6f0      	b.n	800dfe0 <_dtoa_r+0x4e0>
 800e1fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e200:	2a00      	cmp	r2, #0
 800e202:	f000 80db 	beq.w	800e3bc <_dtoa_r+0x8bc>
 800e206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e208:	2a01      	cmp	r2, #1
 800e20a:	f300 80bf 	bgt.w	800e38c <_dtoa_r+0x88c>
 800e20e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e210:	2a00      	cmp	r2, #0
 800e212:	f000 80b7 	beq.w	800e384 <_dtoa_r+0x884>
 800e216:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e21a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e21c:	4646      	mov	r6, r8
 800e21e:	9a08      	ldr	r2, [sp, #32]
 800e220:	2101      	movs	r1, #1
 800e222:	441a      	add	r2, r3
 800e224:	4658      	mov	r0, fp
 800e226:	4498      	add	r8, r3
 800e228:	9208      	str	r2, [sp, #32]
 800e22a:	f000 fd59 	bl	800ece0 <__i2b>
 800e22e:	4605      	mov	r5, r0
 800e230:	b15e      	cbz	r6, 800e24a <_dtoa_r+0x74a>
 800e232:	9b08      	ldr	r3, [sp, #32]
 800e234:	2b00      	cmp	r3, #0
 800e236:	dd08      	ble.n	800e24a <_dtoa_r+0x74a>
 800e238:	42b3      	cmp	r3, r6
 800e23a:	9a08      	ldr	r2, [sp, #32]
 800e23c:	bfa8      	it	ge
 800e23e:	4633      	movge	r3, r6
 800e240:	eba8 0803 	sub.w	r8, r8, r3
 800e244:	1af6      	subs	r6, r6, r3
 800e246:	1ad3      	subs	r3, r2, r3
 800e248:	9308      	str	r3, [sp, #32]
 800e24a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e24c:	b1f3      	cbz	r3, 800e28c <_dtoa_r+0x78c>
 800e24e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e250:	2b00      	cmp	r3, #0
 800e252:	f000 80b7 	beq.w	800e3c4 <_dtoa_r+0x8c4>
 800e256:	b18c      	cbz	r4, 800e27c <_dtoa_r+0x77c>
 800e258:	4629      	mov	r1, r5
 800e25a:	4622      	mov	r2, r4
 800e25c:	4658      	mov	r0, fp
 800e25e:	f000 fdff 	bl	800ee60 <__pow5mult>
 800e262:	464a      	mov	r2, r9
 800e264:	4601      	mov	r1, r0
 800e266:	4605      	mov	r5, r0
 800e268:	4658      	mov	r0, fp
 800e26a:	f000 fd4f 	bl	800ed0c <__multiply>
 800e26e:	4649      	mov	r1, r9
 800e270:	9004      	str	r0, [sp, #16]
 800e272:	4658      	mov	r0, fp
 800e274:	f000 fc80 	bl	800eb78 <_Bfree>
 800e278:	9b04      	ldr	r3, [sp, #16]
 800e27a:	4699      	mov	r9, r3
 800e27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e27e:	1b1a      	subs	r2, r3, r4
 800e280:	d004      	beq.n	800e28c <_dtoa_r+0x78c>
 800e282:	4649      	mov	r1, r9
 800e284:	4658      	mov	r0, fp
 800e286:	f000 fdeb 	bl	800ee60 <__pow5mult>
 800e28a:	4681      	mov	r9, r0
 800e28c:	2101      	movs	r1, #1
 800e28e:	4658      	mov	r0, fp
 800e290:	f000 fd26 	bl	800ece0 <__i2b>
 800e294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e296:	4604      	mov	r4, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	f000 81cf 	beq.w	800e63c <_dtoa_r+0xb3c>
 800e29e:	461a      	mov	r2, r3
 800e2a0:	4601      	mov	r1, r0
 800e2a2:	4658      	mov	r0, fp
 800e2a4:	f000 fddc 	bl	800ee60 <__pow5mult>
 800e2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	f300 8095 	bgt.w	800e3dc <_dtoa_r+0x8dc>
 800e2b2:	9b02      	ldr	r3, [sp, #8]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f040 8087 	bne.w	800e3c8 <_dtoa_r+0x8c8>
 800e2ba:	9b03      	ldr	r3, [sp, #12]
 800e2bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f040 8089 	bne.w	800e3d8 <_dtoa_r+0x8d8>
 800e2c6:	9b03      	ldr	r3, [sp, #12]
 800e2c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e2cc:	0d1b      	lsrs	r3, r3, #20
 800e2ce:	051b      	lsls	r3, r3, #20
 800e2d0:	b12b      	cbz	r3, 800e2de <_dtoa_r+0x7de>
 800e2d2:	9b08      	ldr	r3, [sp, #32]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	9308      	str	r3, [sp, #32]
 800e2d8:	f108 0801 	add.w	r8, r8, #1
 800e2dc:	2301      	movs	r3, #1
 800e2de:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f000 81b0 	beq.w	800e648 <_dtoa_r+0xb48>
 800e2e8:	6923      	ldr	r3, [r4, #16]
 800e2ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e2ee:	6918      	ldr	r0, [r3, #16]
 800e2f0:	f000 fcaa 	bl	800ec48 <__hi0bits>
 800e2f4:	f1c0 0020 	rsb	r0, r0, #32
 800e2f8:	9b08      	ldr	r3, [sp, #32]
 800e2fa:	4418      	add	r0, r3
 800e2fc:	f010 001f 	ands.w	r0, r0, #31
 800e300:	d077      	beq.n	800e3f2 <_dtoa_r+0x8f2>
 800e302:	f1c0 0320 	rsb	r3, r0, #32
 800e306:	2b04      	cmp	r3, #4
 800e308:	dd6b      	ble.n	800e3e2 <_dtoa_r+0x8e2>
 800e30a:	9b08      	ldr	r3, [sp, #32]
 800e30c:	f1c0 001c 	rsb	r0, r0, #28
 800e310:	4403      	add	r3, r0
 800e312:	4480      	add	r8, r0
 800e314:	4406      	add	r6, r0
 800e316:	9308      	str	r3, [sp, #32]
 800e318:	f1b8 0f00 	cmp.w	r8, #0
 800e31c:	dd05      	ble.n	800e32a <_dtoa_r+0x82a>
 800e31e:	4649      	mov	r1, r9
 800e320:	4642      	mov	r2, r8
 800e322:	4658      	mov	r0, fp
 800e324:	f000 fdf6 	bl	800ef14 <__lshift>
 800e328:	4681      	mov	r9, r0
 800e32a:	9b08      	ldr	r3, [sp, #32]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	dd05      	ble.n	800e33c <_dtoa_r+0x83c>
 800e330:	4621      	mov	r1, r4
 800e332:	461a      	mov	r2, r3
 800e334:	4658      	mov	r0, fp
 800e336:	f000 fded 	bl	800ef14 <__lshift>
 800e33a:	4604      	mov	r4, r0
 800e33c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d059      	beq.n	800e3f6 <_dtoa_r+0x8f6>
 800e342:	4621      	mov	r1, r4
 800e344:	4648      	mov	r0, r9
 800e346:	f000 fe51 	bl	800efec <__mcmp>
 800e34a:	2800      	cmp	r0, #0
 800e34c:	da53      	bge.n	800e3f6 <_dtoa_r+0x8f6>
 800e34e:	1e7b      	subs	r3, r7, #1
 800e350:	9304      	str	r3, [sp, #16]
 800e352:	4649      	mov	r1, r9
 800e354:	2300      	movs	r3, #0
 800e356:	220a      	movs	r2, #10
 800e358:	4658      	mov	r0, fp
 800e35a:	f000 fc2f 	bl	800ebbc <__multadd>
 800e35e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e360:	4681      	mov	r9, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	f000 8172 	beq.w	800e64c <_dtoa_r+0xb4c>
 800e368:	2300      	movs	r3, #0
 800e36a:	4629      	mov	r1, r5
 800e36c:	220a      	movs	r2, #10
 800e36e:	4658      	mov	r0, fp
 800e370:	f000 fc24 	bl	800ebbc <__multadd>
 800e374:	9b00      	ldr	r3, [sp, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	4605      	mov	r5, r0
 800e37a:	dc67      	bgt.n	800e44c <_dtoa_r+0x94c>
 800e37c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e37e:	2b02      	cmp	r3, #2
 800e380:	dc41      	bgt.n	800e406 <_dtoa_r+0x906>
 800e382:	e063      	b.n	800e44c <_dtoa_r+0x94c>
 800e384:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e386:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e38a:	e746      	b.n	800e21a <_dtoa_r+0x71a>
 800e38c:	9b07      	ldr	r3, [sp, #28]
 800e38e:	1e5c      	subs	r4, r3, #1
 800e390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e392:	42a3      	cmp	r3, r4
 800e394:	bfbf      	itttt	lt
 800e396:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e398:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e39a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e39c:	1ae3      	sublt	r3, r4, r3
 800e39e:	bfb4      	ite	lt
 800e3a0:	18d2      	addlt	r2, r2, r3
 800e3a2:	1b1c      	subge	r4, r3, r4
 800e3a4:	9b07      	ldr	r3, [sp, #28]
 800e3a6:	bfbc      	itt	lt
 800e3a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e3aa:	2400      	movlt	r4, #0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	bfb5      	itete	lt
 800e3b0:	eba8 0603 	sublt.w	r6, r8, r3
 800e3b4:	9b07      	ldrge	r3, [sp, #28]
 800e3b6:	2300      	movlt	r3, #0
 800e3b8:	4646      	movge	r6, r8
 800e3ba:	e730      	b.n	800e21e <_dtoa_r+0x71e>
 800e3bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e3be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e3c0:	4646      	mov	r6, r8
 800e3c2:	e735      	b.n	800e230 <_dtoa_r+0x730>
 800e3c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e3c6:	e75c      	b.n	800e282 <_dtoa_r+0x782>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	e788      	b.n	800e2de <_dtoa_r+0x7de>
 800e3cc:	3fe00000 	.word	0x3fe00000
 800e3d0:	40240000 	.word	0x40240000
 800e3d4:	40140000 	.word	0x40140000
 800e3d8:	9b02      	ldr	r3, [sp, #8]
 800e3da:	e780      	b.n	800e2de <_dtoa_r+0x7de>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3e0:	e782      	b.n	800e2e8 <_dtoa_r+0x7e8>
 800e3e2:	d099      	beq.n	800e318 <_dtoa_r+0x818>
 800e3e4:	9a08      	ldr	r2, [sp, #32]
 800e3e6:	331c      	adds	r3, #28
 800e3e8:	441a      	add	r2, r3
 800e3ea:	4498      	add	r8, r3
 800e3ec:	441e      	add	r6, r3
 800e3ee:	9208      	str	r2, [sp, #32]
 800e3f0:	e792      	b.n	800e318 <_dtoa_r+0x818>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	e7f6      	b.n	800e3e4 <_dtoa_r+0x8e4>
 800e3f6:	9b07      	ldr	r3, [sp, #28]
 800e3f8:	9704      	str	r7, [sp, #16]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	dc20      	bgt.n	800e440 <_dtoa_r+0x940>
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e402:	2b02      	cmp	r3, #2
 800e404:	dd1e      	ble.n	800e444 <_dtoa_r+0x944>
 800e406:	9b00      	ldr	r3, [sp, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f47f aec0 	bne.w	800e18e <_dtoa_r+0x68e>
 800e40e:	4621      	mov	r1, r4
 800e410:	2205      	movs	r2, #5
 800e412:	4658      	mov	r0, fp
 800e414:	f000 fbd2 	bl	800ebbc <__multadd>
 800e418:	4601      	mov	r1, r0
 800e41a:	4604      	mov	r4, r0
 800e41c:	4648      	mov	r0, r9
 800e41e:	f000 fde5 	bl	800efec <__mcmp>
 800e422:	2800      	cmp	r0, #0
 800e424:	f77f aeb3 	ble.w	800e18e <_dtoa_r+0x68e>
 800e428:	4656      	mov	r6, sl
 800e42a:	2331      	movs	r3, #49	@ 0x31
 800e42c:	f806 3b01 	strb.w	r3, [r6], #1
 800e430:	9b04      	ldr	r3, [sp, #16]
 800e432:	3301      	adds	r3, #1
 800e434:	9304      	str	r3, [sp, #16]
 800e436:	e6ae      	b.n	800e196 <_dtoa_r+0x696>
 800e438:	9c07      	ldr	r4, [sp, #28]
 800e43a:	9704      	str	r7, [sp, #16]
 800e43c:	4625      	mov	r5, r4
 800e43e:	e7f3      	b.n	800e428 <_dtoa_r+0x928>
 800e440:	9b07      	ldr	r3, [sp, #28]
 800e442:	9300      	str	r3, [sp, #0]
 800e444:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 8104 	beq.w	800e654 <_dtoa_r+0xb54>
 800e44c:	2e00      	cmp	r6, #0
 800e44e:	dd05      	ble.n	800e45c <_dtoa_r+0x95c>
 800e450:	4629      	mov	r1, r5
 800e452:	4632      	mov	r2, r6
 800e454:	4658      	mov	r0, fp
 800e456:	f000 fd5d 	bl	800ef14 <__lshift>
 800e45a:	4605      	mov	r5, r0
 800e45c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d05a      	beq.n	800e518 <_dtoa_r+0xa18>
 800e462:	6869      	ldr	r1, [r5, #4]
 800e464:	4658      	mov	r0, fp
 800e466:	f000 fb47 	bl	800eaf8 <_Balloc>
 800e46a:	4606      	mov	r6, r0
 800e46c:	b928      	cbnz	r0, 800e47a <_dtoa_r+0x97a>
 800e46e:	4b84      	ldr	r3, [pc, #528]	@ (800e680 <_dtoa_r+0xb80>)
 800e470:	4602      	mov	r2, r0
 800e472:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e476:	f7ff bb5a 	b.w	800db2e <_dtoa_r+0x2e>
 800e47a:	692a      	ldr	r2, [r5, #16]
 800e47c:	3202      	adds	r2, #2
 800e47e:	0092      	lsls	r2, r2, #2
 800e480:	f105 010c 	add.w	r1, r5, #12
 800e484:	300c      	adds	r0, #12
 800e486:	f7ff faa4 	bl	800d9d2 <memcpy>
 800e48a:	2201      	movs	r2, #1
 800e48c:	4631      	mov	r1, r6
 800e48e:	4658      	mov	r0, fp
 800e490:	f000 fd40 	bl	800ef14 <__lshift>
 800e494:	f10a 0301 	add.w	r3, sl, #1
 800e498:	9307      	str	r3, [sp, #28]
 800e49a:	9b00      	ldr	r3, [sp, #0]
 800e49c:	4453      	add	r3, sl
 800e49e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4a0:	9b02      	ldr	r3, [sp, #8]
 800e4a2:	f003 0301 	and.w	r3, r3, #1
 800e4a6:	462f      	mov	r7, r5
 800e4a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4aa:	4605      	mov	r5, r0
 800e4ac:	9b07      	ldr	r3, [sp, #28]
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	4648      	mov	r0, r9
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	f7ff fa9a 	bl	800d9ee <quorem>
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	9002      	str	r0, [sp, #8]
 800e4be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e4c2:	4648      	mov	r0, r9
 800e4c4:	f000 fd92 	bl	800efec <__mcmp>
 800e4c8:	462a      	mov	r2, r5
 800e4ca:	9008      	str	r0, [sp, #32]
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	4658      	mov	r0, fp
 800e4d0:	f000 fda8 	bl	800f024 <__mdiff>
 800e4d4:	68c2      	ldr	r2, [r0, #12]
 800e4d6:	4606      	mov	r6, r0
 800e4d8:	bb02      	cbnz	r2, 800e51c <_dtoa_r+0xa1c>
 800e4da:	4601      	mov	r1, r0
 800e4dc:	4648      	mov	r0, r9
 800e4de:	f000 fd85 	bl	800efec <__mcmp>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	4631      	mov	r1, r6
 800e4e6:	4658      	mov	r0, fp
 800e4e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e4ea:	f000 fb45 	bl	800eb78 <_Bfree>
 800e4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4f2:	9e07      	ldr	r6, [sp, #28]
 800e4f4:	ea43 0102 	orr.w	r1, r3, r2
 800e4f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4fa:	4319      	orrs	r1, r3
 800e4fc:	d110      	bne.n	800e520 <_dtoa_r+0xa20>
 800e4fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e502:	d029      	beq.n	800e558 <_dtoa_r+0xa58>
 800e504:	9b08      	ldr	r3, [sp, #32]
 800e506:	2b00      	cmp	r3, #0
 800e508:	dd02      	ble.n	800e510 <_dtoa_r+0xa10>
 800e50a:	9b02      	ldr	r3, [sp, #8]
 800e50c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e510:	9b00      	ldr	r3, [sp, #0]
 800e512:	f883 8000 	strb.w	r8, [r3]
 800e516:	e63f      	b.n	800e198 <_dtoa_r+0x698>
 800e518:	4628      	mov	r0, r5
 800e51a:	e7bb      	b.n	800e494 <_dtoa_r+0x994>
 800e51c:	2201      	movs	r2, #1
 800e51e:	e7e1      	b.n	800e4e4 <_dtoa_r+0x9e4>
 800e520:	9b08      	ldr	r3, [sp, #32]
 800e522:	2b00      	cmp	r3, #0
 800e524:	db04      	blt.n	800e530 <_dtoa_r+0xa30>
 800e526:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e528:	430b      	orrs	r3, r1
 800e52a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e52c:	430b      	orrs	r3, r1
 800e52e:	d120      	bne.n	800e572 <_dtoa_r+0xa72>
 800e530:	2a00      	cmp	r2, #0
 800e532:	dded      	ble.n	800e510 <_dtoa_r+0xa10>
 800e534:	4649      	mov	r1, r9
 800e536:	2201      	movs	r2, #1
 800e538:	4658      	mov	r0, fp
 800e53a:	f000 fceb 	bl	800ef14 <__lshift>
 800e53e:	4621      	mov	r1, r4
 800e540:	4681      	mov	r9, r0
 800e542:	f000 fd53 	bl	800efec <__mcmp>
 800e546:	2800      	cmp	r0, #0
 800e548:	dc03      	bgt.n	800e552 <_dtoa_r+0xa52>
 800e54a:	d1e1      	bne.n	800e510 <_dtoa_r+0xa10>
 800e54c:	f018 0f01 	tst.w	r8, #1
 800e550:	d0de      	beq.n	800e510 <_dtoa_r+0xa10>
 800e552:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e556:	d1d8      	bne.n	800e50a <_dtoa_r+0xa0a>
 800e558:	9a00      	ldr	r2, [sp, #0]
 800e55a:	2339      	movs	r3, #57	@ 0x39
 800e55c:	7013      	strb	r3, [r2, #0]
 800e55e:	4633      	mov	r3, r6
 800e560:	461e      	mov	r6, r3
 800e562:	3b01      	subs	r3, #1
 800e564:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e568:	2a39      	cmp	r2, #57	@ 0x39
 800e56a:	d052      	beq.n	800e612 <_dtoa_r+0xb12>
 800e56c:	3201      	adds	r2, #1
 800e56e:	701a      	strb	r2, [r3, #0]
 800e570:	e612      	b.n	800e198 <_dtoa_r+0x698>
 800e572:	2a00      	cmp	r2, #0
 800e574:	dd07      	ble.n	800e586 <_dtoa_r+0xa86>
 800e576:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e57a:	d0ed      	beq.n	800e558 <_dtoa_r+0xa58>
 800e57c:	9a00      	ldr	r2, [sp, #0]
 800e57e:	f108 0301 	add.w	r3, r8, #1
 800e582:	7013      	strb	r3, [r2, #0]
 800e584:	e608      	b.n	800e198 <_dtoa_r+0x698>
 800e586:	9b07      	ldr	r3, [sp, #28]
 800e588:	9a07      	ldr	r2, [sp, #28]
 800e58a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e590:	4293      	cmp	r3, r2
 800e592:	d028      	beq.n	800e5e6 <_dtoa_r+0xae6>
 800e594:	4649      	mov	r1, r9
 800e596:	2300      	movs	r3, #0
 800e598:	220a      	movs	r2, #10
 800e59a:	4658      	mov	r0, fp
 800e59c:	f000 fb0e 	bl	800ebbc <__multadd>
 800e5a0:	42af      	cmp	r7, r5
 800e5a2:	4681      	mov	r9, r0
 800e5a4:	f04f 0300 	mov.w	r3, #0
 800e5a8:	f04f 020a 	mov.w	r2, #10
 800e5ac:	4639      	mov	r1, r7
 800e5ae:	4658      	mov	r0, fp
 800e5b0:	d107      	bne.n	800e5c2 <_dtoa_r+0xac2>
 800e5b2:	f000 fb03 	bl	800ebbc <__multadd>
 800e5b6:	4607      	mov	r7, r0
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	9b07      	ldr	r3, [sp, #28]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	9307      	str	r3, [sp, #28]
 800e5c0:	e774      	b.n	800e4ac <_dtoa_r+0x9ac>
 800e5c2:	f000 fafb 	bl	800ebbc <__multadd>
 800e5c6:	4629      	mov	r1, r5
 800e5c8:	4607      	mov	r7, r0
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	220a      	movs	r2, #10
 800e5ce:	4658      	mov	r0, fp
 800e5d0:	f000 faf4 	bl	800ebbc <__multadd>
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	e7f0      	b.n	800e5ba <_dtoa_r+0xaba>
 800e5d8:	9b00      	ldr	r3, [sp, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	bfcc      	ite	gt
 800e5de:	461e      	movgt	r6, r3
 800e5e0:	2601      	movle	r6, #1
 800e5e2:	4456      	add	r6, sl
 800e5e4:	2700      	movs	r7, #0
 800e5e6:	4649      	mov	r1, r9
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	4658      	mov	r0, fp
 800e5ec:	f000 fc92 	bl	800ef14 <__lshift>
 800e5f0:	4621      	mov	r1, r4
 800e5f2:	4681      	mov	r9, r0
 800e5f4:	f000 fcfa 	bl	800efec <__mcmp>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	dcb0      	bgt.n	800e55e <_dtoa_r+0xa5e>
 800e5fc:	d102      	bne.n	800e604 <_dtoa_r+0xb04>
 800e5fe:	f018 0f01 	tst.w	r8, #1
 800e602:	d1ac      	bne.n	800e55e <_dtoa_r+0xa5e>
 800e604:	4633      	mov	r3, r6
 800e606:	461e      	mov	r6, r3
 800e608:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e60c:	2a30      	cmp	r2, #48	@ 0x30
 800e60e:	d0fa      	beq.n	800e606 <_dtoa_r+0xb06>
 800e610:	e5c2      	b.n	800e198 <_dtoa_r+0x698>
 800e612:	459a      	cmp	sl, r3
 800e614:	d1a4      	bne.n	800e560 <_dtoa_r+0xa60>
 800e616:	9b04      	ldr	r3, [sp, #16]
 800e618:	3301      	adds	r3, #1
 800e61a:	9304      	str	r3, [sp, #16]
 800e61c:	2331      	movs	r3, #49	@ 0x31
 800e61e:	f88a 3000 	strb.w	r3, [sl]
 800e622:	e5b9      	b.n	800e198 <_dtoa_r+0x698>
 800e624:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e626:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e684 <_dtoa_r+0xb84>
 800e62a:	b11b      	cbz	r3, 800e634 <_dtoa_r+0xb34>
 800e62c:	f10a 0308 	add.w	r3, sl, #8
 800e630:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e632:	6013      	str	r3, [r2, #0]
 800e634:	4650      	mov	r0, sl
 800e636:	b019      	add	sp, #100	@ 0x64
 800e638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e63e:	2b01      	cmp	r3, #1
 800e640:	f77f ae37 	ble.w	800e2b2 <_dtoa_r+0x7b2>
 800e644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e646:	930a      	str	r3, [sp, #40]	@ 0x28
 800e648:	2001      	movs	r0, #1
 800e64a:	e655      	b.n	800e2f8 <_dtoa_r+0x7f8>
 800e64c:	9b00      	ldr	r3, [sp, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f77f aed6 	ble.w	800e400 <_dtoa_r+0x900>
 800e654:	4656      	mov	r6, sl
 800e656:	4621      	mov	r1, r4
 800e658:	4648      	mov	r0, r9
 800e65a:	f7ff f9c8 	bl	800d9ee <quorem>
 800e65e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e662:	f806 8b01 	strb.w	r8, [r6], #1
 800e666:	9b00      	ldr	r3, [sp, #0]
 800e668:	eba6 020a 	sub.w	r2, r6, sl
 800e66c:	4293      	cmp	r3, r2
 800e66e:	ddb3      	ble.n	800e5d8 <_dtoa_r+0xad8>
 800e670:	4649      	mov	r1, r9
 800e672:	2300      	movs	r3, #0
 800e674:	220a      	movs	r2, #10
 800e676:	4658      	mov	r0, fp
 800e678:	f000 faa0 	bl	800ebbc <__multadd>
 800e67c:	4681      	mov	r9, r0
 800e67e:	e7ea      	b.n	800e656 <_dtoa_r+0xb56>
 800e680:	0800fbd0 	.word	0x0800fbd0
 800e684:	0800fb54 	.word	0x0800fb54

0800e688 <_free_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	4605      	mov	r5, r0
 800e68c:	2900      	cmp	r1, #0
 800e68e:	d041      	beq.n	800e714 <_free_r+0x8c>
 800e690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e694:	1f0c      	subs	r4, r1, #4
 800e696:	2b00      	cmp	r3, #0
 800e698:	bfb8      	it	lt
 800e69a:	18e4      	addlt	r4, r4, r3
 800e69c:	f7fe ff8e 	bl	800d5bc <__malloc_lock>
 800e6a0:	4a1d      	ldr	r2, [pc, #116]	@ (800e718 <_free_r+0x90>)
 800e6a2:	6813      	ldr	r3, [r2, #0]
 800e6a4:	b933      	cbnz	r3, 800e6b4 <_free_r+0x2c>
 800e6a6:	6063      	str	r3, [r4, #4]
 800e6a8:	6014      	str	r4, [r2, #0]
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6b0:	f7fe bf8a 	b.w	800d5c8 <__malloc_unlock>
 800e6b4:	42a3      	cmp	r3, r4
 800e6b6:	d908      	bls.n	800e6ca <_free_r+0x42>
 800e6b8:	6820      	ldr	r0, [r4, #0]
 800e6ba:	1821      	adds	r1, r4, r0
 800e6bc:	428b      	cmp	r3, r1
 800e6be:	bf01      	itttt	eq
 800e6c0:	6819      	ldreq	r1, [r3, #0]
 800e6c2:	685b      	ldreq	r3, [r3, #4]
 800e6c4:	1809      	addeq	r1, r1, r0
 800e6c6:	6021      	streq	r1, [r4, #0]
 800e6c8:	e7ed      	b.n	800e6a6 <_free_r+0x1e>
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	b10b      	cbz	r3, 800e6d4 <_free_r+0x4c>
 800e6d0:	42a3      	cmp	r3, r4
 800e6d2:	d9fa      	bls.n	800e6ca <_free_r+0x42>
 800e6d4:	6811      	ldr	r1, [r2, #0]
 800e6d6:	1850      	adds	r0, r2, r1
 800e6d8:	42a0      	cmp	r0, r4
 800e6da:	d10b      	bne.n	800e6f4 <_free_r+0x6c>
 800e6dc:	6820      	ldr	r0, [r4, #0]
 800e6de:	4401      	add	r1, r0
 800e6e0:	1850      	adds	r0, r2, r1
 800e6e2:	4283      	cmp	r3, r0
 800e6e4:	6011      	str	r1, [r2, #0]
 800e6e6:	d1e0      	bne.n	800e6aa <_free_r+0x22>
 800e6e8:	6818      	ldr	r0, [r3, #0]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	6053      	str	r3, [r2, #4]
 800e6ee:	4408      	add	r0, r1
 800e6f0:	6010      	str	r0, [r2, #0]
 800e6f2:	e7da      	b.n	800e6aa <_free_r+0x22>
 800e6f4:	d902      	bls.n	800e6fc <_free_r+0x74>
 800e6f6:	230c      	movs	r3, #12
 800e6f8:	602b      	str	r3, [r5, #0]
 800e6fa:	e7d6      	b.n	800e6aa <_free_r+0x22>
 800e6fc:	6820      	ldr	r0, [r4, #0]
 800e6fe:	1821      	adds	r1, r4, r0
 800e700:	428b      	cmp	r3, r1
 800e702:	bf04      	itt	eq
 800e704:	6819      	ldreq	r1, [r3, #0]
 800e706:	685b      	ldreq	r3, [r3, #4]
 800e708:	6063      	str	r3, [r4, #4]
 800e70a:	bf04      	itt	eq
 800e70c:	1809      	addeq	r1, r1, r0
 800e70e:	6021      	streq	r1, [r4, #0]
 800e710:	6054      	str	r4, [r2, #4]
 800e712:	e7ca      	b.n	800e6aa <_free_r+0x22>
 800e714:	bd38      	pop	{r3, r4, r5, pc}
 800e716:	bf00      	nop
 800e718:	20001008 	.word	0x20001008

0800e71c <__sfputc_r>:
 800e71c:	6893      	ldr	r3, [r2, #8]
 800e71e:	3b01      	subs	r3, #1
 800e720:	2b00      	cmp	r3, #0
 800e722:	b410      	push	{r4}
 800e724:	6093      	str	r3, [r2, #8]
 800e726:	da08      	bge.n	800e73a <__sfputc_r+0x1e>
 800e728:	6994      	ldr	r4, [r2, #24]
 800e72a:	42a3      	cmp	r3, r4
 800e72c:	db01      	blt.n	800e732 <__sfputc_r+0x16>
 800e72e:	290a      	cmp	r1, #10
 800e730:	d103      	bne.n	800e73a <__sfputc_r+0x1e>
 800e732:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e736:	f000 bda4 	b.w	800f282 <__swbuf_r>
 800e73a:	6813      	ldr	r3, [r2, #0]
 800e73c:	1c58      	adds	r0, r3, #1
 800e73e:	6010      	str	r0, [r2, #0]
 800e740:	7019      	strb	r1, [r3, #0]
 800e742:	4608      	mov	r0, r1
 800e744:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <__sfputs_r>:
 800e74a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74c:	4606      	mov	r6, r0
 800e74e:	460f      	mov	r7, r1
 800e750:	4614      	mov	r4, r2
 800e752:	18d5      	adds	r5, r2, r3
 800e754:	42ac      	cmp	r4, r5
 800e756:	d101      	bne.n	800e75c <__sfputs_r+0x12>
 800e758:	2000      	movs	r0, #0
 800e75a:	e007      	b.n	800e76c <__sfputs_r+0x22>
 800e75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e760:	463a      	mov	r2, r7
 800e762:	4630      	mov	r0, r6
 800e764:	f7ff ffda 	bl	800e71c <__sfputc_r>
 800e768:	1c43      	adds	r3, r0, #1
 800e76a:	d1f3      	bne.n	800e754 <__sfputs_r+0xa>
 800e76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e770 <_vfiprintf_r>:
 800e770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e774:	460d      	mov	r5, r1
 800e776:	b09d      	sub	sp, #116	@ 0x74
 800e778:	4614      	mov	r4, r2
 800e77a:	4698      	mov	r8, r3
 800e77c:	4606      	mov	r6, r0
 800e77e:	b118      	cbz	r0, 800e788 <_vfiprintf_r+0x18>
 800e780:	6a03      	ldr	r3, [r0, #32]
 800e782:	b90b      	cbnz	r3, 800e788 <_vfiprintf_r+0x18>
 800e784:	f7fe ffb2 	bl	800d6ec <__sinit>
 800e788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e78a:	07d9      	lsls	r1, r3, #31
 800e78c:	d405      	bmi.n	800e79a <_vfiprintf_r+0x2a>
 800e78e:	89ab      	ldrh	r3, [r5, #12]
 800e790:	059a      	lsls	r2, r3, #22
 800e792:	d402      	bmi.n	800e79a <_vfiprintf_r+0x2a>
 800e794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e796:	f7ff f91a 	bl	800d9ce <__retarget_lock_acquire_recursive>
 800e79a:	89ab      	ldrh	r3, [r5, #12]
 800e79c:	071b      	lsls	r3, r3, #28
 800e79e:	d501      	bpl.n	800e7a4 <_vfiprintf_r+0x34>
 800e7a0:	692b      	ldr	r3, [r5, #16]
 800e7a2:	b99b      	cbnz	r3, 800e7cc <_vfiprintf_r+0x5c>
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	f000 fdaa 	bl	800f300 <__swsetup_r>
 800e7ac:	b170      	cbz	r0, 800e7cc <_vfiprintf_r+0x5c>
 800e7ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7b0:	07dc      	lsls	r4, r3, #31
 800e7b2:	d504      	bpl.n	800e7be <_vfiprintf_r+0x4e>
 800e7b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7b8:	b01d      	add	sp, #116	@ 0x74
 800e7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7be:	89ab      	ldrh	r3, [r5, #12]
 800e7c0:	0598      	lsls	r0, r3, #22
 800e7c2:	d4f7      	bmi.n	800e7b4 <_vfiprintf_r+0x44>
 800e7c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7c6:	f7ff f903 	bl	800d9d0 <__retarget_lock_release_recursive>
 800e7ca:	e7f3      	b.n	800e7b4 <_vfiprintf_r+0x44>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7d0:	2320      	movs	r3, #32
 800e7d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e7d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7da:	2330      	movs	r3, #48	@ 0x30
 800e7dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e98c <_vfiprintf_r+0x21c>
 800e7e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e7e4:	f04f 0901 	mov.w	r9, #1
 800e7e8:	4623      	mov	r3, r4
 800e7ea:	469a      	mov	sl, r3
 800e7ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7f0:	b10a      	cbz	r2, 800e7f6 <_vfiprintf_r+0x86>
 800e7f2:	2a25      	cmp	r2, #37	@ 0x25
 800e7f4:	d1f9      	bne.n	800e7ea <_vfiprintf_r+0x7a>
 800e7f6:	ebba 0b04 	subs.w	fp, sl, r4
 800e7fa:	d00b      	beq.n	800e814 <_vfiprintf_r+0xa4>
 800e7fc:	465b      	mov	r3, fp
 800e7fe:	4622      	mov	r2, r4
 800e800:	4629      	mov	r1, r5
 800e802:	4630      	mov	r0, r6
 800e804:	f7ff ffa1 	bl	800e74a <__sfputs_r>
 800e808:	3001      	adds	r0, #1
 800e80a:	f000 80a7 	beq.w	800e95c <_vfiprintf_r+0x1ec>
 800e80e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e810:	445a      	add	r2, fp
 800e812:	9209      	str	r2, [sp, #36]	@ 0x24
 800e814:	f89a 3000 	ldrb.w	r3, [sl]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f000 809f 	beq.w	800e95c <_vfiprintf_r+0x1ec>
 800e81e:	2300      	movs	r3, #0
 800e820:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e828:	f10a 0a01 	add.w	sl, sl, #1
 800e82c:	9304      	str	r3, [sp, #16]
 800e82e:	9307      	str	r3, [sp, #28]
 800e830:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e834:	931a      	str	r3, [sp, #104]	@ 0x68
 800e836:	4654      	mov	r4, sl
 800e838:	2205      	movs	r2, #5
 800e83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e83e:	4853      	ldr	r0, [pc, #332]	@ (800e98c <_vfiprintf_r+0x21c>)
 800e840:	f7f1 fce6 	bl	8000210 <memchr>
 800e844:	9a04      	ldr	r2, [sp, #16]
 800e846:	b9d8      	cbnz	r0, 800e880 <_vfiprintf_r+0x110>
 800e848:	06d1      	lsls	r1, r2, #27
 800e84a:	bf44      	itt	mi
 800e84c:	2320      	movmi	r3, #32
 800e84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e852:	0713      	lsls	r3, r2, #28
 800e854:	bf44      	itt	mi
 800e856:	232b      	movmi	r3, #43	@ 0x2b
 800e858:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e85c:	f89a 3000 	ldrb.w	r3, [sl]
 800e860:	2b2a      	cmp	r3, #42	@ 0x2a
 800e862:	d015      	beq.n	800e890 <_vfiprintf_r+0x120>
 800e864:	9a07      	ldr	r2, [sp, #28]
 800e866:	4654      	mov	r4, sl
 800e868:	2000      	movs	r0, #0
 800e86a:	f04f 0c0a 	mov.w	ip, #10
 800e86e:	4621      	mov	r1, r4
 800e870:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e874:	3b30      	subs	r3, #48	@ 0x30
 800e876:	2b09      	cmp	r3, #9
 800e878:	d94b      	bls.n	800e912 <_vfiprintf_r+0x1a2>
 800e87a:	b1b0      	cbz	r0, 800e8aa <_vfiprintf_r+0x13a>
 800e87c:	9207      	str	r2, [sp, #28]
 800e87e:	e014      	b.n	800e8aa <_vfiprintf_r+0x13a>
 800e880:	eba0 0308 	sub.w	r3, r0, r8
 800e884:	fa09 f303 	lsl.w	r3, r9, r3
 800e888:	4313      	orrs	r3, r2
 800e88a:	9304      	str	r3, [sp, #16]
 800e88c:	46a2      	mov	sl, r4
 800e88e:	e7d2      	b.n	800e836 <_vfiprintf_r+0xc6>
 800e890:	9b03      	ldr	r3, [sp, #12]
 800e892:	1d19      	adds	r1, r3, #4
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	9103      	str	r1, [sp, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	bfbb      	ittet	lt
 800e89c:	425b      	neglt	r3, r3
 800e89e:	f042 0202 	orrlt.w	r2, r2, #2
 800e8a2:	9307      	strge	r3, [sp, #28]
 800e8a4:	9307      	strlt	r3, [sp, #28]
 800e8a6:	bfb8      	it	lt
 800e8a8:	9204      	strlt	r2, [sp, #16]
 800e8aa:	7823      	ldrb	r3, [r4, #0]
 800e8ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8ae:	d10a      	bne.n	800e8c6 <_vfiprintf_r+0x156>
 800e8b0:	7863      	ldrb	r3, [r4, #1]
 800e8b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8b4:	d132      	bne.n	800e91c <_vfiprintf_r+0x1ac>
 800e8b6:	9b03      	ldr	r3, [sp, #12]
 800e8b8:	1d1a      	adds	r2, r3, #4
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	9203      	str	r2, [sp, #12]
 800e8be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8c2:	3402      	adds	r4, #2
 800e8c4:	9305      	str	r3, [sp, #20]
 800e8c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e99c <_vfiprintf_r+0x22c>
 800e8ca:	7821      	ldrb	r1, [r4, #0]
 800e8cc:	2203      	movs	r2, #3
 800e8ce:	4650      	mov	r0, sl
 800e8d0:	f7f1 fc9e 	bl	8000210 <memchr>
 800e8d4:	b138      	cbz	r0, 800e8e6 <_vfiprintf_r+0x176>
 800e8d6:	9b04      	ldr	r3, [sp, #16]
 800e8d8:	eba0 000a 	sub.w	r0, r0, sl
 800e8dc:	2240      	movs	r2, #64	@ 0x40
 800e8de:	4082      	lsls	r2, r0
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	3401      	adds	r4, #1
 800e8e4:	9304      	str	r3, [sp, #16]
 800e8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ea:	4829      	ldr	r0, [pc, #164]	@ (800e990 <_vfiprintf_r+0x220>)
 800e8ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e8f0:	2206      	movs	r2, #6
 800e8f2:	f7f1 fc8d 	bl	8000210 <memchr>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	d03f      	beq.n	800e97a <_vfiprintf_r+0x20a>
 800e8fa:	4b26      	ldr	r3, [pc, #152]	@ (800e994 <_vfiprintf_r+0x224>)
 800e8fc:	bb1b      	cbnz	r3, 800e946 <_vfiprintf_r+0x1d6>
 800e8fe:	9b03      	ldr	r3, [sp, #12]
 800e900:	3307      	adds	r3, #7
 800e902:	f023 0307 	bic.w	r3, r3, #7
 800e906:	3308      	adds	r3, #8
 800e908:	9303      	str	r3, [sp, #12]
 800e90a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e90c:	443b      	add	r3, r7
 800e90e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e910:	e76a      	b.n	800e7e8 <_vfiprintf_r+0x78>
 800e912:	fb0c 3202 	mla	r2, ip, r2, r3
 800e916:	460c      	mov	r4, r1
 800e918:	2001      	movs	r0, #1
 800e91a:	e7a8      	b.n	800e86e <_vfiprintf_r+0xfe>
 800e91c:	2300      	movs	r3, #0
 800e91e:	3401      	adds	r4, #1
 800e920:	9305      	str	r3, [sp, #20]
 800e922:	4619      	mov	r1, r3
 800e924:	f04f 0c0a 	mov.w	ip, #10
 800e928:	4620      	mov	r0, r4
 800e92a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e92e:	3a30      	subs	r2, #48	@ 0x30
 800e930:	2a09      	cmp	r2, #9
 800e932:	d903      	bls.n	800e93c <_vfiprintf_r+0x1cc>
 800e934:	2b00      	cmp	r3, #0
 800e936:	d0c6      	beq.n	800e8c6 <_vfiprintf_r+0x156>
 800e938:	9105      	str	r1, [sp, #20]
 800e93a:	e7c4      	b.n	800e8c6 <_vfiprintf_r+0x156>
 800e93c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e940:	4604      	mov	r4, r0
 800e942:	2301      	movs	r3, #1
 800e944:	e7f0      	b.n	800e928 <_vfiprintf_r+0x1b8>
 800e946:	ab03      	add	r3, sp, #12
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	462a      	mov	r2, r5
 800e94c:	4b12      	ldr	r3, [pc, #72]	@ (800e998 <_vfiprintf_r+0x228>)
 800e94e:	a904      	add	r1, sp, #16
 800e950:	4630      	mov	r0, r6
 800e952:	f7fe f90d 	bl	800cb70 <_printf_float>
 800e956:	4607      	mov	r7, r0
 800e958:	1c78      	adds	r0, r7, #1
 800e95a:	d1d6      	bne.n	800e90a <_vfiprintf_r+0x19a>
 800e95c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e95e:	07d9      	lsls	r1, r3, #31
 800e960:	d405      	bmi.n	800e96e <_vfiprintf_r+0x1fe>
 800e962:	89ab      	ldrh	r3, [r5, #12]
 800e964:	059a      	lsls	r2, r3, #22
 800e966:	d402      	bmi.n	800e96e <_vfiprintf_r+0x1fe>
 800e968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e96a:	f7ff f831 	bl	800d9d0 <__retarget_lock_release_recursive>
 800e96e:	89ab      	ldrh	r3, [r5, #12]
 800e970:	065b      	lsls	r3, r3, #25
 800e972:	f53f af1f 	bmi.w	800e7b4 <_vfiprintf_r+0x44>
 800e976:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e978:	e71e      	b.n	800e7b8 <_vfiprintf_r+0x48>
 800e97a:	ab03      	add	r3, sp, #12
 800e97c:	9300      	str	r3, [sp, #0]
 800e97e:	462a      	mov	r2, r5
 800e980:	4b05      	ldr	r3, [pc, #20]	@ (800e998 <_vfiprintf_r+0x228>)
 800e982:	a904      	add	r1, sp, #16
 800e984:	4630      	mov	r0, r6
 800e986:	f7fe fc3d 	bl	800d204 <_printf_i>
 800e98a:	e7e4      	b.n	800e956 <_vfiprintf_r+0x1e6>
 800e98c:	0800fbe1 	.word	0x0800fbe1
 800e990:	0800fbeb 	.word	0x0800fbeb
 800e994:	0800cb71 	.word	0x0800cb71
 800e998:	0800e74b 	.word	0x0800e74b
 800e99c:	0800fbe7 	.word	0x0800fbe7

0800e9a0 <__sflush_r>:
 800e9a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a8:	0716      	lsls	r6, r2, #28
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	460c      	mov	r4, r1
 800e9ae:	d454      	bmi.n	800ea5a <__sflush_r+0xba>
 800e9b0:	684b      	ldr	r3, [r1, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	dc02      	bgt.n	800e9bc <__sflush_r+0x1c>
 800e9b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	dd48      	ble.n	800ea4e <__sflush_r+0xae>
 800e9bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9be:	2e00      	cmp	r6, #0
 800e9c0:	d045      	beq.n	800ea4e <__sflush_r+0xae>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e9c8:	682f      	ldr	r7, [r5, #0]
 800e9ca:	6a21      	ldr	r1, [r4, #32]
 800e9cc:	602b      	str	r3, [r5, #0]
 800e9ce:	d030      	beq.n	800ea32 <__sflush_r+0x92>
 800e9d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e9d2:	89a3      	ldrh	r3, [r4, #12]
 800e9d4:	0759      	lsls	r1, r3, #29
 800e9d6:	d505      	bpl.n	800e9e4 <__sflush_r+0x44>
 800e9d8:	6863      	ldr	r3, [r4, #4]
 800e9da:	1ad2      	subs	r2, r2, r3
 800e9dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e9de:	b10b      	cbz	r3, 800e9e4 <__sflush_r+0x44>
 800e9e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e9e2:	1ad2      	subs	r2, r2, r3
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9e8:	6a21      	ldr	r1, [r4, #32]
 800e9ea:	4628      	mov	r0, r5
 800e9ec:	47b0      	blx	r6
 800e9ee:	1c43      	adds	r3, r0, #1
 800e9f0:	89a3      	ldrh	r3, [r4, #12]
 800e9f2:	d106      	bne.n	800ea02 <__sflush_r+0x62>
 800e9f4:	6829      	ldr	r1, [r5, #0]
 800e9f6:	291d      	cmp	r1, #29
 800e9f8:	d82b      	bhi.n	800ea52 <__sflush_r+0xb2>
 800e9fa:	4a2a      	ldr	r2, [pc, #168]	@ (800eaa4 <__sflush_r+0x104>)
 800e9fc:	410a      	asrs	r2, r1
 800e9fe:	07d6      	lsls	r6, r2, #31
 800ea00:	d427      	bmi.n	800ea52 <__sflush_r+0xb2>
 800ea02:	2200      	movs	r2, #0
 800ea04:	6062      	str	r2, [r4, #4]
 800ea06:	04d9      	lsls	r1, r3, #19
 800ea08:	6922      	ldr	r2, [r4, #16]
 800ea0a:	6022      	str	r2, [r4, #0]
 800ea0c:	d504      	bpl.n	800ea18 <__sflush_r+0x78>
 800ea0e:	1c42      	adds	r2, r0, #1
 800ea10:	d101      	bne.n	800ea16 <__sflush_r+0x76>
 800ea12:	682b      	ldr	r3, [r5, #0]
 800ea14:	b903      	cbnz	r3, 800ea18 <__sflush_r+0x78>
 800ea16:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea1a:	602f      	str	r7, [r5, #0]
 800ea1c:	b1b9      	cbz	r1, 800ea4e <__sflush_r+0xae>
 800ea1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea22:	4299      	cmp	r1, r3
 800ea24:	d002      	beq.n	800ea2c <__sflush_r+0x8c>
 800ea26:	4628      	mov	r0, r5
 800ea28:	f7ff fe2e 	bl	800e688 <_free_r>
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea30:	e00d      	b.n	800ea4e <__sflush_r+0xae>
 800ea32:	2301      	movs	r3, #1
 800ea34:	4628      	mov	r0, r5
 800ea36:	47b0      	blx	r6
 800ea38:	4602      	mov	r2, r0
 800ea3a:	1c50      	adds	r0, r2, #1
 800ea3c:	d1c9      	bne.n	800e9d2 <__sflush_r+0x32>
 800ea3e:	682b      	ldr	r3, [r5, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d0c6      	beq.n	800e9d2 <__sflush_r+0x32>
 800ea44:	2b1d      	cmp	r3, #29
 800ea46:	d001      	beq.n	800ea4c <__sflush_r+0xac>
 800ea48:	2b16      	cmp	r3, #22
 800ea4a:	d11e      	bne.n	800ea8a <__sflush_r+0xea>
 800ea4c:	602f      	str	r7, [r5, #0]
 800ea4e:	2000      	movs	r0, #0
 800ea50:	e022      	b.n	800ea98 <__sflush_r+0xf8>
 800ea52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea56:	b21b      	sxth	r3, r3
 800ea58:	e01b      	b.n	800ea92 <__sflush_r+0xf2>
 800ea5a:	690f      	ldr	r7, [r1, #16]
 800ea5c:	2f00      	cmp	r7, #0
 800ea5e:	d0f6      	beq.n	800ea4e <__sflush_r+0xae>
 800ea60:	0793      	lsls	r3, r2, #30
 800ea62:	680e      	ldr	r6, [r1, #0]
 800ea64:	bf08      	it	eq
 800ea66:	694b      	ldreq	r3, [r1, #20]
 800ea68:	600f      	str	r7, [r1, #0]
 800ea6a:	bf18      	it	ne
 800ea6c:	2300      	movne	r3, #0
 800ea6e:	eba6 0807 	sub.w	r8, r6, r7
 800ea72:	608b      	str	r3, [r1, #8]
 800ea74:	f1b8 0f00 	cmp.w	r8, #0
 800ea78:	dde9      	ble.n	800ea4e <__sflush_r+0xae>
 800ea7a:	6a21      	ldr	r1, [r4, #32]
 800ea7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ea7e:	4643      	mov	r3, r8
 800ea80:	463a      	mov	r2, r7
 800ea82:	4628      	mov	r0, r5
 800ea84:	47b0      	blx	r6
 800ea86:	2800      	cmp	r0, #0
 800ea88:	dc08      	bgt.n	800ea9c <__sflush_r+0xfc>
 800ea8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea92:	81a3      	strh	r3, [r4, #12]
 800ea94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea9c:	4407      	add	r7, r0
 800ea9e:	eba8 0800 	sub.w	r8, r8, r0
 800eaa2:	e7e7      	b.n	800ea74 <__sflush_r+0xd4>
 800eaa4:	dfbffffe 	.word	0xdfbffffe

0800eaa8 <_fflush_r>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	690b      	ldr	r3, [r1, #16]
 800eaac:	4605      	mov	r5, r0
 800eaae:	460c      	mov	r4, r1
 800eab0:	b913      	cbnz	r3, 800eab8 <_fflush_r+0x10>
 800eab2:	2500      	movs	r5, #0
 800eab4:	4628      	mov	r0, r5
 800eab6:	bd38      	pop	{r3, r4, r5, pc}
 800eab8:	b118      	cbz	r0, 800eac2 <_fflush_r+0x1a>
 800eaba:	6a03      	ldr	r3, [r0, #32]
 800eabc:	b90b      	cbnz	r3, 800eac2 <_fflush_r+0x1a>
 800eabe:	f7fe fe15 	bl	800d6ec <__sinit>
 800eac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d0f3      	beq.n	800eab2 <_fflush_r+0xa>
 800eaca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eacc:	07d0      	lsls	r0, r2, #31
 800eace:	d404      	bmi.n	800eada <_fflush_r+0x32>
 800ead0:	0599      	lsls	r1, r3, #22
 800ead2:	d402      	bmi.n	800eada <_fflush_r+0x32>
 800ead4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ead6:	f7fe ff7a 	bl	800d9ce <__retarget_lock_acquire_recursive>
 800eada:	4628      	mov	r0, r5
 800eadc:	4621      	mov	r1, r4
 800eade:	f7ff ff5f 	bl	800e9a0 <__sflush_r>
 800eae2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eae4:	07da      	lsls	r2, r3, #31
 800eae6:	4605      	mov	r5, r0
 800eae8:	d4e4      	bmi.n	800eab4 <_fflush_r+0xc>
 800eaea:	89a3      	ldrh	r3, [r4, #12]
 800eaec:	059b      	lsls	r3, r3, #22
 800eaee:	d4e1      	bmi.n	800eab4 <_fflush_r+0xc>
 800eaf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eaf2:	f7fe ff6d 	bl	800d9d0 <__retarget_lock_release_recursive>
 800eaf6:	e7dd      	b.n	800eab4 <_fflush_r+0xc>

0800eaf8 <_Balloc>:
 800eaf8:	b570      	push	{r4, r5, r6, lr}
 800eafa:	69c6      	ldr	r6, [r0, #28]
 800eafc:	4604      	mov	r4, r0
 800eafe:	460d      	mov	r5, r1
 800eb00:	b976      	cbnz	r6, 800eb20 <_Balloc+0x28>
 800eb02:	2010      	movs	r0, #16
 800eb04:	f7fe fa5e 	bl	800cfc4 <malloc>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	61e0      	str	r0, [r4, #28]
 800eb0c:	b920      	cbnz	r0, 800eb18 <_Balloc+0x20>
 800eb0e:	4b18      	ldr	r3, [pc, #96]	@ (800eb70 <_Balloc+0x78>)
 800eb10:	4818      	ldr	r0, [pc, #96]	@ (800eb74 <_Balloc+0x7c>)
 800eb12:	216b      	movs	r1, #107	@ 0x6b
 800eb14:	f000 fc90 	bl	800f438 <__assert_func>
 800eb18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb1c:	6006      	str	r6, [r0, #0]
 800eb1e:	60c6      	str	r6, [r0, #12]
 800eb20:	69e6      	ldr	r6, [r4, #28]
 800eb22:	68f3      	ldr	r3, [r6, #12]
 800eb24:	b183      	cbz	r3, 800eb48 <_Balloc+0x50>
 800eb26:	69e3      	ldr	r3, [r4, #28]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb2e:	b9b8      	cbnz	r0, 800eb60 <_Balloc+0x68>
 800eb30:	2101      	movs	r1, #1
 800eb32:	fa01 f605 	lsl.w	r6, r1, r5
 800eb36:	1d72      	adds	r2, r6, #5
 800eb38:	0092      	lsls	r2, r2, #2
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f000 fc9a 	bl	800f474 <_calloc_r>
 800eb40:	b160      	cbz	r0, 800eb5c <_Balloc+0x64>
 800eb42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb46:	e00e      	b.n	800eb66 <_Balloc+0x6e>
 800eb48:	2221      	movs	r2, #33	@ 0x21
 800eb4a:	2104      	movs	r1, #4
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	f000 fc91 	bl	800f474 <_calloc_r>
 800eb52:	69e3      	ldr	r3, [r4, #28]
 800eb54:	60f0      	str	r0, [r6, #12]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1e4      	bne.n	800eb26 <_Balloc+0x2e>
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	bd70      	pop	{r4, r5, r6, pc}
 800eb60:	6802      	ldr	r2, [r0, #0]
 800eb62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb66:	2300      	movs	r3, #0
 800eb68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb6c:	e7f7      	b.n	800eb5e <_Balloc+0x66>
 800eb6e:	bf00      	nop
 800eb70:	0800fb61 	.word	0x0800fb61
 800eb74:	0800fbf2 	.word	0x0800fbf2

0800eb78 <_Bfree>:
 800eb78:	b570      	push	{r4, r5, r6, lr}
 800eb7a:	69c6      	ldr	r6, [r0, #28]
 800eb7c:	4605      	mov	r5, r0
 800eb7e:	460c      	mov	r4, r1
 800eb80:	b976      	cbnz	r6, 800eba0 <_Bfree+0x28>
 800eb82:	2010      	movs	r0, #16
 800eb84:	f7fe fa1e 	bl	800cfc4 <malloc>
 800eb88:	4602      	mov	r2, r0
 800eb8a:	61e8      	str	r0, [r5, #28]
 800eb8c:	b920      	cbnz	r0, 800eb98 <_Bfree+0x20>
 800eb8e:	4b09      	ldr	r3, [pc, #36]	@ (800ebb4 <_Bfree+0x3c>)
 800eb90:	4809      	ldr	r0, [pc, #36]	@ (800ebb8 <_Bfree+0x40>)
 800eb92:	218f      	movs	r1, #143	@ 0x8f
 800eb94:	f000 fc50 	bl	800f438 <__assert_func>
 800eb98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb9c:	6006      	str	r6, [r0, #0]
 800eb9e:	60c6      	str	r6, [r0, #12]
 800eba0:	b13c      	cbz	r4, 800ebb2 <_Bfree+0x3a>
 800eba2:	69eb      	ldr	r3, [r5, #28]
 800eba4:	6862      	ldr	r2, [r4, #4]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ebac:	6021      	str	r1, [r4, #0]
 800ebae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ebb2:	bd70      	pop	{r4, r5, r6, pc}
 800ebb4:	0800fb61 	.word	0x0800fb61
 800ebb8:	0800fbf2 	.word	0x0800fbf2

0800ebbc <__multadd>:
 800ebbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc0:	690d      	ldr	r5, [r1, #16]
 800ebc2:	4607      	mov	r7, r0
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	461e      	mov	r6, r3
 800ebc8:	f101 0c14 	add.w	ip, r1, #20
 800ebcc:	2000      	movs	r0, #0
 800ebce:	f8dc 3000 	ldr.w	r3, [ip]
 800ebd2:	b299      	uxth	r1, r3
 800ebd4:	fb02 6101 	mla	r1, r2, r1, r6
 800ebd8:	0c1e      	lsrs	r6, r3, #16
 800ebda:	0c0b      	lsrs	r3, r1, #16
 800ebdc:	fb02 3306 	mla	r3, r2, r6, r3
 800ebe0:	b289      	uxth	r1, r1
 800ebe2:	3001      	adds	r0, #1
 800ebe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ebe8:	4285      	cmp	r5, r0
 800ebea:	f84c 1b04 	str.w	r1, [ip], #4
 800ebee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ebf2:	dcec      	bgt.n	800ebce <__multadd+0x12>
 800ebf4:	b30e      	cbz	r6, 800ec3a <__multadd+0x7e>
 800ebf6:	68a3      	ldr	r3, [r4, #8]
 800ebf8:	42ab      	cmp	r3, r5
 800ebfa:	dc19      	bgt.n	800ec30 <__multadd+0x74>
 800ebfc:	6861      	ldr	r1, [r4, #4]
 800ebfe:	4638      	mov	r0, r7
 800ec00:	3101      	adds	r1, #1
 800ec02:	f7ff ff79 	bl	800eaf8 <_Balloc>
 800ec06:	4680      	mov	r8, r0
 800ec08:	b928      	cbnz	r0, 800ec16 <__multadd+0x5a>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ec40 <__multadd+0x84>)
 800ec0e:	480d      	ldr	r0, [pc, #52]	@ (800ec44 <__multadd+0x88>)
 800ec10:	21ba      	movs	r1, #186	@ 0xba
 800ec12:	f000 fc11 	bl	800f438 <__assert_func>
 800ec16:	6922      	ldr	r2, [r4, #16]
 800ec18:	3202      	adds	r2, #2
 800ec1a:	f104 010c 	add.w	r1, r4, #12
 800ec1e:	0092      	lsls	r2, r2, #2
 800ec20:	300c      	adds	r0, #12
 800ec22:	f7fe fed6 	bl	800d9d2 <memcpy>
 800ec26:	4621      	mov	r1, r4
 800ec28:	4638      	mov	r0, r7
 800ec2a:	f7ff ffa5 	bl	800eb78 <_Bfree>
 800ec2e:	4644      	mov	r4, r8
 800ec30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec34:	3501      	adds	r5, #1
 800ec36:	615e      	str	r6, [r3, #20]
 800ec38:	6125      	str	r5, [r4, #16]
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec40:	0800fbd0 	.word	0x0800fbd0
 800ec44:	0800fbf2 	.word	0x0800fbf2

0800ec48 <__hi0bits>:
 800ec48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	bf36      	itet	cc
 800ec50:	0403      	lslcc	r3, r0, #16
 800ec52:	2000      	movcs	r0, #0
 800ec54:	2010      	movcc	r0, #16
 800ec56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec5a:	bf3c      	itt	cc
 800ec5c:	021b      	lslcc	r3, r3, #8
 800ec5e:	3008      	addcc	r0, #8
 800ec60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec64:	bf3c      	itt	cc
 800ec66:	011b      	lslcc	r3, r3, #4
 800ec68:	3004      	addcc	r0, #4
 800ec6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec6e:	bf3c      	itt	cc
 800ec70:	009b      	lslcc	r3, r3, #2
 800ec72:	3002      	addcc	r0, #2
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	db05      	blt.n	800ec84 <__hi0bits+0x3c>
 800ec78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ec7c:	f100 0001 	add.w	r0, r0, #1
 800ec80:	bf08      	it	eq
 800ec82:	2020      	moveq	r0, #32
 800ec84:	4770      	bx	lr

0800ec86 <__lo0bits>:
 800ec86:	6803      	ldr	r3, [r0, #0]
 800ec88:	4602      	mov	r2, r0
 800ec8a:	f013 0007 	ands.w	r0, r3, #7
 800ec8e:	d00b      	beq.n	800eca8 <__lo0bits+0x22>
 800ec90:	07d9      	lsls	r1, r3, #31
 800ec92:	d421      	bmi.n	800ecd8 <__lo0bits+0x52>
 800ec94:	0798      	lsls	r0, r3, #30
 800ec96:	bf49      	itett	mi
 800ec98:	085b      	lsrmi	r3, r3, #1
 800ec9a:	089b      	lsrpl	r3, r3, #2
 800ec9c:	2001      	movmi	r0, #1
 800ec9e:	6013      	strmi	r3, [r2, #0]
 800eca0:	bf5c      	itt	pl
 800eca2:	6013      	strpl	r3, [r2, #0]
 800eca4:	2002      	movpl	r0, #2
 800eca6:	4770      	bx	lr
 800eca8:	b299      	uxth	r1, r3
 800ecaa:	b909      	cbnz	r1, 800ecb0 <__lo0bits+0x2a>
 800ecac:	0c1b      	lsrs	r3, r3, #16
 800ecae:	2010      	movs	r0, #16
 800ecb0:	b2d9      	uxtb	r1, r3
 800ecb2:	b909      	cbnz	r1, 800ecb8 <__lo0bits+0x32>
 800ecb4:	3008      	adds	r0, #8
 800ecb6:	0a1b      	lsrs	r3, r3, #8
 800ecb8:	0719      	lsls	r1, r3, #28
 800ecba:	bf04      	itt	eq
 800ecbc:	091b      	lsreq	r3, r3, #4
 800ecbe:	3004      	addeq	r0, #4
 800ecc0:	0799      	lsls	r1, r3, #30
 800ecc2:	bf04      	itt	eq
 800ecc4:	089b      	lsreq	r3, r3, #2
 800ecc6:	3002      	addeq	r0, #2
 800ecc8:	07d9      	lsls	r1, r3, #31
 800ecca:	d403      	bmi.n	800ecd4 <__lo0bits+0x4e>
 800eccc:	085b      	lsrs	r3, r3, #1
 800ecce:	f100 0001 	add.w	r0, r0, #1
 800ecd2:	d003      	beq.n	800ecdc <__lo0bits+0x56>
 800ecd4:	6013      	str	r3, [r2, #0]
 800ecd6:	4770      	bx	lr
 800ecd8:	2000      	movs	r0, #0
 800ecda:	4770      	bx	lr
 800ecdc:	2020      	movs	r0, #32
 800ecde:	4770      	bx	lr

0800ece0 <__i2b>:
 800ece0:	b510      	push	{r4, lr}
 800ece2:	460c      	mov	r4, r1
 800ece4:	2101      	movs	r1, #1
 800ece6:	f7ff ff07 	bl	800eaf8 <_Balloc>
 800ecea:	4602      	mov	r2, r0
 800ecec:	b928      	cbnz	r0, 800ecfa <__i2b+0x1a>
 800ecee:	4b05      	ldr	r3, [pc, #20]	@ (800ed04 <__i2b+0x24>)
 800ecf0:	4805      	ldr	r0, [pc, #20]	@ (800ed08 <__i2b+0x28>)
 800ecf2:	f240 1145 	movw	r1, #325	@ 0x145
 800ecf6:	f000 fb9f 	bl	800f438 <__assert_func>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	6144      	str	r4, [r0, #20]
 800ecfe:	6103      	str	r3, [r0, #16]
 800ed00:	bd10      	pop	{r4, pc}
 800ed02:	bf00      	nop
 800ed04:	0800fbd0 	.word	0x0800fbd0
 800ed08:	0800fbf2 	.word	0x0800fbf2

0800ed0c <__multiply>:
 800ed0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed10:	4614      	mov	r4, r2
 800ed12:	690a      	ldr	r2, [r1, #16]
 800ed14:	6923      	ldr	r3, [r4, #16]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	bfa8      	it	ge
 800ed1a:	4623      	movge	r3, r4
 800ed1c:	460f      	mov	r7, r1
 800ed1e:	bfa4      	itt	ge
 800ed20:	460c      	movge	r4, r1
 800ed22:	461f      	movge	r7, r3
 800ed24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ed28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ed2c:	68a3      	ldr	r3, [r4, #8]
 800ed2e:	6861      	ldr	r1, [r4, #4]
 800ed30:	eb0a 0609 	add.w	r6, sl, r9
 800ed34:	42b3      	cmp	r3, r6
 800ed36:	b085      	sub	sp, #20
 800ed38:	bfb8      	it	lt
 800ed3a:	3101      	addlt	r1, #1
 800ed3c:	f7ff fedc 	bl	800eaf8 <_Balloc>
 800ed40:	b930      	cbnz	r0, 800ed50 <__multiply+0x44>
 800ed42:	4602      	mov	r2, r0
 800ed44:	4b44      	ldr	r3, [pc, #272]	@ (800ee58 <__multiply+0x14c>)
 800ed46:	4845      	ldr	r0, [pc, #276]	@ (800ee5c <__multiply+0x150>)
 800ed48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ed4c:	f000 fb74 	bl	800f438 <__assert_func>
 800ed50:	f100 0514 	add.w	r5, r0, #20
 800ed54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed58:	462b      	mov	r3, r5
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	4543      	cmp	r3, r8
 800ed5e:	d321      	bcc.n	800eda4 <__multiply+0x98>
 800ed60:	f107 0114 	add.w	r1, r7, #20
 800ed64:	f104 0214 	add.w	r2, r4, #20
 800ed68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ed6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ed70:	9302      	str	r3, [sp, #8]
 800ed72:	1b13      	subs	r3, r2, r4
 800ed74:	3b15      	subs	r3, #21
 800ed76:	f023 0303 	bic.w	r3, r3, #3
 800ed7a:	3304      	adds	r3, #4
 800ed7c:	f104 0715 	add.w	r7, r4, #21
 800ed80:	42ba      	cmp	r2, r7
 800ed82:	bf38      	it	cc
 800ed84:	2304      	movcc	r3, #4
 800ed86:	9301      	str	r3, [sp, #4]
 800ed88:	9b02      	ldr	r3, [sp, #8]
 800ed8a:	9103      	str	r1, [sp, #12]
 800ed8c:	428b      	cmp	r3, r1
 800ed8e:	d80c      	bhi.n	800edaa <__multiply+0x9e>
 800ed90:	2e00      	cmp	r6, #0
 800ed92:	dd03      	ble.n	800ed9c <__multiply+0x90>
 800ed94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d05b      	beq.n	800ee54 <__multiply+0x148>
 800ed9c:	6106      	str	r6, [r0, #16]
 800ed9e:	b005      	add	sp, #20
 800eda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda4:	f843 2b04 	str.w	r2, [r3], #4
 800eda8:	e7d8      	b.n	800ed5c <__multiply+0x50>
 800edaa:	f8b1 a000 	ldrh.w	sl, [r1]
 800edae:	f1ba 0f00 	cmp.w	sl, #0
 800edb2:	d024      	beq.n	800edfe <__multiply+0xf2>
 800edb4:	f104 0e14 	add.w	lr, r4, #20
 800edb8:	46a9      	mov	r9, r5
 800edba:	f04f 0c00 	mov.w	ip, #0
 800edbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800edc2:	f8d9 3000 	ldr.w	r3, [r9]
 800edc6:	fa1f fb87 	uxth.w	fp, r7
 800edca:	b29b      	uxth	r3, r3
 800edcc:	fb0a 330b 	mla	r3, sl, fp, r3
 800edd0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800edd4:	f8d9 7000 	ldr.w	r7, [r9]
 800edd8:	4463      	add	r3, ip
 800edda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800edde:	fb0a c70b 	mla	r7, sl, fp, ip
 800ede2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800edec:	4572      	cmp	r2, lr
 800edee:	f849 3b04 	str.w	r3, [r9], #4
 800edf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800edf6:	d8e2      	bhi.n	800edbe <__multiply+0xb2>
 800edf8:	9b01      	ldr	r3, [sp, #4]
 800edfa:	f845 c003 	str.w	ip, [r5, r3]
 800edfe:	9b03      	ldr	r3, [sp, #12]
 800ee00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ee04:	3104      	adds	r1, #4
 800ee06:	f1b9 0f00 	cmp.w	r9, #0
 800ee0a:	d021      	beq.n	800ee50 <__multiply+0x144>
 800ee0c:	682b      	ldr	r3, [r5, #0]
 800ee0e:	f104 0c14 	add.w	ip, r4, #20
 800ee12:	46ae      	mov	lr, r5
 800ee14:	f04f 0a00 	mov.w	sl, #0
 800ee18:	f8bc b000 	ldrh.w	fp, [ip]
 800ee1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ee20:	fb09 770b 	mla	r7, r9, fp, r7
 800ee24:	4457      	add	r7, sl
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ee2c:	f84e 3b04 	str.w	r3, [lr], #4
 800ee30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ee34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee38:	f8be 3000 	ldrh.w	r3, [lr]
 800ee3c:	fb09 330a 	mla	r3, r9, sl, r3
 800ee40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ee44:	4562      	cmp	r2, ip
 800ee46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee4a:	d8e5      	bhi.n	800ee18 <__multiply+0x10c>
 800ee4c:	9f01      	ldr	r7, [sp, #4]
 800ee4e:	51eb      	str	r3, [r5, r7]
 800ee50:	3504      	adds	r5, #4
 800ee52:	e799      	b.n	800ed88 <__multiply+0x7c>
 800ee54:	3e01      	subs	r6, #1
 800ee56:	e79b      	b.n	800ed90 <__multiply+0x84>
 800ee58:	0800fbd0 	.word	0x0800fbd0
 800ee5c:	0800fbf2 	.word	0x0800fbf2

0800ee60 <__pow5mult>:
 800ee60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee64:	4615      	mov	r5, r2
 800ee66:	f012 0203 	ands.w	r2, r2, #3
 800ee6a:	4607      	mov	r7, r0
 800ee6c:	460e      	mov	r6, r1
 800ee6e:	d007      	beq.n	800ee80 <__pow5mult+0x20>
 800ee70:	4c25      	ldr	r4, [pc, #148]	@ (800ef08 <__pow5mult+0xa8>)
 800ee72:	3a01      	subs	r2, #1
 800ee74:	2300      	movs	r3, #0
 800ee76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee7a:	f7ff fe9f 	bl	800ebbc <__multadd>
 800ee7e:	4606      	mov	r6, r0
 800ee80:	10ad      	asrs	r5, r5, #2
 800ee82:	d03d      	beq.n	800ef00 <__pow5mult+0xa0>
 800ee84:	69fc      	ldr	r4, [r7, #28]
 800ee86:	b97c      	cbnz	r4, 800eea8 <__pow5mult+0x48>
 800ee88:	2010      	movs	r0, #16
 800ee8a:	f7fe f89b 	bl	800cfc4 <malloc>
 800ee8e:	4602      	mov	r2, r0
 800ee90:	61f8      	str	r0, [r7, #28]
 800ee92:	b928      	cbnz	r0, 800eea0 <__pow5mult+0x40>
 800ee94:	4b1d      	ldr	r3, [pc, #116]	@ (800ef0c <__pow5mult+0xac>)
 800ee96:	481e      	ldr	r0, [pc, #120]	@ (800ef10 <__pow5mult+0xb0>)
 800ee98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ee9c:	f000 facc 	bl	800f438 <__assert_func>
 800eea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eea4:	6004      	str	r4, [r0, #0]
 800eea6:	60c4      	str	r4, [r0, #12]
 800eea8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800eeac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eeb0:	b94c      	cbnz	r4, 800eec6 <__pow5mult+0x66>
 800eeb2:	f240 2171 	movw	r1, #625	@ 0x271
 800eeb6:	4638      	mov	r0, r7
 800eeb8:	f7ff ff12 	bl	800ece0 <__i2b>
 800eebc:	2300      	movs	r3, #0
 800eebe:	f8c8 0008 	str.w	r0, [r8, #8]
 800eec2:	4604      	mov	r4, r0
 800eec4:	6003      	str	r3, [r0, #0]
 800eec6:	f04f 0900 	mov.w	r9, #0
 800eeca:	07eb      	lsls	r3, r5, #31
 800eecc:	d50a      	bpl.n	800eee4 <__pow5mult+0x84>
 800eece:	4631      	mov	r1, r6
 800eed0:	4622      	mov	r2, r4
 800eed2:	4638      	mov	r0, r7
 800eed4:	f7ff ff1a 	bl	800ed0c <__multiply>
 800eed8:	4631      	mov	r1, r6
 800eeda:	4680      	mov	r8, r0
 800eedc:	4638      	mov	r0, r7
 800eede:	f7ff fe4b 	bl	800eb78 <_Bfree>
 800eee2:	4646      	mov	r6, r8
 800eee4:	106d      	asrs	r5, r5, #1
 800eee6:	d00b      	beq.n	800ef00 <__pow5mult+0xa0>
 800eee8:	6820      	ldr	r0, [r4, #0]
 800eeea:	b938      	cbnz	r0, 800eefc <__pow5mult+0x9c>
 800eeec:	4622      	mov	r2, r4
 800eeee:	4621      	mov	r1, r4
 800eef0:	4638      	mov	r0, r7
 800eef2:	f7ff ff0b 	bl	800ed0c <__multiply>
 800eef6:	6020      	str	r0, [r4, #0]
 800eef8:	f8c0 9000 	str.w	r9, [r0]
 800eefc:	4604      	mov	r4, r0
 800eefe:	e7e4      	b.n	800eeca <__pow5mult+0x6a>
 800ef00:	4630      	mov	r0, r6
 800ef02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef06:	bf00      	nop
 800ef08:	0800fc4c 	.word	0x0800fc4c
 800ef0c:	0800fb61 	.word	0x0800fb61
 800ef10:	0800fbf2 	.word	0x0800fbf2

0800ef14 <__lshift>:
 800ef14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef18:	460c      	mov	r4, r1
 800ef1a:	6849      	ldr	r1, [r1, #4]
 800ef1c:	6923      	ldr	r3, [r4, #16]
 800ef1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef22:	68a3      	ldr	r3, [r4, #8]
 800ef24:	4607      	mov	r7, r0
 800ef26:	4691      	mov	r9, r2
 800ef28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef2c:	f108 0601 	add.w	r6, r8, #1
 800ef30:	42b3      	cmp	r3, r6
 800ef32:	db0b      	blt.n	800ef4c <__lshift+0x38>
 800ef34:	4638      	mov	r0, r7
 800ef36:	f7ff fddf 	bl	800eaf8 <_Balloc>
 800ef3a:	4605      	mov	r5, r0
 800ef3c:	b948      	cbnz	r0, 800ef52 <__lshift+0x3e>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	4b28      	ldr	r3, [pc, #160]	@ (800efe4 <__lshift+0xd0>)
 800ef42:	4829      	ldr	r0, [pc, #164]	@ (800efe8 <__lshift+0xd4>)
 800ef44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ef48:	f000 fa76 	bl	800f438 <__assert_func>
 800ef4c:	3101      	adds	r1, #1
 800ef4e:	005b      	lsls	r3, r3, #1
 800ef50:	e7ee      	b.n	800ef30 <__lshift+0x1c>
 800ef52:	2300      	movs	r3, #0
 800ef54:	f100 0114 	add.w	r1, r0, #20
 800ef58:	f100 0210 	add.w	r2, r0, #16
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	4553      	cmp	r3, sl
 800ef60:	db33      	blt.n	800efca <__lshift+0xb6>
 800ef62:	6920      	ldr	r0, [r4, #16]
 800ef64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef68:	f104 0314 	add.w	r3, r4, #20
 800ef6c:	f019 091f 	ands.w	r9, r9, #31
 800ef70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef78:	d02b      	beq.n	800efd2 <__lshift+0xbe>
 800ef7a:	f1c9 0e20 	rsb	lr, r9, #32
 800ef7e:	468a      	mov	sl, r1
 800ef80:	2200      	movs	r2, #0
 800ef82:	6818      	ldr	r0, [r3, #0]
 800ef84:	fa00 f009 	lsl.w	r0, r0, r9
 800ef88:	4310      	orrs	r0, r2
 800ef8a:	f84a 0b04 	str.w	r0, [sl], #4
 800ef8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef92:	459c      	cmp	ip, r3
 800ef94:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef98:	d8f3      	bhi.n	800ef82 <__lshift+0x6e>
 800ef9a:	ebac 0304 	sub.w	r3, ip, r4
 800ef9e:	3b15      	subs	r3, #21
 800efa0:	f023 0303 	bic.w	r3, r3, #3
 800efa4:	3304      	adds	r3, #4
 800efa6:	f104 0015 	add.w	r0, r4, #21
 800efaa:	4584      	cmp	ip, r0
 800efac:	bf38      	it	cc
 800efae:	2304      	movcc	r3, #4
 800efb0:	50ca      	str	r2, [r1, r3]
 800efb2:	b10a      	cbz	r2, 800efb8 <__lshift+0xa4>
 800efb4:	f108 0602 	add.w	r6, r8, #2
 800efb8:	3e01      	subs	r6, #1
 800efba:	4638      	mov	r0, r7
 800efbc:	612e      	str	r6, [r5, #16]
 800efbe:	4621      	mov	r1, r4
 800efc0:	f7ff fdda 	bl	800eb78 <_Bfree>
 800efc4:	4628      	mov	r0, r5
 800efc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efca:	f842 0f04 	str.w	r0, [r2, #4]!
 800efce:	3301      	adds	r3, #1
 800efd0:	e7c5      	b.n	800ef5e <__lshift+0x4a>
 800efd2:	3904      	subs	r1, #4
 800efd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800efd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800efdc:	459c      	cmp	ip, r3
 800efde:	d8f9      	bhi.n	800efd4 <__lshift+0xc0>
 800efe0:	e7ea      	b.n	800efb8 <__lshift+0xa4>
 800efe2:	bf00      	nop
 800efe4:	0800fbd0 	.word	0x0800fbd0
 800efe8:	0800fbf2 	.word	0x0800fbf2

0800efec <__mcmp>:
 800efec:	690a      	ldr	r2, [r1, #16]
 800efee:	4603      	mov	r3, r0
 800eff0:	6900      	ldr	r0, [r0, #16]
 800eff2:	1a80      	subs	r0, r0, r2
 800eff4:	b530      	push	{r4, r5, lr}
 800eff6:	d10e      	bne.n	800f016 <__mcmp+0x2a>
 800eff8:	3314      	adds	r3, #20
 800effa:	3114      	adds	r1, #20
 800effc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f000:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f004:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f008:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f00c:	4295      	cmp	r5, r2
 800f00e:	d003      	beq.n	800f018 <__mcmp+0x2c>
 800f010:	d205      	bcs.n	800f01e <__mcmp+0x32>
 800f012:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f016:	bd30      	pop	{r4, r5, pc}
 800f018:	42a3      	cmp	r3, r4
 800f01a:	d3f3      	bcc.n	800f004 <__mcmp+0x18>
 800f01c:	e7fb      	b.n	800f016 <__mcmp+0x2a>
 800f01e:	2001      	movs	r0, #1
 800f020:	e7f9      	b.n	800f016 <__mcmp+0x2a>
	...

0800f024 <__mdiff>:
 800f024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f028:	4689      	mov	r9, r1
 800f02a:	4606      	mov	r6, r0
 800f02c:	4611      	mov	r1, r2
 800f02e:	4648      	mov	r0, r9
 800f030:	4614      	mov	r4, r2
 800f032:	f7ff ffdb 	bl	800efec <__mcmp>
 800f036:	1e05      	subs	r5, r0, #0
 800f038:	d112      	bne.n	800f060 <__mdiff+0x3c>
 800f03a:	4629      	mov	r1, r5
 800f03c:	4630      	mov	r0, r6
 800f03e:	f7ff fd5b 	bl	800eaf8 <_Balloc>
 800f042:	4602      	mov	r2, r0
 800f044:	b928      	cbnz	r0, 800f052 <__mdiff+0x2e>
 800f046:	4b3f      	ldr	r3, [pc, #252]	@ (800f144 <__mdiff+0x120>)
 800f048:	f240 2137 	movw	r1, #567	@ 0x237
 800f04c:	483e      	ldr	r0, [pc, #248]	@ (800f148 <__mdiff+0x124>)
 800f04e:	f000 f9f3 	bl	800f438 <__assert_func>
 800f052:	2301      	movs	r3, #1
 800f054:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f058:	4610      	mov	r0, r2
 800f05a:	b003      	add	sp, #12
 800f05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f060:	bfbc      	itt	lt
 800f062:	464b      	movlt	r3, r9
 800f064:	46a1      	movlt	r9, r4
 800f066:	4630      	mov	r0, r6
 800f068:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f06c:	bfba      	itte	lt
 800f06e:	461c      	movlt	r4, r3
 800f070:	2501      	movlt	r5, #1
 800f072:	2500      	movge	r5, #0
 800f074:	f7ff fd40 	bl	800eaf8 <_Balloc>
 800f078:	4602      	mov	r2, r0
 800f07a:	b918      	cbnz	r0, 800f084 <__mdiff+0x60>
 800f07c:	4b31      	ldr	r3, [pc, #196]	@ (800f144 <__mdiff+0x120>)
 800f07e:	f240 2145 	movw	r1, #581	@ 0x245
 800f082:	e7e3      	b.n	800f04c <__mdiff+0x28>
 800f084:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f088:	6926      	ldr	r6, [r4, #16]
 800f08a:	60c5      	str	r5, [r0, #12]
 800f08c:	f109 0310 	add.w	r3, r9, #16
 800f090:	f109 0514 	add.w	r5, r9, #20
 800f094:	f104 0e14 	add.w	lr, r4, #20
 800f098:	f100 0b14 	add.w	fp, r0, #20
 800f09c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f0a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f0a4:	9301      	str	r3, [sp, #4]
 800f0a6:	46d9      	mov	r9, fp
 800f0a8:	f04f 0c00 	mov.w	ip, #0
 800f0ac:	9b01      	ldr	r3, [sp, #4]
 800f0ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f0b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f0b6:	9301      	str	r3, [sp, #4]
 800f0b8:	fa1f f38a 	uxth.w	r3, sl
 800f0bc:	4619      	mov	r1, r3
 800f0be:	b283      	uxth	r3, r0
 800f0c0:	1acb      	subs	r3, r1, r3
 800f0c2:	0c00      	lsrs	r0, r0, #16
 800f0c4:	4463      	add	r3, ip
 800f0c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f0ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f0d4:	4576      	cmp	r6, lr
 800f0d6:	f849 3b04 	str.w	r3, [r9], #4
 800f0da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f0de:	d8e5      	bhi.n	800f0ac <__mdiff+0x88>
 800f0e0:	1b33      	subs	r3, r6, r4
 800f0e2:	3b15      	subs	r3, #21
 800f0e4:	f023 0303 	bic.w	r3, r3, #3
 800f0e8:	3415      	adds	r4, #21
 800f0ea:	3304      	adds	r3, #4
 800f0ec:	42a6      	cmp	r6, r4
 800f0ee:	bf38      	it	cc
 800f0f0:	2304      	movcc	r3, #4
 800f0f2:	441d      	add	r5, r3
 800f0f4:	445b      	add	r3, fp
 800f0f6:	461e      	mov	r6, r3
 800f0f8:	462c      	mov	r4, r5
 800f0fa:	4544      	cmp	r4, r8
 800f0fc:	d30e      	bcc.n	800f11c <__mdiff+0xf8>
 800f0fe:	f108 0103 	add.w	r1, r8, #3
 800f102:	1b49      	subs	r1, r1, r5
 800f104:	f021 0103 	bic.w	r1, r1, #3
 800f108:	3d03      	subs	r5, #3
 800f10a:	45a8      	cmp	r8, r5
 800f10c:	bf38      	it	cc
 800f10e:	2100      	movcc	r1, #0
 800f110:	440b      	add	r3, r1
 800f112:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f116:	b191      	cbz	r1, 800f13e <__mdiff+0x11a>
 800f118:	6117      	str	r7, [r2, #16]
 800f11a:	e79d      	b.n	800f058 <__mdiff+0x34>
 800f11c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f120:	46e6      	mov	lr, ip
 800f122:	0c08      	lsrs	r0, r1, #16
 800f124:	fa1c fc81 	uxtah	ip, ip, r1
 800f128:	4471      	add	r1, lr
 800f12a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f12e:	b289      	uxth	r1, r1
 800f130:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f134:	f846 1b04 	str.w	r1, [r6], #4
 800f138:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f13c:	e7dd      	b.n	800f0fa <__mdiff+0xd6>
 800f13e:	3f01      	subs	r7, #1
 800f140:	e7e7      	b.n	800f112 <__mdiff+0xee>
 800f142:	bf00      	nop
 800f144:	0800fbd0 	.word	0x0800fbd0
 800f148:	0800fbf2 	.word	0x0800fbf2

0800f14c <__d2b>:
 800f14c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f150:	460f      	mov	r7, r1
 800f152:	2101      	movs	r1, #1
 800f154:	ec59 8b10 	vmov	r8, r9, d0
 800f158:	4616      	mov	r6, r2
 800f15a:	f7ff fccd 	bl	800eaf8 <_Balloc>
 800f15e:	4604      	mov	r4, r0
 800f160:	b930      	cbnz	r0, 800f170 <__d2b+0x24>
 800f162:	4602      	mov	r2, r0
 800f164:	4b23      	ldr	r3, [pc, #140]	@ (800f1f4 <__d2b+0xa8>)
 800f166:	4824      	ldr	r0, [pc, #144]	@ (800f1f8 <__d2b+0xac>)
 800f168:	f240 310f 	movw	r1, #783	@ 0x30f
 800f16c:	f000 f964 	bl	800f438 <__assert_func>
 800f170:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f174:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f178:	b10d      	cbz	r5, 800f17e <__d2b+0x32>
 800f17a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f17e:	9301      	str	r3, [sp, #4]
 800f180:	f1b8 0300 	subs.w	r3, r8, #0
 800f184:	d023      	beq.n	800f1ce <__d2b+0x82>
 800f186:	4668      	mov	r0, sp
 800f188:	9300      	str	r3, [sp, #0]
 800f18a:	f7ff fd7c 	bl	800ec86 <__lo0bits>
 800f18e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f192:	b1d0      	cbz	r0, 800f1ca <__d2b+0x7e>
 800f194:	f1c0 0320 	rsb	r3, r0, #32
 800f198:	fa02 f303 	lsl.w	r3, r2, r3
 800f19c:	430b      	orrs	r3, r1
 800f19e:	40c2      	lsrs	r2, r0
 800f1a0:	6163      	str	r3, [r4, #20]
 800f1a2:	9201      	str	r2, [sp, #4]
 800f1a4:	9b01      	ldr	r3, [sp, #4]
 800f1a6:	61a3      	str	r3, [r4, #24]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	bf0c      	ite	eq
 800f1ac:	2201      	moveq	r2, #1
 800f1ae:	2202      	movne	r2, #2
 800f1b0:	6122      	str	r2, [r4, #16]
 800f1b2:	b1a5      	cbz	r5, 800f1de <__d2b+0x92>
 800f1b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f1b8:	4405      	add	r5, r0
 800f1ba:	603d      	str	r5, [r7, #0]
 800f1bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f1c0:	6030      	str	r0, [r6, #0]
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	b003      	add	sp, #12
 800f1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1ca:	6161      	str	r1, [r4, #20]
 800f1cc:	e7ea      	b.n	800f1a4 <__d2b+0x58>
 800f1ce:	a801      	add	r0, sp, #4
 800f1d0:	f7ff fd59 	bl	800ec86 <__lo0bits>
 800f1d4:	9b01      	ldr	r3, [sp, #4]
 800f1d6:	6163      	str	r3, [r4, #20]
 800f1d8:	3020      	adds	r0, #32
 800f1da:	2201      	movs	r2, #1
 800f1dc:	e7e8      	b.n	800f1b0 <__d2b+0x64>
 800f1de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f1e6:	6038      	str	r0, [r7, #0]
 800f1e8:	6918      	ldr	r0, [r3, #16]
 800f1ea:	f7ff fd2d 	bl	800ec48 <__hi0bits>
 800f1ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f1f2:	e7e5      	b.n	800f1c0 <__d2b+0x74>
 800f1f4:	0800fbd0 	.word	0x0800fbd0
 800f1f8:	0800fbf2 	.word	0x0800fbf2

0800f1fc <__sread>:
 800f1fc:	b510      	push	{r4, lr}
 800f1fe:	460c      	mov	r4, r1
 800f200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f204:	f000 f8f4 	bl	800f3f0 <_read_r>
 800f208:	2800      	cmp	r0, #0
 800f20a:	bfab      	itete	ge
 800f20c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f20e:	89a3      	ldrhlt	r3, [r4, #12]
 800f210:	181b      	addge	r3, r3, r0
 800f212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f216:	bfac      	ite	ge
 800f218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f21a:	81a3      	strhlt	r3, [r4, #12]
 800f21c:	bd10      	pop	{r4, pc}

0800f21e <__swrite>:
 800f21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f222:	461f      	mov	r7, r3
 800f224:	898b      	ldrh	r3, [r1, #12]
 800f226:	05db      	lsls	r3, r3, #23
 800f228:	4605      	mov	r5, r0
 800f22a:	460c      	mov	r4, r1
 800f22c:	4616      	mov	r6, r2
 800f22e:	d505      	bpl.n	800f23c <__swrite+0x1e>
 800f230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f234:	2302      	movs	r3, #2
 800f236:	2200      	movs	r2, #0
 800f238:	f000 f8c8 	bl	800f3cc <_lseek_r>
 800f23c:	89a3      	ldrh	r3, [r4, #12]
 800f23e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f246:	81a3      	strh	r3, [r4, #12]
 800f248:	4632      	mov	r2, r6
 800f24a:	463b      	mov	r3, r7
 800f24c:	4628      	mov	r0, r5
 800f24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f252:	f000 b8df 	b.w	800f414 <_write_r>

0800f256 <__sseek>:
 800f256:	b510      	push	{r4, lr}
 800f258:	460c      	mov	r4, r1
 800f25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f25e:	f000 f8b5 	bl	800f3cc <_lseek_r>
 800f262:	1c43      	adds	r3, r0, #1
 800f264:	89a3      	ldrh	r3, [r4, #12]
 800f266:	bf15      	itete	ne
 800f268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f26a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f26e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f272:	81a3      	strheq	r3, [r4, #12]
 800f274:	bf18      	it	ne
 800f276:	81a3      	strhne	r3, [r4, #12]
 800f278:	bd10      	pop	{r4, pc}

0800f27a <__sclose>:
 800f27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f27e:	f000 b895 	b.w	800f3ac <_close_r>

0800f282 <__swbuf_r>:
 800f282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f284:	460e      	mov	r6, r1
 800f286:	4614      	mov	r4, r2
 800f288:	4605      	mov	r5, r0
 800f28a:	b118      	cbz	r0, 800f294 <__swbuf_r+0x12>
 800f28c:	6a03      	ldr	r3, [r0, #32]
 800f28e:	b90b      	cbnz	r3, 800f294 <__swbuf_r+0x12>
 800f290:	f7fe fa2c 	bl	800d6ec <__sinit>
 800f294:	69a3      	ldr	r3, [r4, #24]
 800f296:	60a3      	str	r3, [r4, #8]
 800f298:	89a3      	ldrh	r3, [r4, #12]
 800f29a:	071a      	lsls	r2, r3, #28
 800f29c:	d501      	bpl.n	800f2a2 <__swbuf_r+0x20>
 800f29e:	6923      	ldr	r3, [r4, #16]
 800f2a0:	b943      	cbnz	r3, 800f2b4 <__swbuf_r+0x32>
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	f000 f82b 	bl	800f300 <__swsetup_r>
 800f2aa:	b118      	cbz	r0, 800f2b4 <__swbuf_r+0x32>
 800f2ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2b4:	6823      	ldr	r3, [r4, #0]
 800f2b6:	6922      	ldr	r2, [r4, #16]
 800f2b8:	1a98      	subs	r0, r3, r2
 800f2ba:	6963      	ldr	r3, [r4, #20]
 800f2bc:	b2f6      	uxtb	r6, r6
 800f2be:	4283      	cmp	r3, r0
 800f2c0:	4637      	mov	r7, r6
 800f2c2:	dc05      	bgt.n	800f2d0 <__swbuf_r+0x4e>
 800f2c4:	4621      	mov	r1, r4
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	f7ff fbee 	bl	800eaa8 <_fflush_r>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	d1ed      	bne.n	800f2ac <__swbuf_r+0x2a>
 800f2d0:	68a3      	ldr	r3, [r4, #8]
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	60a3      	str	r3, [r4, #8]
 800f2d6:	6823      	ldr	r3, [r4, #0]
 800f2d8:	1c5a      	adds	r2, r3, #1
 800f2da:	6022      	str	r2, [r4, #0]
 800f2dc:	701e      	strb	r6, [r3, #0]
 800f2de:	6962      	ldr	r2, [r4, #20]
 800f2e0:	1c43      	adds	r3, r0, #1
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d004      	beq.n	800f2f0 <__swbuf_r+0x6e>
 800f2e6:	89a3      	ldrh	r3, [r4, #12]
 800f2e8:	07db      	lsls	r3, r3, #31
 800f2ea:	d5e1      	bpl.n	800f2b0 <__swbuf_r+0x2e>
 800f2ec:	2e0a      	cmp	r6, #10
 800f2ee:	d1df      	bne.n	800f2b0 <__swbuf_r+0x2e>
 800f2f0:	4621      	mov	r1, r4
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	f7ff fbd8 	bl	800eaa8 <_fflush_r>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	d0d9      	beq.n	800f2b0 <__swbuf_r+0x2e>
 800f2fc:	e7d6      	b.n	800f2ac <__swbuf_r+0x2a>
	...

0800f300 <__swsetup_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	4b29      	ldr	r3, [pc, #164]	@ (800f3a8 <__swsetup_r+0xa8>)
 800f304:	4605      	mov	r5, r0
 800f306:	6818      	ldr	r0, [r3, #0]
 800f308:	460c      	mov	r4, r1
 800f30a:	b118      	cbz	r0, 800f314 <__swsetup_r+0x14>
 800f30c:	6a03      	ldr	r3, [r0, #32]
 800f30e:	b90b      	cbnz	r3, 800f314 <__swsetup_r+0x14>
 800f310:	f7fe f9ec 	bl	800d6ec <__sinit>
 800f314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f318:	0719      	lsls	r1, r3, #28
 800f31a:	d422      	bmi.n	800f362 <__swsetup_r+0x62>
 800f31c:	06da      	lsls	r2, r3, #27
 800f31e:	d407      	bmi.n	800f330 <__swsetup_r+0x30>
 800f320:	2209      	movs	r2, #9
 800f322:	602a      	str	r2, [r5, #0]
 800f324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f328:	81a3      	strh	r3, [r4, #12]
 800f32a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f32e:	e033      	b.n	800f398 <__swsetup_r+0x98>
 800f330:	0758      	lsls	r0, r3, #29
 800f332:	d512      	bpl.n	800f35a <__swsetup_r+0x5a>
 800f334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f336:	b141      	cbz	r1, 800f34a <__swsetup_r+0x4a>
 800f338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f33c:	4299      	cmp	r1, r3
 800f33e:	d002      	beq.n	800f346 <__swsetup_r+0x46>
 800f340:	4628      	mov	r0, r5
 800f342:	f7ff f9a1 	bl	800e688 <_free_r>
 800f346:	2300      	movs	r3, #0
 800f348:	6363      	str	r3, [r4, #52]	@ 0x34
 800f34a:	89a3      	ldrh	r3, [r4, #12]
 800f34c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f350:	81a3      	strh	r3, [r4, #12]
 800f352:	2300      	movs	r3, #0
 800f354:	6063      	str	r3, [r4, #4]
 800f356:	6923      	ldr	r3, [r4, #16]
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	89a3      	ldrh	r3, [r4, #12]
 800f35c:	f043 0308 	orr.w	r3, r3, #8
 800f360:	81a3      	strh	r3, [r4, #12]
 800f362:	6923      	ldr	r3, [r4, #16]
 800f364:	b94b      	cbnz	r3, 800f37a <__swsetup_r+0x7a>
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f36c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f370:	d003      	beq.n	800f37a <__swsetup_r+0x7a>
 800f372:	4621      	mov	r1, r4
 800f374:	4628      	mov	r0, r5
 800f376:	f7fe fa15 	bl	800d7a4 <__smakebuf_r>
 800f37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f37e:	f013 0201 	ands.w	r2, r3, #1
 800f382:	d00a      	beq.n	800f39a <__swsetup_r+0x9a>
 800f384:	2200      	movs	r2, #0
 800f386:	60a2      	str	r2, [r4, #8]
 800f388:	6962      	ldr	r2, [r4, #20]
 800f38a:	4252      	negs	r2, r2
 800f38c:	61a2      	str	r2, [r4, #24]
 800f38e:	6922      	ldr	r2, [r4, #16]
 800f390:	b942      	cbnz	r2, 800f3a4 <__swsetup_r+0xa4>
 800f392:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f396:	d1c5      	bne.n	800f324 <__swsetup_r+0x24>
 800f398:	bd38      	pop	{r3, r4, r5, pc}
 800f39a:	0799      	lsls	r1, r3, #30
 800f39c:	bf58      	it	pl
 800f39e:	6962      	ldrpl	r2, [r4, #20]
 800f3a0:	60a2      	str	r2, [r4, #8]
 800f3a2:	e7f4      	b.n	800f38e <__swsetup_r+0x8e>
 800f3a4:	2000      	movs	r0, #0
 800f3a6:	e7f7      	b.n	800f398 <__swsetup_r+0x98>
 800f3a8:	2000002c 	.word	0x2000002c

0800f3ac <_close_r>:
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	4d06      	ldr	r5, [pc, #24]	@ (800f3c8 <_close_r+0x1c>)
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	4608      	mov	r0, r1
 800f3b6:	602b      	str	r3, [r5, #0]
 800f3b8:	f7f4 f95a 	bl	8003670 <_close>
 800f3bc:	1c43      	adds	r3, r0, #1
 800f3be:	d102      	bne.n	800f3c6 <_close_r+0x1a>
 800f3c0:	682b      	ldr	r3, [r5, #0]
 800f3c2:	b103      	cbz	r3, 800f3c6 <_close_r+0x1a>
 800f3c4:	6023      	str	r3, [r4, #0]
 800f3c6:	bd38      	pop	{r3, r4, r5, pc}
 800f3c8:	2000114c 	.word	0x2000114c

0800f3cc <_lseek_r>:
 800f3cc:	b538      	push	{r3, r4, r5, lr}
 800f3ce:	4d07      	ldr	r5, [pc, #28]	@ (800f3ec <_lseek_r+0x20>)
 800f3d0:	4604      	mov	r4, r0
 800f3d2:	4608      	mov	r0, r1
 800f3d4:	4611      	mov	r1, r2
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	602a      	str	r2, [r5, #0]
 800f3da:	461a      	mov	r2, r3
 800f3dc:	f7f4 f96f 	bl	80036be <_lseek>
 800f3e0:	1c43      	adds	r3, r0, #1
 800f3e2:	d102      	bne.n	800f3ea <_lseek_r+0x1e>
 800f3e4:	682b      	ldr	r3, [r5, #0]
 800f3e6:	b103      	cbz	r3, 800f3ea <_lseek_r+0x1e>
 800f3e8:	6023      	str	r3, [r4, #0]
 800f3ea:	bd38      	pop	{r3, r4, r5, pc}
 800f3ec:	2000114c 	.word	0x2000114c

0800f3f0 <_read_r>:
 800f3f0:	b538      	push	{r3, r4, r5, lr}
 800f3f2:	4d07      	ldr	r5, [pc, #28]	@ (800f410 <_read_r+0x20>)
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	4608      	mov	r0, r1
 800f3f8:	4611      	mov	r1, r2
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	602a      	str	r2, [r5, #0]
 800f3fe:	461a      	mov	r2, r3
 800f400:	f7f4 f919 	bl	8003636 <_read>
 800f404:	1c43      	adds	r3, r0, #1
 800f406:	d102      	bne.n	800f40e <_read_r+0x1e>
 800f408:	682b      	ldr	r3, [r5, #0]
 800f40a:	b103      	cbz	r3, 800f40e <_read_r+0x1e>
 800f40c:	6023      	str	r3, [r4, #0]
 800f40e:	bd38      	pop	{r3, r4, r5, pc}
 800f410:	2000114c 	.word	0x2000114c

0800f414 <_write_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4d07      	ldr	r5, [pc, #28]	@ (800f434 <_write_r+0x20>)
 800f418:	4604      	mov	r4, r0
 800f41a:	4608      	mov	r0, r1
 800f41c:	4611      	mov	r1, r2
 800f41e:	2200      	movs	r2, #0
 800f420:	602a      	str	r2, [r5, #0]
 800f422:	461a      	mov	r2, r3
 800f424:	f7f3 fe72 	bl	800310c <_write>
 800f428:	1c43      	adds	r3, r0, #1
 800f42a:	d102      	bne.n	800f432 <_write_r+0x1e>
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	b103      	cbz	r3, 800f432 <_write_r+0x1e>
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	2000114c 	.word	0x2000114c

0800f438 <__assert_func>:
 800f438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f43a:	4614      	mov	r4, r2
 800f43c:	461a      	mov	r2, r3
 800f43e:	4b09      	ldr	r3, [pc, #36]	@ (800f464 <__assert_func+0x2c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	4605      	mov	r5, r0
 800f444:	68d8      	ldr	r0, [r3, #12]
 800f446:	b954      	cbnz	r4, 800f45e <__assert_func+0x26>
 800f448:	4b07      	ldr	r3, [pc, #28]	@ (800f468 <__assert_func+0x30>)
 800f44a:	461c      	mov	r4, r3
 800f44c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f450:	9100      	str	r1, [sp, #0]
 800f452:	462b      	mov	r3, r5
 800f454:	4905      	ldr	r1, [pc, #20]	@ (800f46c <__assert_func+0x34>)
 800f456:	f000 f833 	bl	800f4c0 <fiprintf>
 800f45a:	f000 f850 	bl	800f4fe <abort>
 800f45e:	4b04      	ldr	r3, [pc, #16]	@ (800f470 <__assert_func+0x38>)
 800f460:	e7f4      	b.n	800f44c <__assert_func+0x14>
 800f462:	bf00      	nop
 800f464:	2000002c 	.word	0x2000002c
 800f468:	0800fe8e 	.word	0x0800fe8e
 800f46c:	0800fe60 	.word	0x0800fe60
 800f470:	0800fe53 	.word	0x0800fe53

0800f474 <_calloc_r>:
 800f474:	b570      	push	{r4, r5, r6, lr}
 800f476:	fba1 5402 	umull	r5, r4, r1, r2
 800f47a:	b93c      	cbnz	r4, 800f48c <_calloc_r+0x18>
 800f47c:	4629      	mov	r1, r5
 800f47e:	f7fd fdd3 	bl	800d028 <_malloc_r>
 800f482:	4606      	mov	r6, r0
 800f484:	b928      	cbnz	r0, 800f492 <_calloc_r+0x1e>
 800f486:	2600      	movs	r6, #0
 800f488:	4630      	mov	r0, r6
 800f48a:	bd70      	pop	{r4, r5, r6, pc}
 800f48c:	220c      	movs	r2, #12
 800f48e:	6002      	str	r2, [r0, #0]
 800f490:	e7f9      	b.n	800f486 <_calloc_r+0x12>
 800f492:	462a      	mov	r2, r5
 800f494:	4621      	mov	r1, r4
 800f496:	f7fe fa31 	bl	800d8fc <memset>
 800f49a:	e7f5      	b.n	800f488 <_calloc_r+0x14>

0800f49c <__ascii_mbtowc>:
 800f49c:	b082      	sub	sp, #8
 800f49e:	b901      	cbnz	r1, 800f4a2 <__ascii_mbtowc+0x6>
 800f4a0:	a901      	add	r1, sp, #4
 800f4a2:	b142      	cbz	r2, 800f4b6 <__ascii_mbtowc+0x1a>
 800f4a4:	b14b      	cbz	r3, 800f4ba <__ascii_mbtowc+0x1e>
 800f4a6:	7813      	ldrb	r3, [r2, #0]
 800f4a8:	600b      	str	r3, [r1, #0]
 800f4aa:	7812      	ldrb	r2, [r2, #0]
 800f4ac:	1e10      	subs	r0, r2, #0
 800f4ae:	bf18      	it	ne
 800f4b0:	2001      	movne	r0, #1
 800f4b2:	b002      	add	sp, #8
 800f4b4:	4770      	bx	lr
 800f4b6:	4610      	mov	r0, r2
 800f4b8:	e7fb      	b.n	800f4b2 <__ascii_mbtowc+0x16>
 800f4ba:	f06f 0001 	mvn.w	r0, #1
 800f4be:	e7f8      	b.n	800f4b2 <__ascii_mbtowc+0x16>

0800f4c0 <fiprintf>:
 800f4c0:	b40e      	push	{r1, r2, r3}
 800f4c2:	b503      	push	{r0, r1, lr}
 800f4c4:	4601      	mov	r1, r0
 800f4c6:	ab03      	add	r3, sp, #12
 800f4c8:	4805      	ldr	r0, [pc, #20]	@ (800f4e0 <fiprintf+0x20>)
 800f4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4ce:	6800      	ldr	r0, [r0, #0]
 800f4d0:	9301      	str	r3, [sp, #4]
 800f4d2:	f7ff f94d 	bl	800e770 <_vfiprintf_r>
 800f4d6:	b002      	add	sp, #8
 800f4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4dc:	b003      	add	sp, #12
 800f4de:	4770      	bx	lr
 800f4e0:	2000002c 	.word	0x2000002c

0800f4e4 <__ascii_wctomb>:
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	4608      	mov	r0, r1
 800f4e8:	b141      	cbz	r1, 800f4fc <__ascii_wctomb+0x18>
 800f4ea:	2aff      	cmp	r2, #255	@ 0xff
 800f4ec:	d904      	bls.n	800f4f8 <__ascii_wctomb+0x14>
 800f4ee:	228a      	movs	r2, #138	@ 0x8a
 800f4f0:	601a      	str	r2, [r3, #0]
 800f4f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f4f6:	4770      	bx	lr
 800f4f8:	700a      	strb	r2, [r1, #0]
 800f4fa:	2001      	movs	r0, #1
 800f4fc:	4770      	bx	lr

0800f4fe <abort>:
 800f4fe:	b508      	push	{r3, lr}
 800f500:	2006      	movs	r0, #6
 800f502:	f000 f82b 	bl	800f55c <raise>
 800f506:	2001      	movs	r0, #1
 800f508:	f7f4 f88a 	bl	8003620 <_exit>

0800f50c <_raise_r>:
 800f50c:	291f      	cmp	r1, #31
 800f50e:	b538      	push	{r3, r4, r5, lr}
 800f510:	4605      	mov	r5, r0
 800f512:	460c      	mov	r4, r1
 800f514:	d904      	bls.n	800f520 <_raise_r+0x14>
 800f516:	2316      	movs	r3, #22
 800f518:	6003      	str	r3, [r0, #0]
 800f51a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f51e:	bd38      	pop	{r3, r4, r5, pc}
 800f520:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f522:	b112      	cbz	r2, 800f52a <_raise_r+0x1e>
 800f524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f528:	b94b      	cbnz	r3, 800f53e <_raise_r+0x32>
 800f52a:	4628      	mov	r0, r5
 800f52c:	f000 f830 	bl	800f590 <_getpid_r>
 800f530:	4622      	mov	r2, r4
 800f532:	4601      	mov	r1, r0
 800f534:	4628      	mov	r0, r5
 800f536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f53a:	f000 b817 	b.w	800f56c <_kill_r>
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d00a      	beq.n	800f558 <_raise_r+0x4c>
 800f542:	1c59      	adds	r1, r3, #1
 800f544:	d103      	bne.n	800f54e <_raise_r+0x42>
 800f546:	2316      	movs	r3, #22
 800f548:	6003      	str	r3, [r0, #0]
 800f54a:	2001      	movs	r0, #1
 800f54c:	e7e7      	b.n	800f51e <_raise_r+0x12>
 800f54e:	2100      	movs	r1, #0
 800f550:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f554:	4620      	mov	r0, r4
 800f556:	4798      	blx	r3
 800f558:	2000      	movs	r0, #0
 800f55a:	e7e0      	b.n	800f51e <_raise_r+0x12>

0800f55c <raise>:
 800f55c:	4b02      	ldr	r3, [pc, #8]	@ (800f568 <raise+0xc>)
 800f55e:	4601      	mov	r1, r0
 800f560:	6818      	ldr	r0, [r3, #0]
 800f562:	f7ff bfd3 	b.w	800f50c <_raise_r>
 800f566:	bf00      	nop
 800f568:	2000002c 	.word	0x2000002c

0800f56c <_kill_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4d07      	ldr	r5, [pc, #28]	@ (800f58c <_kill_r+0x20>)
 800f570:	2300      	movs	r3, #0
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	4611      	mov	r1, r2
 800f578:	602b      	str	r3, [r5, #0]
 800f57a:	f7f4 f841 	bl	8003600 <_kill>
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	d102      	bne.n	800f588 <_kill_r+0x1c>
 800f582:	682b      	ldr	r3, [r5, #0]
 800f584:	b103      	cbz	r3, 800f588 <_kill_r+0x1c>
 800f586:	6023      	str	r3, [r4, #0]
 800f588:	bd38      	pop	{r3, r4, r5, pc}
 800f58a:	bf00      	nop
 800f58c:	2000114c 	.word	0x2000114c

0800f590 <_getpid_r>:
 800f590:	f7f4 b82e 	b.w	80035f0 <_getpid>

0800f594 <_init>:
 800f594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f596:	bf00      	nop
 800f598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f59a:	bc08      	pop	{r3}
 800f59c:	469e      	mov	lr, r3
 800f59e:	4770      	bx	lr

0800f5a0 <_fini>:
 800f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5a2:	bf00      	nop
 800f5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5a6:	bc08      	pop	{r3}
 800f5a8:	469e      	mov	lr, r3
 800f5aa:	4770      	bx	lr
